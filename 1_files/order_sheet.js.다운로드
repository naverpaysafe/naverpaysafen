/**
 * 주문서 관련 스크립트 정보
 */
nmp.createModule("nmp.front.order.order_sheet",{
	_htLayer : {},
	_htInstance : {},
	_htValidationFocusing : {
		"InvalidData.CellPhone" : "select[name=receiptInfo.cellPhoneFirst]",
		"InvalidData.SocialNumber" : "input[name=receiptInfo.socialNumberFirst]",
		"InvalidData.ReceiptBizNo" : "input[name=receiptInfo.receiptBizNoFirst]",
		"InvalidData.Card" : "input[name=receiptInfo.receiptCardFirst]",
		"field.required.tempOrder.nonBankBookPayBankCode" : "select[name=nonBankBookSettleInfo.nonBankBookPayBankCode]",
		"field.required.tempOrder.cardCompanyCode" : "select[name=cardSettleInfo.cardCompanyTypeCode]",
		"" : ""
	},
	_htElementSelector : {
		"root" : "body",
		"orderForm" : "#orderForm",
		"deliveryInfos" : "._deliveryInfos",
		"productCouponDiscountAmt" : "._productCouponDiscountAmt",
		"deliveryCouponDiscountAmt" : "._deliveryCouponDiscountAmt",
		"totalDiscountPrice" : "._totalDiscountPrice",
		"lastTotalAccountPrice" : "._lastTotalAccountPrice",
		"totalPayAmount" : "._totalPayAmount",
		"orderAdditionalInfo" : "._orderAdditionalInfo",
		"discountLayerTemplate" : "._tpl_layer_discount",
		"discountLayer" : "._layer_discount",
		"deliveryFeeLayerTemplate" : "._tpl_layer_deliveryFee",
		"deliveryFeeLayer" : "._layer_deliveryFee",
		"deliveryFeeLayerFixedWidth" : "._layer_deliveryFee_fixedWidth",
		"hopeDeliveryFeeLayerTemplate" : "._tpl_layer_hopeDeliveryFee",
		"hopeDeliveryFeeLayer" : "._layer_hopeDeliveryFee",
		"mileageLayerTemplate" : "._tpl_layer_mileage",
		"mileageLayer" : "._layer_mileage",
		"easyPayMileageLayerTemplate" : "._tpl_layer_easypay_mileage",
		"easyPayMileageLayer" : "._layer_easypay_mileage",
		"reviewMileageLayerTemplate" : "._tpl_layer_review_mileage",
		"reviewMileageLayer" : "._layer_review_mileage",
		"nstampLayerTemplate" : "._tpl_layer_nstamp",
		"nstampLayer" : "._layer_nstamp",
		"prestigeLayer" : "._layer_prestige",
		"prestigeTemplate" : "._tpl_prestige",
		"mallProvisionLayerTemplate" : "._tpl_layer_mall_provision",
		"mallProvisionLayer" : "._layer_mall_provision",
		"commonLayer" : "._layer_common",
		"commonLineLayer" : "._layer_common_line",
		"commonEdgedLayer" : "._layer_common_edged",
		"commonEdgedLineLayer" : "._layer_common_edged_line",
		"naverMileageServiceIntroLayer" : "._naverMileageServiceIntro",
		"inflowBenefitIntroLayer" : "._inflowBenefitIntro",
		"ecShoppingServiceIntroLayer" : "._ecShoppingServiceIntro",
		"noMileageLayer" : "._layer_no_mileage",
		"noMileage" : "._noMileage",
		"overSeaIntroLayer" : "._overSeaIntroLayer",
		"reliefPhoneNumberInfoLayer" : "._reliefPhoneNumberInfo",
		"naverMileageContractLayer" : "._naverMileageContract",
		"memberTelNumber" : "._memberTelNumber",
		"memberEmailAddress" : "._memberEmailAddress",
		"refundInfos" : "._refundInfo",						// 환불 정보 테이블
		"calculationDiscountTarget" : "._calculationDiscountTarget",		// 할인금액 계산 대상
		"mileageUseAmountInput" : "._mileageUseAmount",
		"deliveryMemo" : "input[name=deliveryMemo]",
		"latestDeliveryMemoTemplate" : "._tpl_latest_delivery_memo",
		"latestDeliveryMemoes" : "._latestDeliveryMemoes",
		"switchPaymentArea" : "._switchPaymentArea",
		"dimmedLayer" : "._dimmedLayer",
		"agreeButtons" : "input._agreeBtn",
		"allAgreeButton" : "input._allAgreeBtn",
		"accountInfo" : "tbody.accountInfo",
		"purchaserAgreements" : "._purchaserAgreements",
		"individualCustomUniqueCode" : "input[name=individualCustomUniqueCode]",
		"deliveryInfoType" : "._deliveryInfoType",
		"deliveryPlaces" : "._deliveryPlaces",
		"usePurchaserTelNumber" : "input[name=usePurchaserTelNumber]",
		"baseAddressArea" : "._baseAddressArea",
		"allAddressArea" : "._allAddressArea",
		"deliveryMemoOuter" : "._deliveryMemoOuter",
		"deliveryMemoInner" : "._deliveryMemoInner",
		"deliveryMemoHeader" : "._deliveryMemoHeader",
		"paymentsTab" : "._paymentsTab",
		"naverPaymentsCard" : "._naverPaymentsCard",
		"naverPaymentsBank" : "._naverPaymentsBank",
		"generalPayments" : "._generalPayments",
		"generalPaymentsList" : "._generalPaymentsList",
		"orderAdditionalInfoSelectBoxes" : "._orderAdditionalInfoSelectBoxes",
		"paymentInfoArea" : "._paymentInfoArea",
		"individualCustomUniqueCodeInput" : "._individualCustomUniqueCodeInput",
		"individualCustomUniqueCodeSaved" : "._individualCustomUniqueCodeSaved",
		"cashReceiptInfoSaved" : "._cashReceiptInfoSaved",
		"refuneMethodLayer" : "._layer_refund_method",
		"fdsUuid" : "._fdsUuid",
		"naverToken" : "._naverToken",
		"naverInitToken" : "._naverInitToken",
		"authentificationToken" : "._authentificationToken",
		"individualCustomUniqueCodeInputLayer" : "._layer_icuc_input",
		"individualCustomUniqueCodeSavedLayer" : "._layer_icuc_saved",
		"thirdPeopleAgreeLayer" : "._layer_third_people",
		"naverCashLayer" : "._layer_naver_cash",
		"chargedPointLayer" : "._layer_charged_point",
		"naverPayCardPointLayer" : "._layer_naverpay_cardpoint",
		"naverPayEventLayer" : "._layer_naverpay_event",
		"easyPayMethodButton" : "._easyPayMethod",
		"payEventLayer" : "._layer_payEvent",
		"payEventLayerTemplate" : "._tpl_layer_payEvent",
		"paymentsArea" : "._paymentsArea",
		"simplePaymentsArea" : "._simplePaymentsArea",
		"pointInfoArea" : "._pointInfoArea",
		"cashReceiptHeader" : "._cashReceiptHeader",
		"cashReceiptNotice" : "._cashReceiptNotice",
		"cashReceiptMerchantNotice" : "._cashReceiptMerchantNotice",
		"naverPayAuthPopup" : "._naverPayAuthPopup",
		"bcCardLayer" : "._layer_bc_card",
		"benefitAreaDisplayStatus" : "._benefitAreaDisplayStatus",
		"creditCardInstallmentArea" : "._creditCardInstallmentArea",
		"defaultEasyPayCard" : "input[name=defaultEasyCardCode]",
		"changeEasyPayInfoNotice" : "._changeEasyPayInfoNotice",
		"purchaserInfo" : "._purchaserInfo",
		"telNoNoti" : "._telNoNoti",
		"telNoDuplicated" : "._telNoDuplicated",
		"telNoNeedRegistration" : "._telNoNeedRegistration",
		"telNoInfo" : "._telNoInfo",
		"telNoHighlight" : "._telNoHighlight",
		"companyCardNotice" : "._companycard_notice",
		"deliveryAddressAgreeLayer" : "._layer_delivery_address",
		"cardEventText" : "._cardEvent",
		"chargeEventText" : "._chargeEvent",
		"recentDeliveryAddressArea" : "._recentDeliveryAddressArea",
		"customOrderAgreeLayer" : "._layer_custom_order_agree",
		"preOrderAgreeLayer" : "._layer_pre_order_agree",
		"totalCardPointAmount" : "._totalCardPointAmount",
		"cardPointInputArea" : "._cardPointInputArea",
		"convertCardPointBtn" : "._convertCardPointBtn",
		"cardPointCheck" : "._cardPointCheck",
		"cardPointFailed" : "._cardPointFailed",
		"cardPointLoading" : "._cardPointLoading",
		"pointBalance" : "._pointBalance",
		"paymentMethodStatement": "._paymentMethodStatement",
		"deliveryPlaceNameListArea":"._delivery_place_name_list_area",
		"cardPointArea" : "._cardPointArea",
		"cardPointHyundaiLayer" : "._layer_card_point_hyundai",
		"eventBannerAreaCvsCharge" : "._eventBannerAreaCvsCharge",
		"blackconsumerLayerTemplate" : "._tpl_layer_blackconsumer",
		"pointChargeArea" : "._pointChargeArea",
		"pointChargeLayerTemplate" : "._tpl_layer_point_charge",
		"cashReceiptInfoLayer": ".layer_cash_receipt_info",
		"easyPayBankPanelTemplate": "._tpl_easy_pay_bank_panel",
		"easyPayCardInfoTemplate" : "._tpl_easy_pay_card_info",
		"easyPayCardFlickArea": "._easyPayCardFlickArea",
		"easyPayBankFlickArea": "._easyPayBankFlickArea",
		"cardBenefitInfo" : "._cardBenefitInfo",
		"limitChargePointAmountGuide" : "._limitChargePointAmountGuide",
        "discountOptimizationFailHelpLayer" : "._discountOptimizationFailHelpLayer",
		"pointAllUseButton" : "._pointAllUseButton",
		"purchaseBenefitArea" : "._purchaseBenefit",
		"reviewBenefitArea" : "._reviewBenefit",
		"purchaseBenefitTemplate" : "._tpl_purchase_benefit",
		"reviewBenefitTemplate" : "._tpl_review_benefit",
		"registerAccountBenefitTemplate" : "._tpl_register_account_benefit",
		"adultAuthenticationLayer" : "._layer_adult_authentication",
		"socialNumberSecond" : "._socialNumberSecond",
		"payNextGuideLayer" : "._layer_pay_next_guide",
		"payNextGuideLayerTemplate" : "._tpl_layer_payNextGuide",
		"skip_form" : "._skipTemplate",
		"skipPayMethodInfo" : "._skipPayMethodInfo",
		"skip_bank_info" : "._skipBankInfo",
		"skip_mobile_info" : "._skipMobileInfo",
		"skip_credit_card_info" : "._skipCreditCardInfo",
		"openbankingAgreeLayer" : "._layer_openbanking_agree",
		"skipLayerGeneralPay" : "._skipGeneralPayLayer",
		"skipLayerVirtualAccount" : "._skipVirtualAccountLayer",
		"skipLayers" : "._skipLayer",
		"toolTipEventEasyBank" : "._easyBankToolTipEvent",
		"chargedPointPayment" : "._chargedPointPayment",
		"chargeAmountSelectBoxArea" : "._chargeAmountSelectBoxArea",
		"chargedPointBankList" : "._chargedPointBankList",
		"chargedPointAddBankAccount" : "._chargedPointAddBankAccount",
		"selectChargeAmountTemplate" : "._tpl_layer_selectChargeAmount",
		"chargedPointPriceArea" : "._chargedPointPriceArea",
		"chargedPointMileagePercent" : "._chargedPointMileagePercent",
		"chargePointSufficient" : "._chargePointSufficient",
		"chargePointInsufficient" : "._chargePointInsufficient",
		"chargePointNoticeText" : "._chargePointNoticeText",
		"chargePointAdditionalBenefit" : "._chargePointAdditionalBenefit",
		"chargePointArea" : "._chargePointArea",
		"chargePointBankListToggleButton" : "._chargePointBankListToggleButton",
		"chargeBenefitPoint" : "._chargeBenefitPoint",
		"chargeBenefitPointText" : "._chargeBenefitPointText",
		"" : ""
	},
	initialize : function(options) {
		this._initializeEventAttach();
		this._initializeUrl();
		this._initializeJindoComponents();

		if (this._getOption("switchPayment") == true) {
			var defaultPayment = this._htInstance["aPayMeansClass"][0];
			if (defaultPayment == undefined) {
				alert("변경 가능한 결제수단이 존재하지 않습니다.");
				this.cancelSwitchingPayment(undefined, this._getOption("orderId"));
			}

			if (this._getOption("orderStatus") != "PAYMENT_WATING") {
				alert("주문 상태가 유효하지 않습니다.");
				this.cancelSwitchingPayment(undefined, this._getOption("orderId"));
			}

			defaultPayment.setChecked(true);
			this.changePayment(null,defaultPayment);
			this.checkPossibleInstallment();

			this._getElement("switchPaymentArea").show();
		} else {
			this._initializeOrderSnapshot();
			this._initializeDiscountSummary(this._htInstance["orderSnapshot"].orderProducts);
			this._initializeMileageMap();
			this._initializeMileageUseAmountInput();

			this.checkPossibleInstallment();
			if (!this._getOption("usePointAllYn") || this._getOption("usePointAllYn") == false || (this._getTotalPayAmount() <= 0) || this._getOption("remainNaverMileage") <= 0) {
				this.visibleControlSettlement(true);

				var elPurchaserDefaultPayment = this.initializeDefaultPaymentInfo();

				if (elPurchaserDefaultPayment == undefined || (elPurchaserDefaultPayment.getAttribute != undefined && this._isEasyPay(elPurchaserDefaultPayment.getAttribute("data-code")))) {
					if (elPurchaserDefaultPayment == undefined || this._isEasyPayCreditCard(elPurchaserDefaultPayment.getAttribute("data-code"))) {
						this._htInstance["easyPayCardFlicking"] = this._initPreviewFlick("Card");
					} else if (this._isEasyPayBank(elPurchaserDefaultPayment.getAttribute("data-code"))) {
						this._htInstance["easyPayBankFlicking"] = this._initPreviewFlick("Bank");
					}
				}

				this.changePayment(null, elPurchaserDefaultPayment);
				this.calculateTotalPrice();
			} else {
				this._htInstance["previousPayMethod"] = this._getDefaultPaymentInfo();
				this.useAllSubSettle();
			}

			this._checkDeliveryFeeViolation();
			this._defaultMobilePinPayStatus();

			this._getPointStatusAndAmount();
			this.initChargePointArea();
			this.recalculateAccumulationNMileage();
		}
	},
	callbackRegisterEasyBankSuccess : function (resultCode, resultMessage, accountKey, bankCode, maskedAccountNo, nickName, payPartnershipItemCode, payPartnershipItemName, isPayable) {
		// 계좌 미등록 고객 포인트 사용금액 제한 문구 제거
		if (this._getElement("limitChargePointAmountGuide") != undefined) {
			this._getElement("limitChargePointAmountGuide").hide();
		}

        if (resultCode != null) {
			var oRegisteredEasyPayBank = {
				'accountKey' : accountKey,
				'bankCode' : bankCode,
				'maskedAccountNo' : maskedAccountNo,
				'nickName' : nickName,
				'payPartnershipItemCode' : payPartnershipItemCode,
				'payPartnershipItemName' : payPartnershipItemName,
				'isPayable' : isPayable,
			};

			this._addEasyPayBankPanel(oRegisteredEasyPayBank);
		}
	},
	callbackRegisterEasyBankFail : function (resultCode, resultMessage, acctKey, bnkCd, maskAcctNo, nickNm, payBnkbCd, payBnkbNm, isPayable) {
	},
	openEasyPayPopupByPayMethod : function (sPayMethod) {
		if (this._isEasyPayCreditCard(sPayMethod)) {
			this.openEasyPayCardPopup();
		} else if (this._isEasyPayBank(sPayMethod)) {
			this.openEasyPayBankPopup();
		}
	},
	openEasyPayBankPopup : function () {
		var htUrls = this._getOption("urls");
		var sRegisterUrl = htUrls["pc.easy.bank.register.url"];

		var sReturnUrl = htUrls["order.ordersheet.registration.bank.return.url"];
		var sCancelUrl = htUrls["order.ordersheet.registration.bank.cancel.url"];
		var htData = {"returnUrl": sReturnUrl, "cancelUrl": sCancelUrl, "oType": "S"};

		var sUrl = sRegisterUrl + "?" + $H(htData).toQueryString();
		nmp.openPopup(sUrl, ["width=500", "height=660", "scrollbars=yes"], "openEasyPayBankPopup", null, true);
	},
	_createEasyPayBankPanelHtml : function (oRegisteredEasyPayBank) {
		return $Template(this._getElement("easyPayBankPanelTemplate").html()).process({
			"oRegisteredEasyPayBank": oRegisteredEasyPayBank
		});
	},
	_addEasyPayBankPanel : function (oRegisteredEasyPayBank) {
		var sNewEasyPayBankPanel = this._createEasyPayBankPanelHtml(oRegisteredEasyPayBank);
		var welNewEasyPayBankPanel = $(sNewEasyPayBankPanel);

		var aRegisteredRecentPayMethodList = this._getOption("registeredRecentPayMethodList");
		var welFirstEasyPayBankPanel = $Element(this._getElement("easyPayBankFlickArea").query("._flickPanel"));

		(aRegisteredRecentPayMethodList != undefined && aRegisteredRecentPayMethodList.has("BANK")) ? welFirstEasyPayBankPanel.after(welNewEasyPayBankPanel) : welFirstEasyPayBankPanel.before(welNewEasyPayBankPanel);

		//간편계좌 플리킹 영역 재생성 && 등록된 패널로 이동
		if (this._htInstance["easyPayBankFlicking"] != undefined) {
			this._htInstance["easyPayBankFlicking"].destroy();
			this._htInstance["easyPayBankFlicking"] = this._initPreviewFlick("Bank");
			if (this._getOption("isIE9") != undefined && this._getOption("isIE9")) {
				setTimeout($Fn(function () {
					this._htInstance["easyPayBankFlicking"].refresh(1);
					this._htInstance["easyPayBankFlicking"].moveTo(0);
				}, this).bind(), 0);
				this._htInstance["easyPayBankFlicking"].moveTo((aRegisteredRecentPayMethodList != undefined && aRegisteredRecentPayMethodList.has("BANK")) ? 1 : 0, 10);
			} else {
				this._htInstance["easyPayBankFlicking"].refresh((aRegisteredRecentPayMethodList != undefined && aRegisteredRecentPayMethodList.has("BANK")) ? 1 : 0);
			}
		}
	},
	openEasyPayCardPopup : function () {
		var htUrls = this._getOption("urls");
		var sRegisterUrl = htUrls["pc.easy.card.register.url"];

		var sReturnUrl = htUrls["order.ordersheet.registration.creditCard.return.url"];
		var sCancelUrl = htUrls["order.ordersheet.registration.creditCard.cancel.url"];
		var htData = {"successUrl": sReturnUrl, "failUrl": sCancelUrl};
		var sAvailableCardCodes = "";

		if (this._getOption("partnershipCardCodeList") != undefined && this._getOption("partnershipCardCodeList").length() >= 1) {
			sAvailableCardCodes = "&availableCardCodes=" + this._getOption("partnershipCardCodeList").$value().join(",");
		}

		var sUrl = sRegisterUrl + "?" + $H(htData).toQueryString() + sAvailableCardCodes;
		nmp.openPopup(sUrl, ["width=500", "height=700"], "openEasyPayCardPopup", null, true);
	},
	_initPreviewFlick : function(sPayMethod) {
		var elBaseFlickerArea = $$.getSingle("._easyPay" + sPayMethod + "FlickArea");

		if (elBaseFlickerArea == null) {
			return;
		}

		var welBaseFlickerArea = $Element(elBaseFlickerArea);
		var oEasyPayBaseFlick = new jindo.m.PreviewFlicking("easyPay" + sPayMethod + "Flick", {
			"nMinWidth" : "234px",
			"bActivateOnload": false
		});

		//간편계좌결제 전체 숫자
		var welEasyPayMethodTotalNum = $Element(welBaseFlickerArea.query("._easyPayMethodTotalNum"));
		welEasyPayMethodTotalNum.text(oEasyPayBaseFlick.getTotalPanels() - 1);

		oEasyPayBaseFlick.attach({
			"beforeTouchStart": function(e) {
				e.stop();
			},
			"beforeFlicking": function(e) {
			},
			"flicking": $Fn(function(e) {
				var welEasyPayMethodPrev = $Element(welBaseFlickerArea.query("._easyPayMethodPrev"));
				var welEasyPayBankNext = $Element(welBaseFlickerArea.query("._easyPayMethodNext"));
				var welEasyPayBankCurrentNum = $Element(welBaseFlickerArea.query("._easyPayMethodCurrentNum"));

				var nTotalPanelCount = oEasyPayBaseFlick.getTotalPanels();
				var nEasyPayBankPanelCount = nTotalPanelCount - 1;
				var bIsFirstPanel = e.nContentsIndex === 0;
				var bIsLastPanel = e.nContentsIndex === nEasyPayBankPanelCount;
				var bIsMoreThanTwoBankPanel = nEasyPayBankPanelCount >= 2;

				//Prev버튼 Toggle
				bIsFirstPanel ? welEasyPayMethodPrev.hide() : welEasyPayMethodPrev.show();

				//페이징, Next버튼 Toggle
				if (bIsLastPanel) {
					welEasyPayBankNext.hide();
					welBaseFlickerArea.removeClass('paging');
					$ElementList(welBaseFlickerArea.queryAll("._easyPayMethodPageArea")).hide();
				} else {
					welEasyPayBankNext.show();

					if (bIsMoreThanTwoBankPanel) {
						welEasyPayBankCurrentNum.text(e.nContentsIndex + 1);
						welBaseFlickerArea.addClass('paging');
						$ElementList(welBaseFlickerArea.queryAll("._easyPayMethodPageArea")).show();
					}
				}

				$ElementList(welBaseFlickerArea.queryAll("._easyPayMethodSelect")).removeClass('select');
				$ElementList(welBaseFlickerArea.queryAll("._payMeansClass")).removeClass('selected');
				$ElementList(welBaseFlickerArea.queryAll(".npay_selectbox")).addClass("disabled");

				var elEasyPayMethodSelect = oEasyPayBaseFlick.getElement().query("._easyPayMethodSelect");
				var elEasyPayMethodClass = oEasyPayBaseFlick.getElement().query("._payMeansClass");
				var welEasyPayMethod = $Element(elEasyPayMethodClass);
				welEasyPayMethod.addClass("selected");

				if (elEasyPayMethodSelect != null) {
					var welEasyPayMethodSelect = $Element(elEasyPayMethodSelect);

					if (!welEasyPayMethod.hasClass('disabled')) {
						welEasyPayMethodSelect.addClass('select');
					}
				}

				if(sPayMethod == "Card") {
					this._setEasyPayCardInfoArea(bIsLastPanel, bIsMoreThanTwoBankPanel);
				}

				this.changePayment(null, elEasyPayMethodClass);
			}, this).bind(),
		});

		if (this.getFlickComponent(sPayMethod) == undefined) {
			jindo.$Fn(function (evt) {
				evt.stop();
				nmp.front.order.order_sheet.getFlickComponent(sPayMethod).movePrev();
			}, this).attach(welBaseFlickerArea.query('._easyPayMethodPrev'), 'click');

			jindo.$Fn(function (evt) {
				evt.stop();
				nmp.front.order.order_sheet.getFlickComponent(sPayMethod).moveNext();
			}, this).attach(welBaseFlickerArea.query('._easyPayMethodNext'), 'click');
		}

		if (welBaseFlickerArea.visible()) {
			oEasyPayBaseFlick.activate();
		}

		return oEasyPayBaseFlick;
	},
	_setEasyPayCardInfoArea : function (bIsLastPanel, bIsMoreThanTwoBankPanel) {
		var elBaseFlickerArea = $$.getSingle("._easyPayCardFlickArea");
		if (elBaseFlickerArea == null) {
			return;
		}

		var welBaseFlickerArea = $Element(elBaseFlickerArea);
		var welEasyPayCardAddInfoArea = $Element(welBaseFlickerArea.query("._easyPayCardAddInfoArea"));
		var welEasyPayCardInfoArea = $Element(welBaseFlickerArea.query("._easyPayCardInfoArea"));
		var welEasyPayPageArea = $Element(welBaseFlickerArea.query("._easyPayMethodPageArea"));

		welEasyPayPageArea.show();
		if (bIsMoreThanTwoBankPanel && !bIsLastPanel) {
			welEasyPayPageArea.css("visibility", "visible");
		} else {
			welEasyPayPageArea.css("visibility", "hidden");
		}

		if (welEasyPayCardInfoArea) {
			if (bIsLastPanel) {
				welEasyPayCardAddInfoArea.show();
				welEasyPayCardInfoArea.hide();
			} else {
				var elEasyPayElement = this._getSelectedEasyPayCardElement();
				var sCardInfoHtml = $Template(this._getElement("easyPayCardInfoTemplate").html()).process({
					"sCardName" : elEasyPayElement.getAttribute("data-card-name"),
					"sCardNo" : elEasyPayElement.getAttribute("data-card-no"),
					"sCardType" : elEasyPayElement.getAttribute("data-card-type")
				});
				$Element(welEasyPayCardInfoArea.query(".card_desc")).html(sCardInfoHtml);

				welEasyPayCardAddInfoArea.hide();
				welEasyPayCardInfoArea.show();
			}
		}
	},
	_defaultMobilePinPayStatus : function () {
		if ($$.getSingle("#mobilePay") != null) {
			if (this._getOption("isPinPayMember")) {
				this._htInstance["isPinPay"] = true;
			} else {
				this._htInstance["isPinPay"] = false;
			}
		}
	},
	_getDefaultPaymentInfo : function () {
		var defaultPayMeansClass = this._getOption("defaultPaymentInfo")["payMeansClassType"];

		if (defaultPayMeansClass == "CREDIT_CARD" && this._getOption("defaultPaymentInfo")["easyPayYn"]) {
			defaultPayMeansClass = this._getOption("defaultPaymentInfo")["cardCompanyTypeCode"];
		} else if (defaultPayMeansClass == "BANK" && this._getOption("defaultPaymentInfo")["easyPayYn"]) {
			defaultPayMeansClass = this._getOption("defaultPaymentInfo")["bankCompanyTypeCode"];
		} else if (defaultPayMeansClass == "VIRTUAL_ACCOUNT") {
			this.selectSkipPayMethod(defaultPayMeansClass);
			defaultPayMeansClass = "SKIP";
		}

		if (this.getGeneralPayAmount() < 100 && this.isChargePointPaymentAvailable()) {
			defaultPayMeansClass = "CHARGED_POINT";
		}
		return defaultPayMeansClass;
	},
	initializeDefaultPaymentInfo : function() {
		var elDefaultPayment = null;
		if(this._getOption("defaultPaymentInfo")
			&& this._getOption("defaultPaymentInfo")["payMeansClassType"]
			&& this._getOption("defaultPaymentInfo")["payMeansClassType"] != "POINT"){
			var defaultPayMeansClass = this._getDefaultPaymentInfo();

			this._htInstance["defaultEasyPayCreditCard"] = this._getOption("defaultPaymentInfo")["cardCompanyTypeCode"];

			if (defaultPayMeansClass == "CHARGED_POINT") {
				$A(this._htInstance["aPayMethod"]).forEach(function (el) {
					if (el.getInput().value == defaultPayMeansClass) {
						elDefaultPayment = el;
					}
				});
			} else if (this._getOption("defaultPaymentInfo")["easyPayYn"]) {
				$A($$("._payMeansClass")).forEach(function (el) {
					if (el.getAttribute("data-code") == defaultPayMeansClass) {
						elDefaultPayment = el;
					}
				});
			} else {
				$A(this._htInstance["aPayMeansClass"]).forEach(function(el){
					if(el.getInput().value == defaultPayMeansClass){
						elDefaultPayment = el;
					}
				});
			}
		}
		return elDefaultPayment;
	},
	_checkDeliveryFeeViolation : function() {
		// 무료 배송정책임에도 배송비가 있으면 예외처리
		var deliveryGroupMap = this.getOrderSnapshot().deliveryGroupMap;
		var deliveryFeeGroup = this.getOrderSnapshot().deliveryFeeGroupMap;
		$A($H(deliveryGroupMap).keys()).forEach(function(key){
			var deliveryGroup= deliveryGroupMap[key];
			var deliveryGroupFee = deliveryFeeGroup[key];

			if (deliveryGroup.deliveryFeePayType == "FREE" && deliveryGroupFee > 0) {
				$Element($$.getSingle("a._doPayButton")).hide();
				alert("무료 배송 상품임에도 배송비가 부과된 상품이 있습니다. 확인 후 다시 주문해주세요.");
				history.back();
			}
		});
	},
	_initializeOrderSnapshot : function() {
		this._htInstance["orderSnapshot"] = this._getOption("orderSnapshot");
	},
	_initializeDiscountSummary : function(orderProducts) {
		var calculator = new nmp.component.OrderProductCalculator();
		$A(orderProducts).forEach(function(orderProduct) {
			calculator.addOrderProduct(orderProduct);
		});
		calculator.addIdPerIssuedImmediateDiscount(nmp.front.order.cloningObject(this._htInstance["idPerIssuedImmediateCoupon"]));

		this._htInstance["summary"] = calculator.calculate();
	},
	_initializeMileageMap : function() {
		this._generateMileageLayerDataFromMap(this._getOption("mileageMap"));
	},
	_initializeMileageUseAmountInput : function() {
		if (this._getOption("remainNaverMileage") > 0 && this._getElement("mileageUseAmountInput") != undefined) {
			this._getElement("mileageUseAmountInput").attr("disabled", null);
		}
	},
	getOrderSnapshot : function() {
		return this._htInstance["orderSnapshot"];
	},
    isDiscountOptimization : function() {
        return this._getOption("isDiscountOptimization");
    },
	getJoinCreditCardInfo : function() {
		return this._htInstance["joinCreditCardInfo"];
	},
	getIdPerIssuedImmediateCoupon : function() {
		return this._htInstance["idPerIssuedImmediateCoupon"];
	},
	_getOrderProduct : function(orderProductId) {
		return this.getOrderSnapshot().orderProducts[orderProductId];
	},
	getCreditCardInfos : function() {
		return this._getOption("creditCardInfos");
	},
	getAvailableCreditCardCorp : function() {
		return this._getOption("availableCreditCardCorp");
	},
	applyJoinCreditCardInfo : function(htJoinCreditCardInfo, sPopupType) {
		var isChanged = false;
		var selectedPayMethod = "CREDIT_CARD";
		if(htJoinCreditCardInfo["onlyEasyCard"]){
			selectedPayMethod = htJoinCreditCardInfo["joinCreditCardCompanyCode"];
		}

		if (selectedPayMethod != this.getPayMethod()) {
			if (this._getOption("simplePaymentInfo")) {
				this.showAllPayments();
			}

			if (htJoinCreditCardInfo["onlyEasyCard"]) {
				this.changePayment(null,$$.getSingle("#" + htJoinCreditCardInfo["joinCreditCardCompanyCode"]));

				if (this.getPayMethod() == htJoinCreditCardInfo["joinCreditCardCompanyCode"]) {
					isChanged = true;
				}
			} else {
				var elPayment = null;
				$A(this._htInstance["aPayMeansClass"]).forEach(function(el){
					if(el.getInput().value == "CREDIT_CARD"){
						elPayment = el;
					}
				});
				this.changePayment(null,elPayment,htJoinCreditCardInfo);

				var cardCorpCode = nmp.front.order.order_sheet.getCardCodeList().getValue();
				if (this.getPayMethod() == "CREDIT_CARD" && cardCorpCode == htJoinCreditCardInfo["joinCreditCardCompanyCode"]) {
					isChanged = true;
				}
			}
		} else {
			isChanged = true;
		}

		if(isChanged == false){
			alert("신용카드 결제가 제한되는 상품이 포함되어 있으므로, 해당 쿠폰을 사용하실 수 없습니다.");
			if(sPopupType == "product"){
				this.removeCoupons(true, false);
			}else if(sPopupType == "delivery"){
				this.removeCoupons(false, true);
			}else{
				this.removeCoupons(true, true);
			}
			return false;
		}

		this._htInstance["joinCreditCardInfo"] = nmp.front.order.cloningObject(htJoinCreditCardInfo);

		if($$.getSingle("input[name=joinCreditCardCompanyCode]") == undefined){
			this.addHiddenTagElement("joinCreditCardCompanyCode", this._htInstance["joinCreditCardInfo"]["joinCreditCardCompanyCode"], "_payForm");
		}else{
			$$.getSingle("input[name=joinCreditCardCompanyCode]").value = this._htInstance["joinCreditCardInfo"]["joinCreditCardCompanyCode"];
		}

		if(nmp.front.order.order_sheet.integration_cart != undefined){
			nmp.front.order.order_sheet.integration_cart.changeCompanyTypeCode(undefined, this._htInstance["joinCreditCardInfo"]["joinCreditCardCompanyCode"]);
		} else {
			if($$.getSingle("input[name=isUsedJoinCreditCardCoupon]") == undefined){
				this.addHiddenTagElement("isUsedJoinCreditCardCoupon", 1);
			}else{
				$$.getSingle("input[name=isUsedJoinCreditCardCoupon]").value = 1;
			}
		}
		return true;
	},
	/**
	 * @param hiddenTagName
	 * @param value
	 */
	addHiddenTagElement : function (hiddenTagName, value, className){
		if(value == undefined){
			return;
		}
		var orderForm = this._getElement("orderForm");

		var weHiddenElement = $Element("<input type='hidden' name='" + hiddenTagName + "' " + ((className != undefined) ? " class='" + className + "'" : "") + ">");
		weHiddenElement.appendTo(orderForm.$value());
		var hiddenTag = weHiddenElement.$value();
		hiddenTag.value = value;
	},
	applyDiscounts : function(htOrderSnapshot, htSummary, bCloning, bRecalculateMileage) {
		this._htInstance["orderSnapshot"] = (bCloning ? nmp.front.order.cloningObject(htOrderSnapshot) : htOrderSnapshot);
		this._htInstance["summary"] = nmp.front.order.cloningObject(htSummary);

		this._getElement("totalDiscountPrice").html(nmp.front.order.ui.setThousandComma(htSummary["summary"].discountAmount + (htSummary["summary"]["discountAmountByType"]["deliveryDiscount"] || 0)));
		this._getElement("productCouponDiscountAmt").attr("value", nmp.front.order.ui.setThousandComma(htSummary["summary"].discountAmount));
		if (htSummary["summary"]["discountAmountByType"]["deliveryDiscount"] != undefined) {
			this._getElement("deliveryCouponDiscountAmt").attr("value", nmp.front.order.ui.setThousandComma(htSummary["summary"]["discountAmountByType"]["deliveryDiscount"]));
		}

		this.getOrderSnapshot().orderPayAmount = htSummary["summary"].payAmount;

		// 주문아이템별 할인금액 텍스트 반영
		$A($H(this._htInstance["summary"]["orderProductDiscounts"]).keys()).forEach($Fn(function(orderProductId) {
			var htOrderProductDiscount = this._htInstance["summary"]["orderProductDiscounts"][orderProductId];
			var nDiscountAmount = htOrderProductDiscount["sellerImmediateDiscount"] + htOrderProductDiscount["nmpImmediateDiscount"] + htOrderProductDiscount["multiPurchaseDiscount"];
			var elDiscountAmountText = $$.getSingle("._discountAmountText" + orderProductId);
			if(elDiscountAmountText  == undefined){
				$A.Continue();
			}

			var elDiscountAmount = $$.getSingle("._discountAmount" + orderProductId);
			if (nDiscountAmount == 0) {
				elDiscountAmountText.innerHTML = "-";
				$A($$("._discountAmountLayer" + orderProductId)).forEach(function(v) {
					$Element(v).hide();
				});

				$Element(elDiscountAmount).hide();
			} else {
				elDiscountAmountText.innerHTML = nmp.front.order.ui.setThousandComma(nDiscountAmount) + "원";
				$A($$("._discountAmountLayer" + orderProductId)).forEach(function(v) {
					$Element(v).show("inline-block");
				});

				$Element(elDiscountAmount).show();
			}

			var elProductPayAmount = $$.getSingle("._productOrderPayAmt" + orderProductId);
			if (elProductPayAmount != undefined) {
				var targetOrderProduct = this._getOrderProductByOrderId(this._htInstance["orderSnapshot"]["orderProducts"], orderProductId);
				elProductPayAmount.innerHTML = nmp.front.order.ui.setThousandComma(targetOrderProduct.orderAmount - nDiscountAmount);

				var elProductTotalAmount = $$.getSingle("._productOrderTotalAmt" + orderProductId);
				if (nDiscountAmount == 0) {
					$Element(elProductTotalAmount).hide();
				} else {
					$Element(elProductTotalAmount).show("block");
				}
			}
		}, this).bind());

		this.calculateTotalPrice(undefined, undefined, "payAmounts.NAVER_CASH");

		if (bRecalculateMileage) {
			this.recalculateAccumulationNMileage();
		}

		if(nmp.front.order.order_sheet.storage){
			nmp.front.order.order_sheet.storage.saveOrderInfo();
		}
	},
	_initializeUrl : function(){
		this._htInstance["pop_click"] = {
			"url" :  "/static/html/pop_orderinfo.html",
			"option" : ["width=560px","height=418px"]
		};
		this._htInstance["pop_pay"] = {
			"url" :  "/static/html/pop_orderinfo2.html",
			"option" : ["width=560px","height=610px"]
		};
		this._htInstance["pop_public_cert"] = {
			"url" :  "/static/html/pop_orderinfo3.html",
			"option" : ["width=577px","height=607","scrollbars=yes"]
		};
		this._htInstance["pop_associate_card"] = {
			"url" :  "http://event.shopping.naver.com/event/nEvent/cardhub.nhn",
			"option" : [""]
		};
		this._htInstance["pop_naver_benefit_info"] = {
			"url" :  "http://shopping.naver.com/plan/template.nhn?id=10612",
			"option" : [""]
		};
		this._htInstance["pop_card_req_samsung"] = {
			"url" :  "https://www.samsungcard.com/showroom/shw.do?echo_key=10550826&method=getDetail&prodCode=P1257&category=C&SITE=naverout",
			"option" : [""]
		};
		this._htInstance["pop_card_req_shinhan"] = {
			"url" :  "https://www.shinhancard.com/conts/person/mobile_service/mobile_card/app_card/AppCardApply.jsp",
			"option" : [""]
		};
		this._htInstance["pop_bank"] = {
			"url" :  "/static/html/pop_orderinfo4.html",
			"option" : ["width=560px","height=640px"]
		};
		this._htInstance["pop_bank_time"] = {
			"url" :  "/static/html/pop_orderinfo5.html",
			"option" : ["width=560px","height=610px"]
		};
		this._htInstance["pop_receipt_INTEGRATION_CART"] = {
			"url" :  "/static/html/pop_orderinfo6.html",
			"option" : ["width=577px","height=607","scrollbars=yes"]
		};
		this._htInstance["pop_non_account"] = {
			"url" :  "/static/html/pop_orderinfo7.html",
			"option" : ["width=560px","height=565px"]
		};
		this._htInstance["pop_cellphone"] = {
			"url" :  "/static/html/pop_orderinfo8.html",
			"option" : ["width=577px","height=607","scrollbars=yes"]
		};
		this._htInstance["pop_escrow_info"] = {
			"url" :  "/orderSheetPopup/escrowInfo/" + this._getOption("pgId"),
			"option" : ["width=635px","height=600px","scrollbars=yes"]
		};
		this._htInstance["pop_receipt_CHECKOUT"] = {
			"url" :  "/static/html/pop_orderinfo10.html",
			"option" : ["width=577px","height=607","scrollbars=yes"]
		};
		this._htInstance["pop_pg_paymentc2"] = {
			"url" :  "/static/html/pop_orderinfo11.html",
			"option" : ["width=420px","height=638","scrollbars=yes"]
		};
		this._htInstance["pop_pg_paymentc1"] = {
			"url" :  "/static/html/pop_orderinfo12.html",
			"option" : ["width=600px","height=689","scrollbars=yes"]
		};
		this._htInstance["pop_easy_pay"] = {
			"url" :  "/static/html/pop_orderinfo14.html",
			"option" : ["width=580px","height=452","scrollbars=yes"]
		};
		this._htInstance["pop_escrow_service"] = {
			"url" :  "/static/html/pop_orderinfo15.html",
			"option" : ["width=560px","height=295","scrollbars=yes"]
		};
		this._htInstance["pop_escrow_pay"] = {
			"url" :  "/static/html/pop_orderinfo16.html",
			"option" : ["width=560px","height=250","scrollbars=yes"]
		};
	},
	_initializeJindoComponents : function() {
		jindo.CheckBox.factory(jindo.$$('.ajax_radio'));
		this._htInstance["aPayMethod"] = jindo.CheckBox.factory(jindo.$$('._payMethodRadio'));
		this._htInstance["aPayMeansClass"] = jindo.CheckBox.factory(jindo.$$('._payMeansClassRadio'));
		this._htInstance["aReliefPhoneNumberCheckBox"] = jindo.CheckBox.factory(jindo.$$('._reliefPhoneNumberCheckBox'));
		if (jindo.$$('._cardTypeRadio') != undefined) {
			this._htInstance["aCardType"] = jindo.CheckBox.factory(jindo.$$('._cardTypeRadio'));
		}
		if (jindo.$$('._refundMethodTypeRadio') != undefined) {
			this._htInstance["aRefundMethodType"] = jindo.CheckBox.factory(jindo.$$('._refundMethodTypeRadio'));
		}
		if (jindo.$('newAddressRadio') != undefined) {
			this._htInstance["rdNewAddress"] = new jindo.CheckBox(jindo.$('newAddressRadio'));
		}
		if (jindo.$('ecouponAutoCheckbox') != undefined) {
			new jindo.CheckBox(jindo.$('ecouponAutoCheckbox'));
		}
		if (jindo.$('mpointChk') != undefined) {
			this._htInstance["hyundaiCardPointBox"] = new jindo.CheckBox(jindo.$('mpointChk'));
		}
		if (jindo.$('cellPhone') != undefined) {
			this._htInstance["_group_tel1_1"] = new jindo.SelectBox(jindo.$("cellPhone"), {nHeight : 350});
		}
		if (jindo.$('cellPhone2') != undefined) {
			this._htInstance["_group_tel2_1"] = new jindo.SelectBox(jindo.$("cellPhone2"), {nHeight : 350});
		}
		if (jindo.$('cellPhone3') != undefined) {
			this._htInstance["_group_tel3_1"] = new jindo.SelectBox(jindo.$("cellPhone3"), {nHeight : 350});
		}
		this._htInstance["sbCardCodeList"] = new jindo.SelectBox(jindo.$("cardCodeList"));
		if (jindo.$("bankCodeList") != undefined) {
			new  jindo.SelectBox(jindo.$("bankCodeList"));
		}
		if (jindo.$("cashReceiptCellPhone") != undefined) {
			new  jindo.SelectBox(jindo.$("cashReceiptCellPhone"));
		}
		if (jindo.$("skipPaymentMethodSelectBox") != undefined) {
			this._htInstance["skipPaymentMethodSelectBox"] = new jindo.SelectBox(jindo.$("skipPaymentMethodSelectBox"));
		}
		this._htInstance["sbPrivateCashReceiptIssueType"] = new jindo.SelectBox(jindo.$("privateCashReceiptIssueType"));
		if (jindo.$("installmentCodeList") != undefined) {
			this._htInstance["sbInstallmentCode"] = new jindo.SelectBox(jindo.$("installmentCodeList"));
		}
		if (jindo.$("deliveryMemoParticularInput") != undefined) {
			new  jindo.CheckBox(jindo.$("deliveryMemoParticularInput"));
		}
		this._htInstance["rdAllAgree"] = new jindo.CheckBox(jindo.$("allAgree"));
		new  jindo.CheckBox(jindo.$('updateReceiptInfoCheckbox'));
		if (jindo.$$('._virtualAccountGuideCheckbox') != undefined) {
			jindo.CheckBox.factory(jindo.$$('._virtualAccountGuideCheckbox'));
		}
		if (jindo.$('usePointAllCheckbox') != undefined) {
			this._htInstance["usePointAllCheckbox"] = new jindo.CheckBox(jindo.$('usePointAllCheckbox'));
		}
		var waAgreeCheckBox = $A();
		waAgreeCheckBox.push(new jindo.CheckBox(jindo.$("mallProvisionAgree")));
		waAgreeCheckBox.push(new jindo.CheckBox(jindo.$("buyAgree")));
		if (jindo.$("thirdPeopleAgree") != undefined) {
			waAgreeCheckBox.push(new jindo.CheckBox(jindo.$("thirdPeopleAgree")));
		}
        if (jindo.$("deliveryAddressAgree") != undefined) {
            waAgreeCheckBox.push(new jindo.CheckBox(jindo.$("deliveryAddressAgree")));
        }
        if (jindo.$("customOrderAgree") != undefined) {
            waAgreeCheckBox.push(new jindo.CheckBox(jindo.$("customOrderAgree")));
        }
		if (jindo.$("preOrderAgree") != undefined) {
			waAgreeCheckBox.push(new jindo.CheckBox(jindo.$("preOrderAgree")));
		}
		this._htInstance["waAgreeCheckBox"] = waAgreeCheckBox;

		if (jindo.$("addDeliveryList") != undefined) {
			this._htInstance["addDeliveryList"] = new jindo.CheckBox(jindo.$("addDeliveryList"));
		}
		if (jindo.$("selectDefaultDeliveryPlace") != undefined) {
			this._htInstance["selectDefaultDeliveryPlace"] = new jindo.CheckBox(jindo.$("selectDefaultDeliveryPlace"));
		}

		if (jindo.$("purchaserSocialSecurityAgreeFirstCheckbox") != undefined && jindo.$("purchaserSocialSecurityAgreeSecondCheckbox") != undefined) {
			this._htInstance["chkIndividualCustomCode"] = new jindo.CheckBox(jindo.$("purchaserSocialSecurityAgreeFirstCheckbox"));
			new jindo.CheckBox(jindo.$("purchaserSocialSecurityAgreeSecondCheckbox"));
		}

		$A(this._getElementList("orderAdditionalInfoSelectBoxes", true)).forEach(function(v) {
			new jindo.SelectBox(v);
		});

		// jindo selectbox 설정하게되면 value="" 사용이 불가능해서 임의로 재지정
		$A(this._getElement("root").queryAll("._selectBoxDefault")).forEach(function(v) {
			v.value = "";
		});

		$A(this._getElement("root").queryAll(".selectbox-source")).forEach(function(v) {
			$Element(v).hide();
		});
	},
	_initializeEventAttach : function() {
		var orderForm = this._getElement("orderForm");
		nmp.event_delegator.attach(orderForm, "mouseover", this);
		nmp.event_delegator.attach(orderForm, "mouseout", this);

		var calculationTargetList = this._getElementList("calculationDiscountTarget",true);
		for(var i = 0 ; i < calculationTargetList.length ; i++){
			$Fn(this.checkSubPaymentList,this).attach(calculationTargetList[i],"blur");
			$Fn(this.changeNumber,this).attach(calculationTargetList[i],"focus");
		}

		nmp.front.order.ui.initializeEventDeligator(this._getElement("root", true), this);
	},
	changeNumber : function(we){;
		if(we.element.value != "" && isNaN(we.element.value.replace(/[,]/g,""))==false){
			var currentValue = parseInt(we.element.value.replace(/[,]/g,""),10);
			if(currentValue == 0){
				we.element.value  = "";
			}else{
				we.element.value = currentValue;
				try {
					we.element.setSelectionRange(currentValue.toString().length, currentValue.toString().length);
				} catch (e) {}
			}
		}else{
			we.element.value = "";
		}
	},
	/**
	 * 상품/주문 쿠폰팝업을 띄운다.
	 *
	 * @param we
	 * @param orderId
	 */
	showProductOrderCouponPopup : function(htEvent) {
		var sUrl = "/orderSheetPopup/requestProductCouponInfos";
		var params = "?ORDER_SNAPSHOT_ID=" + this._htInstance["orderSnapshot"]["orderSnapshotKey"] + "&CREDIT_CARD_USE=" + this.getCreditCardUsable();
		nmp.openPopup(sUrl+params,["width=750", "height=600"], "couponPopup", null, true);
	},
	/**
	 * 배송비 쿠폰팝업을 띄운다.
	 *
	 * @param we
	 * @param orderId
	 */
	showDeliveryCouponPopup : function(htEvent) {
		var sUrl = "/orderSheetPopup/requestDeliveryCouponInfos";
		var params = {"ORDER_SNAPSHOT_ID" : this._htInstance["orderSnapshot"]["orderSnapshotKey"]  ,"CREDIT_CARD_USE" : this.getCreditCardUsable() ,"zipCode" : this._getZipCode(), "baseAddress" : this._getBaseAddress()};

		var queryString = $H(params).toQueryString();
		sUrl += "?"+queryString;

		// ie11 관리자모드 실행시 form submit 시 target 지정해도 새창으로 열리는 현상있어 get방식으로 호출
		// ie11 관리자모드 실행시 post 방식으로 팝업창 띄우는경우 문제 발생
		nmp.openPopup(sUrl,["width=750", "height=740"], "couponPopup", null, true);
//		nmp.openPopup(sUrl,["width=750", "height=740"], "couponPopup", params, true);
	},
	/**
	 * 배송지 정보 변경
	 *
	 * @param we
	 *            배송지 전체 정보가 "||" 구분자로 구성되어 있는 파라미터
	 */
	changeDeliveryPlace : function(we, deliveryPlaceSequence, isAddAreaFee) {
		var deliveryPlaceInfo = "";
		if(deliveryPlaceSequence != undefined && this._getElement("deliveryInfoType").query("._deliveryPlace" + deliveryPlaceSequence) != undefined){
			deliveryPlaceInfo = this._getElement("deliveryInfoType").query("._deliveryPlace" + deliveryPlaceSequence).value;
		}
		deliveryPlaceInfo = deliveryPlaceInfo.split("||");
		this.insertDeliveryPlaceInfo(deliveryPlaceInfo);
		this.checkFirstNumber();
		this.toggleLotNumberAddress();
		if(isAddAreaFee == "true"){
			this.findBaseAddress();
		}
	},
	/**
	 * 배송지 정보 배열을 각각 input element에 채운다.
	 *
	 * @param deliveryPlaceInfoArr
	 *            배송지 정보 배열 deliveryPlaceInfoArr[0] : 수신자
	 *            deliveryPlaceInfoArr[1] : 배송지명 deliveryPlaceInfoArr[2] : 연락처1
	 *            deliveryPlaceInfoArr[3] : 연락처2 deliveryPlaceInfoArr[4] : 우편번호
	 *            deliveryPlaceInfoArr[5] : 주소 시도 정보 deliveryPlaceInfoArr[6] :
	 *            주소 상세 정보
	 */
	insertDeliveryPlaceInfo : function(deliveryPlaceInfoArr) {
		if (deliveryPlaceInfoArr.length >= 10) {
			this.insertSplitDeliveryInfo("_group_tel1_",deliveryPlaceInfoArr[2], 3);
			this.insertSplitDeliveryInfo("_group_tel2_",deliveryPlaceInfoArr[3], 3);
			this._getElement("deliveryInfos").query("input[name='deliveryAddress.zipCode']").value = deliveryPlaceInfoArr[4];
			this._getElement("deliveryInfos").query("input[name='deliveryAddress.receiverName']").value = deliveryPlaceInfoArr[0];
			this._getElement("deliveryInfos").query("input[name='deliveryAddress.deliveryPlaceName']").value = deliveryPlaceInfoArr[1];
			this._getElement("deliveryInfos").query("input[name='deliveryAddress.baseAddress']").value = deliveryPlaceInfoArr[5];
			this._getElement("deliveryInfos").query("input[name='deliveryAddress.detailAddress']").value = deliveryPlaceInfoArr[6];
			this._getElement("deliveryInfos").query("input[name='deliveryAddress.roadNameAddress']").value = deliveryPlaceInfoArr[7];
			this._getElement("deliveryInfos").query("input[name='deliveryAddress.lotNumberAddress']").value = deliveryPlaceInfoArr[8];
			this._getElement("deliveryInfos").query("input[name='deliveryAddress.roadNameAddressYn']").value = deliveryPlaceInfoArr[9];
			if(deliveryPlaceInfoArr.length > 10){
				this._getElement("deliveryInfos").query("input[name='deliveryAddress.purchaseMemberDeliveryPlaceSeq']").value = deliveryPlaceInfoArr[10];
			}else{
				this._getElement("deliveryInfos").query("input[name='deliveryAddress.purchaseMemberDeliveryPlaceSeq']").value = "";
			}
		} else {
			this.insertSplitDeliveryInfo("_group_tel1_", "", 3, "010");
			this.insertSplitDeliveryInfo("_group_tel2_", "", 3);
			this._getElement("deliveryInfos").query("input[name='deliveryAddress.zipCode']").value = "";
			this._getElement("deliveryInfos").query("input[name='deliveryAddress.receiverName']").value = "";
			this._getElement("deliveryInfos").query("input[name='deliveryAddress.deliveryPlaceName']").value = "";
			this._getElement("deliveryInfos").query("input[name='deliveryAddress.baseAddress']").value = "";
			this._getElement("deliveryInfos").query("input[name='deliveryAddress.detailAddress']").value = "";
			this._getElement("deliveryInfos").query("input[name='deliveryAddress.purchaseMemberDeliveryPlaceSeq']").value = "";
			this._getElement("deliveryInfos").query("input[name='deliveryAddress.roadNameAddress']").value = "";
			this._getElement("deliveryInfos").query("input[name='deliveryAddress.lotNumberAddress']").value = "";
			this._getElement("deliveryInfos").query("input[name='deliveryAddress.roadNameAddressYn']").value = "false";
		}

		$Element(this._getElement("root").query("p.lotNumberAddress")).html("");
	},
	/**
	 * 배송비 목록에서 선택된 주소 정보를 주문서에 반영한다.
	 *
	 * @param deliveryPlaceInfo
	 */
	applyDeliveryPlaceInfo : function(deliveryPlaceInfo){
		nmp.front.order.order_sheet.editDeliveryInfo();

		if(deliveryPlaceInfo.id != undefined){
			$$.getSingle("input[name=deliveryAddress.purchaseMemberDeliveryPlaceSeq]").value = deliveryPlaceInfo.id;
		}
		$$.getSingle("input[name=deliveryAddress.receiverName]").value = deliveryPlaceInfo.name;
		$$.getSingle("input[name=deliveryAddress.deliveryPlaceName]").value = deliveryPlaceInfo.dlvpName;
		nmp.front.order.order_sheet.insertSplitDeliveryInfo("_group_tel1_",deliveryPlaceInfo.tel1, 3);
		nmp.front.order.order_sheet.insertSplitDeliveryInfo("_group_tel2_",deliveryPlaceInfo.tel2, 3);

		$$.getSingle("input[name=deliveryAddress.zipCode]").value = deliveryPlaceInfo.zipcode;
		$$.getSingle("input[name=deliveryAddress.baseAddress]").value = deliveryPlaceInfo.baseAddr;
		$$.getSingle("input[name=deliveryAddress.detailAddress]").value = deliveryPlaceInfo.detailAddr;
		$$.getSingle("input[name=deliveryAddress.roadNameAddress]").value = deliveryPlaceInfo.roadNameAddress || "";
		$$.getSingle("input[name=deliveryAddress.lotNumberAddress]").value = deliveryPlaceInfo.lotNumberAddress || "";
		$$.getSingle("input[name=deliveryAddress.roadNameAddressYn]").value = deliveryPlaceInfo.roadNameAddressYn || "false";
		nmp.front.order.order_sheet.toggleLotNumberAddress();
		nmp.front.order.order_sheet.findBaseAddress();
	},
	/**
	 * 정보가 구분자로 나뉘어 지는 정보를 "prefixElementName+${sequenceNumber:start(1)}" input
	 * element에 채움
	 *
	 * @param prefixElementName
	 * @param elementValue
	 * @param maxLength
	 * @param seperator
	 */
	insertSplitDeliveryInfo : function(prefixElementClassName, elementValue, maxLength, sDefaultPhoneAreaCode) {
		var firstValue = "", secondValue = "", thirdValue = "";

		if (sDefaultPhoneAreaCode != undefined) {
			firstValue = sDefaultPhoneAreaCode;
		}

		if (elementValue.length > 0 ) {
			var bCompleted = (elementValue.charAt(elementValue.length - 1) != "-");
			elementValue = elementValue.replace(/-/g,"");
			var firstValueSize=0;
			var secondValueSize=0;
			if(elementValue.length < 9 && bCompleted){
				firstValueSize = 0;
			}else{
				firstValueSize = 3;
				if(elementValue.indexOf("02") == 0){
					firstValueSize = 2;
				}else if (elementValue.indexOf("013") == 0 || elementValue.indexOf("030") == 0 || elementValue.indexOf("050") == 0){
					firstValueSize = 4;
				}
			}
			if(elementValue.length < 4){
				secondValueSize = elementValue.length;
			}else if(elementValue.length - firstValueSize < 8 && bCompleted){
				secondValueSize = 3;
			}else{
				secondValueSize = 4;
			}
			firstValue = elementValue.substring(0,firstValueSize);
			secondValue = elementValue.substring(firstValueSize,firstValueSize+secondValueSize);
			thirdValue = elementValue.substring(firstValueSize+secondValueSize);
		}
		this._htInstance[prefixElementClassName +1].setValue(firstValue);
		this._getElement("deliveryInfos").query("."+prefixElementClassName + 2).value = secondValue;
		this._getElement("deliveryInfos").query("."+prefixElementClassName + 3).value = thirdValue;
	},
	/**
	 * 데이터 분리하여 input tag에 값 셋팅
	 *
	 * @param prefixElementName
	 * @param elementValue
	 * @param maxLength
	 * @param repeatIndex
	 */
	insertSubStringDeliveryInfo : function(prefixElementClassName, elementValue, maxLength, repeatIndex){
		if (elementValue != null ) {
			elementValue = elementValue.replace(/-/g,"");
		}
		if (elementValue != "" && elementValue.length == maxLength * repeatIndex) {
			for ( var i = 0; i < maxLength; i++) {
				this._getElement("deliveryInfos").query("."+prefixElementClassName + (i + 1)).value = elementValue.substr(i*repeatIndex,repeatIndex);
			}
		} else {
			for ( var i = 0; i < maxLength; i++) {
				this._getElement("deliveryInfos").query("."+prefixElementClassName + (i + 1)).value = "";
			}
		}
	},
	/**
	 * 배송 메모 정보 토글(일괄/개별)
	 *
	 * @param we
	 */
	changeDeliveryMemo : function(we, element) {
		if(we != undefined){
			checkboxMemo = this._getElement("root").query("input[name=deliveryMemoParticularInputYn]");
		}else{
			checkboxMemo = element;
		}
		if(checkboxMemo.checked == true){
			$A($$(".deliveryProductMemo")).forEach(function(v,i,a){
				$Element(a[i]).show();
			});
			$A($$(".deliverySingleMemo")).forEach(function(v,i,a){
				$Element(a[i]).hide();
			});
		}else{
			$A($$(".deliveryProductMemo")).forEach(function(v,i,a){
				$Element(a[i]).hide();
			});
			$A($$(".deliverySingleMemo")).forEach(function(v,i,a){
				$Element(a[i]).show();
			});
		}
	},
	changeAdditionalInfo : function(we) {
		var isParticularInput = (we.element.tagName == "SPAN") ? $Element(we.element.parentElement).query("input").value : we.element.value;
		if(isParticularInput == "false"){
			$A($$(".additionalInfo")).forEach(function(v,i,a){
				$Element(a[i]).show();
			});
			$A($$(".productAdditionalInfo")).forEach(function(v,i,a){
				$Element(a[i]).hide();
			});
		}else{
			$A($$(".additionalInfo")).forEach(function(v,i,a){
				$Element(a[i]).hide();
			});
			$A($$(".productAdditionalInfo")).forEach(function(v,i,a){
				$Element(a[i]).show();
			});
		}
	},
	findBaseAddress : function(we, message) {
		var zipCode = this._getZipCode();
		var baseAddress = this._getBaseAddress();

		if(zipCode == ""){
			return;
		}
		var orderSnapshotKey = this._htInstance["orderSnapshot"]["orderSnapshotKey"];
		nmp.requestAjax("/orderSheetAjax/searchDeliveryArea",{
			"zipCode" : zipCode,
			"baseAddress" : baseAddress,
			"isAvableCreditCartUse": this.getCreditCardUsable(),
			"orderSnapshotKey":orderSnapshotKey
		}, {
			method : "post",
			onload : $Fn(nmp.front.order.order_sheet.recalculateDeliveryFee, this).bind(),
			onerror : function(res) {
				alert("권역 정보를 가져오지 못했습니다..");
			}
		});
		// AJAX로 우편번호 권역 정보 구해오기. 전달 파라미터 : 우편번호, 결과형태 :
		// {"2":"Azone","3":"Bzone"}
	},
	_getZipCode : function(){
		if(this._getElement("deliveryInfos").query("input[name='deliveryAddress.zipCode']") == null || this._getElement("deliveryInfos").query("input[name='deliveryAddress.zipCode']") == undefined){
			return "";
		}
		return this._getElement("deliveryInfos").query("input[name='deliveryAddress.zipCode']").value;
	},
	_getBaseAddress : function() {
		if (this._getElement("deliveryInfos").query("input[name='deliveryAddress.baseAddress']") == undefined) {
			return "";
		}
		return this._getElement("deliveryInfos").query("input[name='deliveryAddress.baseAddress']").value;
	},
	recalculateDeliveryFee : function(res) {
		var result = res;
		// 성공시 처리
		if (result == null ||  (result != null && result.bSuccess == true)) {
			// 각 상품별 권역정책 번호를 가져와서 zone 번호에 따라 배송비 내역을 변경한다.
			var totalDeliveryCouponCount = 0;
			var isRecalculatePaymentInfo=false;
			var deliveryCouponCountTag = $$.getSingle("._deliveryCouponCount");
			var bIsSetUseAllPoint = this.isUseAllPointChecked();
			if(deliveryCouponCountTag != undefined){
				totalDeliveryCouponCount = parseInt(deliveryCouponCountTag.innerHTML);
			}
			if(result != null && result.bSuccess == true){
				deliveryAreaZone = $H(result.htReturnValue.deliveryAreaTypeCode);
				totalDeliveryCouponCount = result.htReturnValue.usableDeliveryCouponCount;
			}
			var isUsableCoupon = false;
			var deliveryGroupMap = result.htReturnValue.deliveryGroup;
			var deliveryFeeGroup = result.htReturnValue.deliveryFeeGroup;
			$A($H(deliveryGroupMap).keys()).forEach(function(key){
				var deliveryGroup= deliveryGroupMap[key];
				var deliveryGroupFee = deliveryFeeGroup[key];
				if(deliveryGroup.deliveryMethod == "QUICK_SVC" || deliveryGroup.deliveryMethod == "VISIT_RECEIPT"|| deliveryGroup.deliveryMethod == "NOTHING"){
					$A.Continue();
				}

				var priceTextHtml = '';
				var priceHtml = '';
				if(deliveryGroup.deliveryFeePayType == "AFTER_PAY" ) {
					priceTextHtml = '착불';
					priceHtml = '';
					if ((deliveryGroup.fee + deliveryGroup.appliedExtraAreaFee) > 0 ){
						priceHtml = nmp.front.order.ui.setThousandComma(deliveryGroup.fee + deliveryGroup.appliedExtraAreaFee)+'원';
					}
				} else {
					if(deliveryGroupFee > 0){
						priceTextHtml = '';
						priceHtml = nmp.front.order.ui.setThousandComma(deliveryGroupFee)+'원';
					} else {
						priceTextHtml = '무료';
						priceHtml = '';
					}
				}

				var elPriceText = $$.getSingle("._deliveryPriceText"+key);
				var elPrice = $$.getSingle("._deliveryPrice"+key);

				elPriceText.innerHTML=priceTextHtml;
				elPrice.innerHTML=priceHtml;

				if( deliveryGroupFee != 0){
					isUsableCoupon = true;
				}

				var orderProduct = this._getOrderProductByOrderId(this._htInstance["orderSnapshot"].orderProducts, deliveryGroup.appliedProductId);
				var deliveryFee = orderProduct.deliveryFee;
				var isSpecialDeliveryFeeType = ( deliveryFee.type != "FREE" && deliveryFee.type != "CHARGE" );

				var isShowExtraAreaFee = false;
				if ( deliveryGroup.deliveryAreaFee != undefined ) {
					isShowExtraAreaFee =
						( deliveryGroup.deliveryAreaFee.apiSupport && deliveryGroup.appliedExtraAreaFee > 0) ||
						( !deliveryGroup.deliveryAreaFee.apiSupport && deliveryGroup.deliveryAreaFee.areaType != undefined );
				}

				if( isSpecialDeliveryFeeType || isShowExtraAreaFee ){
					var welAdditionalInfoButton = $Element('<a href="#" class="sp_order ico_que _deliveryFeeLayerBtn'+deliveryGroup.id+' _click(nmp.front.order.order_sheet.showLayerDeliveryFee('+deliveryGroup.appliedProductId+')) _stopDefault" ></a>');

					if ( priceHtml == '' ) {
						welAdditionalInfoButton.appendTo(elPriceText);
					} else {
						welAdditionalInfoButton.appendTo(elPrice);
					}
				}
			}, this);

			var  totalDeliveryFee = result.htReturnValue.deliverysPayAmount;
			var orderSnapshot = this.getOrderSnapshot();
			orderSnapshot.deliveryGroupMap = deliveryGroupMap;
			orderSnapshot.deliveryFeeGroupMap = deliveryFeeGroup;

			var calculator = new nmp.component.OrderProductCalculator();
			$A(orderSnapshot.orderProducts).forEach(function(orderProduct) {
				var deliveryGroupDiscount = undefined;
				if(orderProduct.deliveryGroup.discount != undefined){
					deliveryGroupDiscount = orderProduct.deliveryGroup.discount;
				}
				orderProduct.deliveryGroup = deliveryGroupMap[orderProduct.deliveryGroup.id];
				if(deliveryGroupDiscount != undefined){
					orderProduct.deliveryGroup.discount = deliveryGroupDiscount;
				}
				calculator.addOrderProduct(orderProduct);
			});
			calculator.addOrderDiscount(orderSnapshot.discount);
			$H(orderSnapshot.storeDiscounts).forEach(function(value, key) {
				calculator.addStoreDiscount(key, value);
			});
			var htCalculateResult = calculator.calculate();

			var summary = htCalculateResult.summary;

			if(result != null && result.bSuccess == true && deliveryCouponCountTag != undefined){
				deliveryCouponCountTag.innerHTML=totalDeliveryCouponCount;
			}
			// TODO: 정리 필요
			if ($$.getSingle("._deliveryCouponButton") != undefined) {
				if (isUsableCoupon == true && totalDeliveryCouponCount > 0) {
					$$.getSingle("._deliveryCouponButton").style.cursor = "auto";
					$Element($$.getSingle("._deliveryCouponButton")).removeClass("cpn_off");
					$Element($$.getSingle("._deliveryCouponButton")).addClass("cpn");
				} else {
					$$.getSingle("._deliveryCouponButton").style.cursor = "default";
					$Element($$.getSingle("._deliveryCouponButton")).removeClass("cpn");
					$Element($$.getSingle("._deliveryCouponButton")).addClass("cpn_off");
				}
			}

			// 배송비
			$A($$("._totalDeliveryFee")).forEach(function(v,i,a){
				if(a[i].innerHTML != nmp.front.order.ui.setThousandComma(totalDeliveryFee)){
					isRecalculatePaymentInfo = true;
					if (bIsSetUseAllPoint) {
						alert("지역별 추가 배송비 금액이 변경되어 입력하신 배송비 할인 쿠폰과 [항상 포인트 사용] 설정에 따라 포인트 사용액이 모두 초기화 됩니다.");
					} else {
						alert("지역별 추가 배송비 금액이 변경되어 입력하신 배송비 할인쿠폰 및 포인트 사용액이 모두 초기화 됩니다.");
					}
				}
				a[i].innerHTML = nmp.front.order.ui.setThousandComma(totalDeliveryFee);
			});

			// 최종결제 금액
			var mileageAmount = this._getMileageAmount();
			this._changePriceInfoView(summary.payAmount - mileageAmount);

			this.getOrderSnapshot().orderPayAmount = summary.payAmount;
			this.getOrderSnapshot().deliverysPayAmount = summary.deliveryFeeAmount;

			if(isRecalculatePaymentInfo){
				nmp.front.order.order_sheet.getOrderSnapshot()["deliverysPayAmount"]=totalDeliveryFee;
				$$.getSingle("._deliveryCouponDiscountAmt").value=0;
				if($$.getSingle("input[name='payAmounts.NAVER_CASH']") != undefined){
					$$.getSingle("input[name='payAmounts.NAVER_CASH']").value=0;
				}
				nmp.front.order.order_sheet.removeCoupons(false, true);
				nmp.front.order.order_sheet.calculateTotalPrice(undefined, undefined, "deliveryPlacePrice");

				if (bIsSetUseAllPoint) {
					this.useAllSubSettleOnCheckEvent();
				}
			}
			return;
		}
		// 오류시 처리
		if (result != null && result.bSuccess == false) {
			// 오류 메세지가 있을경우 alert
			if (result.htReturnValue.sMessage != null) {
				alert(result.htReturnValue.sMessage);
			}
		} else {
			alert("권역 정보 조회에 실패했습니다.");
		}
	},
	/**
	 * 보조 결제수단 전액 사용시
	 *
	 * @param we
	 * @param useAmount
	 * @param changeElementName
	 */
	useAllSubSettle : function(we){
		var allusableAmount = this._getOption("remainNaverMileage");
		var changeElementName = "payAmounts.NAVER_CASH";

		if(allusableAmount <= 0){
			return;
		}
		$$.getSingle("input[name='"+changeElementName+"']").value = nmp.front.order.ui.setThousandComma(allusableAmount);

		this.calculateTotalPrice(null, allusableAmount, changeElementName);
		this.checkSubPaymentList(undefined, $$.getSingle("input[name='"+changeElementName+"']"));

		if(nmp.front.order.order_sheet.storage){
			nmp.front.order.order_sheet.storage.saveOrderInfo();
		}

		this.showClearPointButton();
	},
	checkSubPaymentList :  function(we, discountElement){
		if(we != undefined){
			discountElement = we.element;
		}
		if (discountElement.value == "") {
			discountElement.value = 0;
		}

		if(discountElement.value != ""){
			discountElement.value = nmp.front.order.ui.setThousandComma(parseInt(discountElement.value.replace(/[,]/g,""),10));
		}
		this.calculateTotalPrice(undefined, undefined, discountElement.name);
		this.showClearPointButton();
	},
	calculateTotalPriceOnKeyUp : function(we) {
		this.calculateTotalPrice(we, this._getOption("remainNaverMileage"), "payAmounts.NAVER_CASH", true);
	},
	/**
	 * 할인/최종 결제금액 재계산
	 *
	 * @param we
	 */
	calculateTotalPrice : function(we, allusableAmount, changeElementName, isSkip) {
		if(we != undefined){
			we.stop();
		}

		if(we != null && we.element.readOnly){
			we.element.value ="0";
		}

		if(we != null && we.element.value==""){
			we.element.value = 0;
		}

		// 특수문자가 입력되는 경우에는 현재 입력된 문자를 삭제 처리하고 return 처리한다.
		if (we != null && !(new RegExp("^[0-9]+$")).test(we.element.value.replace(/[,]/g,"")) ) {
			return;
		}

		var calculationTargetList = this._getElementList("calculationDiscountTarget",true);
		var totalDiscountPrice = 0;
		var totalNaverMileagePrice=0;

		var totalAccountPrice = 0;
		if (this._htInstance["summary"] != undefined) {
			totalAccountPrice = this._htInstance["summary"]["summary"]["orderAmount"] + this._htInstance["summary"]["summary"]["deliveryFeeAmount"] + (this._htInstance["summary"]["summary"]["discountAmountByType"]["deliveryDiscount"] || 0);
			discountAmount = this._htInstance["summary"]["summary"]["discountAmount"];
		} else {
			totalAccountPrice = this.getOrderSnapshot().productsPayAmount + this.getOrderSnapshot().totalDiscountAmount + this.getOrderSnapshot().deliverysPayAmount;
			discountAmount = this.getOrderSnapshot().totalDiscountAmount;
		}
		for(var i = 0 ; i < calculationTargetList.length ; i++){
			var discountElement = calculationTargetList[i];
			if(discountElement.value != "" && isNaN(discountElement.value.replace(/[,]/g,"")) == false){
				if(allusableAmount != undefined && allusableAmount >= 0){
					if(discountElement.name == changeElementName && parseInt(discountElement.value.replace(/[,]/g,""), 10) > allusableAmount){
						discountElement.value = nmp.front.order.ui.setThousandComma(allusableAmount);
						alert("보유 금액 이상 사용은 불가능 합니다.");
					}
				}
				totalDiscountPrice += parseInt(discountElement.value.replace(/[,]/g,""), 10);
			}
			if(discountElement.name.indexOf("NAVER_CASH") > -1){
				totalNaverMileagePrice = this._getMileageAmount();
			}
		}

		var checkChangeValueName="";
		if(totalAccountPrice < totalDiscountPrice){
			if(we != null){
				if(we.element.value.replace(/[,]/g,"") - (totalDiscountPrice - totalAccountPrice) > 0){
					we.element.value = nmp.front.order.ui.setThousandComma(we.element.value.replace(/[,]/g,"") - (totalDiscountPrice - totalAccountPrice));
					totalDiscountPrice = totalAccountPrice;
				}else{
					alert("결제금액이 0원 미만이어서 포인트 금액이 초기화됩니다.");
					we.element.value = 0;
					totalDiscountPrice = discountAmount;
				}
				checkChangeValueName = we.element.name;
			}else if(changeElementName != undefined && allusableAmount != undefined){
				if(isNaN(allusableAmount)){
					allusableAmount = allusableAmount.replace(/[,]/g,"");
				}
				if(allusableAmount - (totalDiscountPrice - totalAccountPrice) > 0){
					$$.getSingle("input[name='"+changeElementName+"']").value = nmp.front.order.ui.setThousandComma(allusableAmount - (totalDiscountPrice - totalAccountPrice));
					totalDiscountPrice = discountAmount;
				}else{
					alert("결제금액이 0원 미만이어서 포인트 금액이 초기화됩니다.");
					$$.getSingle("input[name='"+changeElementName+"']").value = 0;
					totalDiscountPrice = discountAmount;
				}
				checkChangeValueName = $$.getSingle("input[name='"+changeElementName+"']").name;
			}else if(changeElementName != undefined){
				alert("결제금액이 0원 미만이어서 포인트 금액이 초기화됩니다.");
				$$.getSingle("input[name='"+changeElementName+"']").value = 0;
				totalDiscountPrice = discountAmount;
				checkChangeValueName = "payAmounts.NAVER_CASH";
			}

			if(checkChangeValueName.indexOf("NAVER_CASH") > -1){
				totalNaverMileagePrice = this._getMileageAmount();
			}
		}

		var totalDeliveryFee = $$.getSingle(".totalDeliveryFee",this._getElement("discountPriceTable",true));
		if(totalDeliveryFee != undefined){
			totalDeliveryFee = parseInt(totalDeliveryFee.innerHTML.replace(/[,]/g,""));
		}else{
			totalDeliveryFee = 0;
		}

		if(totalAccountPrice-totalDiscountPrice < 100  && this._htInstance["joinCreditCardInfo"] != undefined){
			if(we==undefined || (we != undefined && we.type != "keyup")){
				if(we != undefined){
					we.element.value=0;
				}else{
					if($$.getSingle("input[name='"+changeElementName+"']") != undefined){
						$$.getSingle("input[name='"+changeElementName+"']").value = 0;
					}
				}
				if(isSkip == undefined){
					alert(this.trimCardName(this._htInstance["joinCreditCardInfo"]["joinCreditCardCompanyName"])+"카드로 결제 시에만 사용 가능한 쿠폰을 적용한 경우, 해당 신용카드 결제 금액이 있어야 합니다.(신용카드 최소 결제금액 : 1,000원)");
				}
				totalNaverMileagePrice = 0;
				if(changeElementName == "deliveryPlacePrice"){
					this.removeCoupons(true, true);
					return;
				}
				totalDiscountPrice = discountAmount;
			}
		}
		if(isNaN(totalDiscountPrice)){
			totalDiscountPrice = totalDiscountPrice.replace(/[,]/g,"");
		}

		// 할인금액 합계
		if($$.getSingle("._useNaverMileagePrice",this._getElement("discountPriceTable",true)) != undefined){
			$$.getSingle("._useNaverMileagePrice",this._getElement("discountPriceTable",true)).innerHTML=nmp.front.order.ui.setThousandComma(totalNaverMileagePrice);
		}

		this.checkPossibleInstallment();
		this.changeNaverDonInfoText(totalAccountPrice-totalDiscountPrice);

		if(isSkip == undefined){
			if(totalAccountPrice-totalDiscountPrice == 0){
				if (this._htInstance["previousPayMethod"] == undefined) {
					this._htInstance["previousPayMethod"] = this.getPayMethod();
				}

				this.visibleControlSettlement(false);

				this.changePaymentByPayMethod("POINT");
			}else{
				this.visibleControlSettlement(true);
				// 결제 수단 첫번째꺼 기본선택
				if($$("._payMeansClass").length == 1 && $$("._payMeansClass")[0].value =="POINT"){
					this.visibleControlSettlement(false);
				}

				if (this.getPayMethod() == "CHARGED_POINT" && !this.validatePayAmountForChargePointPayment(true)) {
					var sSelectAlternativePaymentTab = this._selectAlternativePaymentTab(true);
					this.changePaymentTab(null, sSelectAlternativePaymentTab);
					this._setPaymentTabChecked(sSelectAlternativePaymentTab);
					return;
				}

				if (this._htInstance["previousPayMethod"] != undefined) {
					var sPayMethod = this._htInstance["previousPayMethod"];
					this._htInstance["previousPayMethod"] = undefined;
					this.changePaymentByPayMethod(sPayMethod);
				} else {
					var currentPayMethod = this.getPayMethod();
					var currentPayMethodElement = "";

					if (!this._isEasyPay(currentPayMethod) && currentPayMethod != "CHARGED_POINT") {
						$A(this._htInstance["aPayMeansClass"]).forEach($Fn(function(v,i,a){
							if(a[i].getChecked()){
								currentPayMethodElement = v;
							}
							// 100원 이상인 경우에는 신용카드 기본 선택
							if((totalAccountPrice-totalDiscountPrice) >= 100 && a[i].value=="CREDIT_CARD" && (currentPayMethod == "VIRTUAL_ACCOUNT" || currentPayMethod == "POINT")){
								a[i].setChecked(true);
								currentPayMethodElement = v;
								// 100원 미만인 경우에는 무통장 입금이 기본 선택
							}else if( (totalAccountPrice-totalDiscountPrice) < 100 && a[i].value=="VIRTUAL_ACCOUNT"){
								a[i].setChecked(true);
								currentPayMethodElement = v;
							}
						},this).bind());
						this.changePayment(null,currentPayMethodElement);
					}
				}
			}
			this.initChargePointArea(true);
		}

		this._changePriceInfoView(totalAccountPrice - totalDiscountPrice);

		this.viewCheckCashReceiptForm();

		this.recalculateAccumulationNMileage();
	},
	_changePriceInfoView : function (totalPrice) {
		if (totalPrice == undefined) {
			totalPrice = this.getGeneralPayAmount();
		}

		this._getElement("totalPayAmount").attr("value", totalPrice);

		if (this.getPayMethod() == "CHARGED_POINT") {
			$$.getSingle("._lastTotalAccountPrice", this._getElement("discountPriceTable", true)).innerHTML = this._getImagedNumberFormatHtml(totalPrice) + "<b class=\"p_color_green\">충전포인트</b>";
		} else {
			$$.getSingle("._lastTotalAccountPrice", this._getElement("discountPriceTable", true)).innerHTML = this._getImagedNumberFormatHtml(totalPrice);
		}

		if (this.getPayMethod() == "CHARGED_POINT" && this.isChargePointPaymentAvailable(true) && (totalPrice - this._getChargedPointAmount()) > 0) {
			this._getElementList("chargedPointPriceArea").show();
			this._getElement("chargePointAmount").html(nmp.front.order.ui.setThousandComma(this._getChargeAmount()));
			this._getElement("remainChargedPointAmount").html(nmp.front.order.ui.setThousandComma(this._getChargeAmount() + this._getChargedPointAmount() - (totalPrice)));
		} else {
			this._getElementList("chargedPointPriceArea").hide();
		}
	},
	changeNaverDonInfoText : function(lastPaymentPrice){
		$ElementList($$("._naverDonInfoText")).hide();
		if(this._getOption("remainNaverDon") > lastPaymentPrice){
			if($$.getSingle("._remainNaverDonPayAmountOver")){
				$Element($$.getSingle("._remainNaverDonPayAmountOver")).show();
			}
		}else{
			if($$.getSingle("._remainNaverDonPayAmountUnder")){
				$Element($$.getSingle("._remainNaverDonPayAmountUnder")).show();
			}
		}
	},
	checkPossibleInstallment : function(){
		if (this._isEasyPay(this.getPayMethod())) {
			if (this._htInstance["sbInstallmentCode"] != undefined) {
				this._htInstance["sbInstallmentCode"].disable();
			}
		} else {
			if (this._htInstance["sbInstallmentCode"] != undefined) {
				this._htInstance["sbInstallmentCode"].enable();
			}
		}

		var generalPayAmt = 0;
		if (this._getOption("switchPayment") == true) {
			generalPayAmt = this._getOption("generalPayAmount");
		} else {
			generalPayAmt = this.getOrderSnapshot()["orderPayAmount"] - this._getMileageAmount();
		}
		var oInstallmentCode = this.getInstallmentCodeSelectBox();
		if(oInstallmentCode == undefined){
			return;
		}
		var bInstallmentUnavailable = (this.getPayMethod() == "CREDIT_CARD" && this._isCreditCardInstallmentUnavailable()) || (this._getSelectedEasyPayCardType() != undefined && this._getSelectedEasyPayCardType() != "CREDIT");
		if (generalPayAmt < this.getMinimumInstallmentPayAmount() || bInstallmentUnavailable){
			nmp.front.order.ui.toggleInstallmentComponent(oInstallmentCode, false, true);
		} else {
			nmp.front.order.ui.toggleInstallmentComponent(oInstallmentCode, true);
		}

		if (this._getOption("switchPayment") == true) {
			if (nmp.front.order.order_status.order_detail.integration_cart.isInitialized()) {
				nmp.front.order.order_status.order_detail.integration_cart.changeInstallment(null);
			}
		} else {
			if (nmp.front.order.order_sheet.integration_cart.isInitialized()) {
				nmp.front.order.order_sheet.integration_cart.changeInstallment(null);
				nmp.front.order.order_sheet.integration_cart.changeInstallmentSelectBoxText();
			}
		}
	},
	/**
	 * 현금 영수증 신청 여부
	 *
	 * @param we
	 */
	isCashReceipt : function(we){
		var elTarget = $Element(we.element.parentElement).query("input");
		var weReceiptLayer = $Element($$.getSingle("._cashReceiptInputArea"));
		if(elTarget.value == "true"){
			$ElementList($$("div .cashReceiptInfo")).show();
			$ElementList((weReceiptLayer).queryAll("input,select")).attr("disabled",false);
			this.changeReceiptType();
		}else{
			$ElementList((weReceiptLayer).queryAll("input,select")).attr("disabled",true);
			$ElementList($$("div .cashReceiptInfo")).hide();
		}
	},
	/**
	 * 현금 영수증 발급이 가능한 결제수단이 사용되었는지 확인하고, 사용된 경우 현금영수증 입력 form을 보여준다.
	 */
	viewCheckCashReceiptForm : function(){
		var paymeansMethod = this.getPayMethod();

		if (this._getOption("easyBankCode").has(paymeansMethod)) {
			paymeansMethod = "BANK";
		}

		var waPossiblePayMeans = $A(this._getOption("cashReceiptIssuePossiblePayMeans"));

		var weReceiptLayer = $Element($$.getSingle("._cashReceiptTemplate"));
		if ((this._getOption("orderClass") == "CHECKOUT" && this._isEasyPayBank(this.getPayMethod())) || waPossiblePayMeans.has(paymeansMethod)) {
			if (paymeansMethod != "BANK") {
				var elNaverPayPointNotice = $Element($$.getSingle(".naverPayPoint"));
				if (elNaverPayPointNotice != undefined) {
					elNaverPayPointNotice.show();

					if (paymeansMethod == "POINT" || paymeansMethod == "CHARGED_POINT") {
						elNaverPayPointNotice.css("border-top", "0px");
					}
				}
			}

			var cashReceiptPossibleMerchant = true;
			if ($$.getSingle("input[id=cashReceiptIssueImpossibleMerchant]") != undefined &&
				$$.getSingle("input[id=cashReceiptIssueImpossibleMerchant]").value == "N" &&
				!this._isEasyPayBank(this.getPayMethod())) {
				cashReceiptPossibleMerchant = false;
			}

			var cashReceiptIssueImpossible = (!this._isEasyPayBank(this.getPayMethod())) && ($A(this._getOption("payMeansInquiryList")).some(function(payMeans, i, o) {
				return payMeans.payMeansClass == paymeansMethod &&
					payMeans.cashReceiptIssuePossible != null &&
					!payMeans.cashReceiptIssuePossible ;
			}));

			var cashReceiptInputEnabled = !cashReceiptIssueImpossible;
			nmp.front.order.ui.enableFields(weReceiptLayer, cashReceiptInputEnabled);

			if (this._isEasyPayBank(this.getPayMethod()) || this.getPayMethod() == "CHARGED_POINT" || (cashReceiptInputEnabled && cashReceiptPossibleMerchant)) {
				if (this._getElement("cashReceiptInfoSaved") == undefined) {
					weReceiptLayer.show();
				} else {
					weReceiptLayer.hide();
					this._getElement("cashReceiptInfoSaved").show();
				}
			} else {
				weReceiptLayer.hide();
				if (this._getElement("cashReceiptInfoSaved") != undefined) {
					this._getElement("cashReceiptInfoSaved").hide();
				}
			}
			this._getElement("cashReceiptNotice").show();

			var elCashReceiptApplied = this._getElement("root").query("input[name=receiptInfo.receiptApplyed]");
			if (elCashReceiptApplied.checked) {
				this.changeReceiptType();
			}

			var _elCashReceiptInfo = $Element($$.getSingle(".cashReceiptIssueInfomationsDON"));
			if ((this.getMileageUseAmount() > 0)) {
				_elCashReceiptInfo.show();
			} else {
				_elCashReceiptInfo.hide();
			}

			if (this._getOption("orderClass") == "INTEGRATION_CART" && this.getMileageUseAmount() == 0) {
				this._getElement("cashReceiptNotice").hide();
			} else {
				this._getElement("cashReceiptNotice").show();
			}

			if (this._getOption("orderClass") == "CHECKOUT" && this._isEasyPayBank(this.getPayMethod())) {
				this._getElement("cashReceiptMerchantNotice").hide();
				if (this.getMileageUseAmount() == 0) {
					this._getElement("cashReceiptNotice").hide();
				}
			} else if (this._getElement("cashReceiptMerchantNotice") != undefined) {
				this._getElement("cashReceiptMerchantNotice").show();
			}

			if($$.getSingle("._payAgree") != undefined){
				$Element($$.getSingle("._payAgree")).addClass("bbm_line");
			}
		}else{
			if (paymeansMethod != "BANK") {
				var elNaverPayPointNotice = $Element($$.getSingle(".naverPayPoint"));
				if (elNaverPayPointNotice != undefined) {
					elNaverPayPointNotice.hide();

					if (paymeansMethod == "POINT") {
						elNaverPayPointNotice.css("border-top", "");
					}
				}
			}

			weReceiptLayer.hide();
			this._getElement("cashReceiptNotice").hide();

			if (this._getElement("cashReceiptInfoSaved") != undefined) {
				this._getElement("cashReceiptInfoSaved").hide();
			}
		}
	},
	/**
	 * 결제수단 입력 정보 노출/숨기기
	 *
	 * @param isVisible
	 */
	visibleControlSettlement : function(isVisible){
		var waNotice = $ElementList(".guide_box");
		if(isVisible){
			if (this._getOption("switchPayment") == true || (this._getOption("orderClass") == "CHECKOUT" && !this._isEasyPay(this.getPayMethod()) && !this.getOption("isEasyBooking") && !this.getOption("isEscrow") && nmp.front.order.order_sheet.macos == undefined && this._getMileageAmount() <= 0)) {
				$Element($$.getSingle("._productAgreement")).hide();
			} else {
				$Element($$.getSingle("._productAgreement")).show();
			}

			$ElementList(this._getElementList("cashReceiptHeader", true)).removeClass("line");
			if (this._getOption("simplePaymentInfo")) {
				this._getElement("simplePaymentsArea").show();
				if (waNotice != undefined) {
					waNotice.show();
				}
			} else {
				$ElementList(this._getElementList("paymentsArea", true)).show();
			}
			this._getElement("pointInfoArea").hide();
		}else{
			$Element($$.getSingle("._productAgreement")).show();

			$ElementList(this._getElementList("cashReceiptHeader", true)).addClass("line");
			if (this._getOption("simplePaymentInfo")) {
				this._getElement("simplePaymentsArea").hide();
				if (waNotice != undefined) {
					waNotice.hide();
				}
			} else {
				$ElementList(this._getElementList("paymentsArea", true)).hide();
			}
			this._getElement("pointInfoArea").show();
			if (this._getElement("changeEasyPayInfoNotice") != undefined) {
				this._getElement("changeEasyPayInfoNotice").hide();
			}

			if (this._getElement("cardBenefitInfo") != undefined) {
				this._getElement("cardBenefitInfo").hide();
			}
		}
	},
	/**
	 * 결제 수단 변경마다 각 등록 폼을 보여준다.
	 *
	 * @param we
	 * @param selectedElemet
	 */
	changePayment : function(we, selectedElement, joinCreditCardInfo, bPreviousMethod){
		var element = undefined;

		$A(this._getElementList("payMeansClass").$value()).forEach(function (v, i, a) {
			if (a[i].attr("checked")) {
				element = a[i].$value();
			}
		});

        if (selectedElement != undefined && selectedElement != "") {
            if (selectedElement.tagName == "DIV") {
                element = selectedElement;
            } else {
                element = selectedElement.getInput();
            }
        }

		if (we != undefined) {
            if (we.element.tagName == "DIV" || (we.element.tagName == "SPAN" && $Element(we.element).hasClass("_ep"))) {
				$ElementList(this._getElementList("easyPayMethodButton", true)).removeClass("on");

				if (we.element.tagName == "SPAN") {
					$Element(we.element.parentElement.parentElement).addClass("on");
					element = we.element.parentElement;
				} else if (we.element.tagName == "DIV") {
					element = we.element;
				} else {
					$Element(we.element.parentElement).addClass("on");
					element = we.element;
				}
			} else if (we.element.tagName == "SPAN") {
				element = $Element(we.element.parentElement).query("input");
			} else {
				element = we.element;
			}
		}

		var joinCreditCardCode = undefined;
		if (joinCreditCardInfo == undefined) {
			joinCreditCardInfo = this._htInstance["joinCreditCardInfo"];
		}
		if (joinCreditCardInfo != undefined) {
			joinCreditCardCode = joinCreditCardInfo["joinCreditCardCompanyCode"];
		}

		var paymentMeansCode = element.tagName == "DIV" ? element.getAttribute("data-code") : element.value;

		var elPaymentButton = $Element($$.getSingle("button._doPayButton span"));
		if (paymentMeansCode == "SKIP" || paymentMeansCode == "VIRTUAL_ACCOUNT") {
			if (this._getCurrentSkipPayMethod() == "VIRTUAL_ACCOUNT") {
				paymentMeansCode = this._getCurrentSkipPayMethod();
			}

			if (elPaymentButton != undefined) {
				elPaymentButton.text("주문하기");
				elPaymentButton.addClass("txt_order");
				elPaymentButton.removeClass("txt_payment");
			}
		} else {
			if (elPaymentButton != undefined) {
				elPaymentButton.text("결제하기");
				elPaymentButton.addClass("txt_payment");
				elPaymentButton.removeClass("txt_order");
			}
		}

		if(!bPreviousMethod && joinCreditCardCode != undefined
			&& (
				(paymentMeansCode != "CREDIT_CARD" && !this._getOption("easyCardCode").has(paymentMeansCode))	// 신용카드도 아니고 간편결제도 아닌 경우
				|| (paymentMeansCode == "CREDIT_CARD" && joinCreditCardInfo["onlyEasyCard"])	// 신용카드면서 간편결제 전용 쿠폰인 경우
				|| (joinCreditCardInfo["onlyEasyCard"] && joinCreditCardCode != paymentMeansCode)	// 간편결제 전용 쿠폰이면서, 카드코드가 불일치한 경우
			)
		){
			var confirmMessage = this.trimCardName(joinCreditCardInfo["joinCreditCardCompanyName"]) + "카드 할인 쿠폰을 적용하셨습니다.  결제방식/카드종류 변경 시, 쿠폰적용이 초기화 됩니다. 변경 하시겠습니까?";
			if(confirm(confirmMessage) == true){
				this.removeCoupons(true, true);
				this.changePaymentByPayMethod(paymentMeansCode);
			}else{
				setTimeout($Fn(function() {this._selectPaymentMethod(this._htInstance["currentPaymethod"]); }, this).bind(), 0);
				this.changeBeforePayMethod();
				return;
			}
		} else {
			this._selectPaymentMethod(paymentMeansCode);
		}

		var tr_paymeans = $$("._tr_paymeans");
		$A(tr_paymeans).forEach(function(v,i,a){
			$Element(a[i]).hide();
		});

		$A(this._getElement("paymentInfoArea").queryAll("._paymentInfo")).forEach(function(v) {
			$Element(v).hide();
		});
		if (this._getElement("root").query("._paymentDetailInfo") != undefined) {
			$Element(this._getElement("root").query("._paymentDetailInfo")).show();
		}
		if (this._getElement("creditCardInstallmentArea") != undefined) {
			this._getElement("creditCardInstallmentArea").hide();
		}
		if (this._getElement("root").query("._creditCardGuide") != undefined) {
			$Element(this._getElement("root").query("._creditCardGuide")).hide();
		}

		$ElementList(this._getElement("root").queryAll("._payEvent")).hide();

		if (this._htInstance["hyundaiCardPointBox"] != undefined) {
			this._htInstance["hyundaiCardPointBox"].setChecked(false);
		}
        if ($$.getSingle("._eventBannerArea") != undefined) {
            $ElementList($$("._eventBannerArea")).hide();
        }
		if (this._getElement("eventBannerAreaCvsCharge") != undefined) {
			this._getElement("eventBannerAreaCvsCharge").hide();
		}

		this._changePayEventInfo(paymentMeansCode);

		this._getElementList("skipLayers").hide();
		this.showToolTipEvent("EasyBank");

		if(paymentMeansCode != "POINT"){
			if (this._getOption("switchPayment") == true || (this._getOption("orderClass") == "CHECKOUT" && !this._isEasyPay(this.getPayMethod()) && !this.getOption("isEasyBooking") && !this.getOption("isEscrow") && nmp.front.order.order_sheet.macos == undefined && this._getMileageAmount() <= 0)) {
				$Element($$.getSingle("._productAgreement")).hide();
			} else if (this._getOption("switchPayment") != true){
				$Element($$.getSingle("._productAgreement")).show();
			}

			var elPayAgreement = $$.getSingle("._payAgreement");
			if (elPayAgreement != undefined) {
				$Element(elPayAgreement).show();
			}
		}

		if(paymentMeansCode == "DON" && this._getOption("switchPayment") == true) {
			this._getElement("purchaserAgreements").hide();
		} else {
			if (this._getElement("purchaserAgreements") != undefined) {
				this._getElement("purchaserAgreements").show();
			}
			this.checkAllAgreed();
		}

		if(paymentMeansCode == "CREDIT_CARD"){
			this.initializePayMethod(paymentMeansCode);

			this.changePaymentTabSelection("generalPayments");

			$A($$(".creditCard")).forEach(function(v,i,a){
				$Element(a[i]).show();
			});
			if($$.getSingle("._paymentInfoForm")){
				this._htInstance["sbCardCodeList"].setValue("");
				try{
					if (nmp.front.order.order_sheet.getOption("switchPayment") == true) {
						nmp.front.order.order_status.order_detail.integration_cart.changeCompanyTypeCode(undefined, joinCreditCardCode != undefined ? joinCreditCardCode : "", joinCreditCardCode != undefined ? joinCreditCardCode : undefined);
					}else{
						nmp.front.order.order_sheet.integration_cart.changeCompanyTypeCode(undefined, joinCreditCardCode != undefined ? joinCreditCardCode : "", joinCreditCardCode != undefined ? joinCreditCardCode : undefined, bPreviousMethod);
					}
				}catch(e){}
			}

			if(nmp.front.order.order_sheet.macos){
				nmp.front.order.order_sheet.macos.removeAppendedCardCode();
			}

			if (this._getElement("root").query("._creditCardGuide") != undefined) {
				$Element(this._getElement("root").query("._creditCardGuide")).show();
			}
			if (this.getCurrentCreditCardForm() != undefined && this.getCurrentCreditCardForm().query("._eventBannerArea") != undefined) {
				$Element(this.getCurrentCreditCardForm().query("._eventBannerArea")).show();
			}
			this.showSkipLayer("GeneralPay");
		}else if(this._getOption("easyCardCode").has(paymentMeansCode)){
			this.changePaymentTabSelection("naverPaymentsCard");

			$A($$(".easyPayCard")).forEach(function(v,i,a){
				$Element(a[i]).show();
			});
			this._getElement("creditCardInstallmentArea").show();

			$A($$(".screditCard")).forEach($Fn(function(v,i,a){
				$Element(a[i]).show();
				this._getOption("easyCardCode").forEach(function(easyCardCode){
					if($Element(a[i]).query("."+easyCardCode)){
						$Element($Element(a[i]).query("."+easyCardCode)).hide();
						if(paymentMeansCode == easyCardCode){
							$Element($Element(a[i]).query("."+easyCardCode)).show();
						}
					}
				});
			},this).bind());

			if($$.getSingle("._paymentInfoForm")){
				$Element($$.getSingle("._paymentInfoForm")).removeClass("pdr");
			}

			if (this._htInstance["aCardType"] != undefined && this._htInstance["aCardType"].length > 0){
				this._htInstance["aCardType"][0].setChecked(true);
			}
			if (this.getCurrentCreditCardForm() != undefined && this.getCurrentCreditCardForm().query("._eventBannerArea") != undefined) {
				$Element(this.getCurrentCreditCardForm().query("._eventBannerArea")).show();
			}

			if(nmp.front.order.order_sheet.macos){
				nmp.front.order.order_sheet.macos.appendCardCompanyCode(paymentMeansCode);
			}
			this._htInstance["sbCardCodeList"].setValue(paymentMeansCode);
			this._getElement("defaultEasyPayCard").attr("value", paymentMeansCode);

			try{
				if (nmp.front.order.order_sheet.getOption("switchPayment") == true) {
					nmp.front.order.order_status.order_detail.integration_cart.changeCompanyTypeCode(undefined, paymentMeansCode);
				}else{
					nmp.front.order.order_sheet.integration_cart.changeCompanyTypeCode(undefined, paymentMeansCode, joinCreditCardInfo != undefined ? joinCreditCardInfo["joinCreditCardCompanyCode"] : undefined, bPreviousMethod);
				}
			}catch(e){}

			if (this._getOption("switchPayment") != true && this._getOption("orderClass") == "CHECKOUT") {
				$Element($$.getSingle("._productAgreement")).show();
			}

			if (this._getSelectedEasyPayCardType() == "CREDIT") {
				this.showSkipLayer("EasyCard");
			}
		}else if(this._getOption("easyBankCode").has(paymentMeansCode)){
			this.changePaymentTabSelection("naverPaymentsBank");

			//간편결제계좌 문구 노출
			$A($$(".easyPayBank")).forEach(function(v,i,a){
				$Element(a[i]).show();
			});

			if (this._getOption("switchPayment") != true && this._getOption("orderClass") == "CHECKOUT") {
				$Element($$.getSingle("._productAgreement")).show();
			}

			var bankForm = this.getCurrentBankForm();
            var easyPayBankBannerArea = bankForm.query("._eventBannerArea");

			if (bankForm != undefined && easyPayBankBannerArea != undefined){
                $Element(easyPayBankBannerArea).show();
            }
			this.showSkipLayer("EasyBank");
		}else if(paymentMeansCode == "MOBILE"){
			this.changePaymentTabSelection("generalPayments");

			$A($$(".mobile")).forEach(function(v,i,a){
				$Element(a[i]).show();
			});
			this.showSkipLayer("GeneralPay");
		} else if (paymentMeansCode == "VIRTUAL_ACCOUNT" || paymentMeansCode == "SKIP") {
			this.changePaymentTabSelection("generalPayments");
			this._changeSkipPayMethodView();
            if (paymentMeansCode == "VIRTUAL_ACCOUNT") {
                var bIsShowSkipLayer = this.showSkipLayer("GeneralPay", true);
                if (!bIsShowSkipLayer) {
                    bIsShowSkipLayer = this.showSkipLayer("VirtualAccount");
                }

                if (!bIsShowSkipLayer) {
                    $A($$(".virtualAccount")).forEach(function (v, i, a) {
                        $Element(a[i]).show();
                    });
                }
            }
		} else if (paymentMeansCode == "BANK") {
			if ((this._getOption("orderClass") == "INTEGRATION_CART" || this.getOption("isEasyBooking")) && this.isChargePointPaymentAvailable()) {
				alert("실시간 계좌이체는 더 편리하고 안전한 계좌 간편결제로 통합되었습니다.\n계좌 등록 후 충전포인트결제하고 최대 3% 추가 적립 및 소득공제 60% 혜택을 누리세요!");
				if (this.validatePayAmountForChargePointPayment(false)) {
					this.changePaymentMethodToChargedPoint();
				} else {
					this._setPaymentTabChecked("naverPaymentsBank");
					this.changePaymentTab(null, "naverPaymentsBank");
				}
			} else {
                if (this._getOption("orderClass") == "CHECKOUT") {
					this.showSkipLayer("GeneralPay");
                }
                this.initializePayMethod(paymentMeansCode);

				this.changePaymentTabSelection("generalPayments");

				$A($$(".bank")).forEach(function (v, i, a) {
					$Element(a[i]).show();
				});
			}
		} else if (paymentMeansCode == "CHARGED_POINT") {
			this.changePaymentTabSelection("chargedPointPayment");
		}

        // 결제문구 변경
        this._changePaymentMethodStatement(this._getPaymentMethodStatementExposureArea(paymentMeansCode));

		if(paymentMeansCode == "VIRTUAL_ACCOUNT" && (this._getOption("orderClass") == "INTEGRATION_CART" || this.getOption("isForcedBillingPayment"))){
			var selectedRefundMethod = "BANK_ACCOUNT";
			if(this._getOption("remainChargeAmount") < 0){
				selectedRefundMethod = "CHARGE_AMOUNT";
			}
			$A(this._htInstance["aRefundMethodType"]).forEach($Fn(function(v, i, a){
				v.enable();
				if(v.getInput().value == selectedRefundMethod){
					v.setChecked(true);
					this.changeRefundMethod(undefined, selectedRefundMethod);
				}
				if((this._getOption("remainChargeAmount") < 0 && v.getInput().value == "BANK_ACCOUNT")){
					v.disable();
				}
			}, this).bind());

		}else if(paymentMeansCode == "VIRTUAL_ACCOUNT" && this._getOption("orderClass") == "CHECKOUT"){
			$A($$(".refundAccountInfo")).forEach(function(v,i,a){
				$Element(a[i]).show();
			});
		}

		// 임시주문번호 초기화.
		$$.getSingle("input[name=tempOrderId]").value = '';

		var waFreeInterestField = $A(this._getElement("root").queryAll("._freeInterestField"));
		if(nmp.front.order.order_sheet.getOption("orderClass") == "CHECKOUT" && paymentMeansCode == "CREDIT_CARD"){
			// 신용카드인 경우 PG결제라면 무이자 폼 정보를 비활성화시켜 잘못된 정보가 저장되지 않도록 한다.
			waFreeInterestField.forEach(function(v) {
				v.disabled = true;
			});
		} else {
			// 간편결제라면 무이자 정보를 저장한다.
			waFreeInterestField.forEach(function(v) {
				v.disabled = false;
			});
		}

		if ($$("._paymentDetailGuide > h4[@display=block]").length == 0) {
			$Element($$.getSingle("._paymentDetailGuide")).hide();
		} else {
			$Element($$.getSingle("._paymentDetailGuide")).show();
		}

		if (this._getOption("switchPayment") != true) {
			this.viewCheckCashReceiptForm();
		}

		this.recalculateAccumulationNMileage();

		this._htInstance["currentPaymethod"] = this.getPayMethod();
	},
    _getPaymentMethodStatementExposureArea: function (paymentMeansCode) {
        if (this._getOption("easyCardCode").has(paymentMeansCode)) {
            return "EASY_PAY_CREDIT_CARD";
        } else if (this._getOption("easyBankCode").has(paymentMeansCode)) {
            return "EASY_PAY_BANK";
        }

        return paymentMeansCode;
    },
    _changePaymentMethodStatement: function (exposureArea) {
		if (this.getPayMethod() == "CHARGED_POINT") {
			this._getElementList("chargedPointPaymentStatement").show();
		} else {
			this._getElementList("chargedPointPaymentStatement").hide();
		}

        var weCardEventTextList = this._getElementList("cardEventText");
        var weChargeEventTextList = this._getElementList("chargeEventText");

        if (this._hasLegacyPaymentMethodStatement(weCardEventTextList, weChargeEventTextList)) {
            if (exposureArea === "VIRTUAL_ACCOUNT") {
                weCardEventTextList.hide();
                weChargeEventTextList.show();
            } else {
                weCardEventTextList.show();
                weChargeEventTextList.hide();
            }
        } else {
            this._getElementList("paymentMethodStatement").hide();
            this._showPaymentMethodStatement(exposureArea);
        }
    },
    _hasLegacyPaymentMethodStatement: function (weCardEventTextList, weChargeEventTextList) {
        return weCardEventTextList.length() > 0 && weChargeEventTextList.length() > 0;
    },
    _showPaymentMethodStatement: function (exposureArea) {
        var sPaymentMethodStatementSelector = "";
        var sPaymentMethodStatementAreaSelector = ".paymentMethodStatementArea";

        switch (exposureArea) {
            case "EASY_PAY_CREDIT_CARD":
                sPaymentMethodStatementSelector = "._easyPay_creditCard_statement";
                break;
            case "EASY_PAY_BANK":
                sPaymentMethodStatementSelector = "._easyPay_bank_statement";
                break;
            case "BANK":
                sPaymentMethodStatementSelector = "._bank_statement";
                break;
            case "CREDIT_CARD":
                sPaymentMethodStatementSelector = "._creditCard_statement";
                break;
            case "VIRTUAL_ACCOUNT":
                sPaymentMethodStatementSelector = "._virtualAccount_statement";
                break;
            case "MOBILE":
                sPaymentMethodStatementSelector = "._mobile_statement";
                break;
			case "SKIP":
				sPaymentMethodStatementSelector = "._skip_statement";
				break;
			case "CHARGED_POINT":
				sPaymentMethodStatementSelector = "._charged_point_statement";
				break;
        }

        // 포인트 전액결제시에 exposureArea가 없음
        if (sPaymentMethodStatementSelector != "") {
            var welStatementList = this._getElement("root").queryAll(sPaymentMethodStatementSelector);

            if (welStatementList.length > 0) {
                $ElementList(this._getElement("root").queryAll(sPaymentMethodStatementAreaSelector)).show();
                $ElementList(this._getElement("root").queryAll(sPaymentMethodStatementSelector)).show();
            } else {
                $ElementList(this._getElement("root").queryAll(sPaymentMethodStatementAreaSelector)).hide();
            }
        }
    },
	changePaymentByPayMethod : function (sPayMethod, bPreviousMethod) {
		if (this._isEasyPay(sPayMethod)) {
			if (this._isEasyPayCreditCard(sPayMethod)) {
				this._changePayMethodAndActivateFlick("Card");
			} else if (this._isEasyPayBank(sPayMethod)) {
				this._changePayMethodAndActivateFlick("Bank");
			}

			this.changePayment(null, this._getSelectedEasyPayElement(), null, bPreviousMethod);
		} else if (sPayMethod == "CHARGED_POINT") {
			var elPayment = null;
			$A(this._htInstance["aPayMethod"]).forEach(function (el) {
				if (el.getInput().value == sPayMethod) {
					elPayment = el;
					$A.Break();
				}
			});
			this.changePayment(null, elPayment, null, bPreviousMethod);
		} else {
			var elPayment = null;

			if (sPayMethod == "VIRTUAL_ACCOUNT") {
				sPayMethod = "SKIP";
			}

			$A(this._htInstance["aPayMeansClass"]).forEach(function (el) {
				if (el.getInput().value == sPayMethod) {
					elPayment = el;
				}
			});
			this.changePayment(null, elPayment, null, bPreviousMethod);
		}
	},
	getPaymentTabByPayMethod : function (sPayMethod) {
		if (this._isEasyPay(sPayMethod)) {
			if (this._isEasyPayCreditCard(sPayMethod)) {
				return "naverPaymentsCard";
			} else if (this._isEasyPayBank(sPayMethod)) {
				return "naverPaymentsBank";
			}
		} else if (sPayMethod == "CHARGED_POINT") {
			return "chargedPointPayment";
		} else {
			return "generalPayments";
		}
	},
	_setPaymentTabChecked : function (sTab) {
		$A(this._htInstance["aPayMethod"]).forEach(function (v) {
			var welInput = $Element(v.getInput());
			if (welInput.attr("value") == sTab) {
				v.setChecked(true);
				$A.Break();
			}
		});
	},
	/**
	 * 현금 영수증 발급 유형(개인/법인)
	 *
	 * @param we
	 */
	changeReceiptType : function(we){

		var deductionMethod="";
		if(we != undefined){
			deductionMethod = $Element(we.element.parentElement).query("input").value;
		}else{
			$A($$("._receiptIssueUsageCode")).forEach(function(v,i,a){
				if(a[i].checked){
					deductionMethod = a[i].value;
				}
			});
		}
		if(deductionMethod == "PERSONAL_INCOME_TAX"){
			$$.getSingle("div .privateDeductMethod").style.display = "block";
			$$.getSingle("div .businessDeductMethod").style.display = "none";
			this._htInstance["sbPrivateCashReceiptIssueType"].enable();
			$$.getSingle(".businessCashReceiptIssueClassCode").disabled=true;
			this.changeCashReceiptIssueClass();
		}else if(deductionMethod == "BIZ_EXPENSE_PROOF"){
			$$.getSingle("div .privateDeductMethod").style.display = "none";
			$$.getSingle("div .businessDeductMethod").style.display = "block";
			this._htInstance["sbPrivateCashReceiptIssueType"].disable();
			$$.getSingle(".businessCashReceiptIssueClassCode").disabled=false;
		}
	},
	/**
	 * 현금 영수증 신청 정보
	 *
	 * @param we
	 */
	changeCashReceiptIssueClass : function(we){
		var selectedType = undefined;
		if(we != undefined){
			selectedType = we.element.value;
		}else{
			selectedType = $$.getSingle(".privateCashReceiptIssueClassCode").value;
		}
		if(selectedType.indexOf("SOCIAL_NUMBER") > -1){
			$$.getSingle(".socialNumber").style.display = "inline";
			$$.getSingle(".cellPhone").style.display = "none";
			$$.getSingle(".cashCard").style.display = "none";
		}else if(selectedType.indexOf("PHONE_NUMBER") > -1){
			$$.getSingle(".socialNumber").style.display = "none";
			$$.getSingle(".cellPhone").style.display = "inline";
			$$.getSingle(".cashCard").style.display = "none";
		}else if(selectedType.indexOf("CARD_NUMBER") > -1){
			$$.getSingle(".socialNumber").style.display = "none";
			$$.getSingle(".cellPhone").style.display = "none";
			$$.getSingle(".cashCard").style.display = "inline";
		}
	},
	/**
	 * 선택된 radio 버튼의 상위 엘리먼트에 class를 설정한다. 그외의 모든 엘리먼트의 class정보는 제거한다.
	 *
	 * @param radiosTags
	 *            제거하기위한 태그 정보
	 * @param addOnObject
	 *            class 정보 추가하기위한 타겟 오브젝트
	 */
	addClassOnRadio : function(radiosTags, addOnObject){
		$A($$(radiosTags)).forEach(function(v,i,a){
			$Element(a[i]).removeClass("on");
		});
		$Element(addOnObject).addClass("on");
	},
	showPayLoadingLayer : function(){
		var screenWidth = 0;
		var screenHeight = 0;
		var scrollTop=0;
		var elTempLayer = $$.getSingle("._tempLayer");
		if (this._getOption("switchPayment") == true) {
			// 결제수단 변경인 경우 레이아웃이 다르므로 width, height 계산을 다르게 함
			if(window.innerHeight){				// IE외 브라우저
				screenWidth = (elTempLayer.parentElement.parentElement.clientWidth) + "px";
				screenHeight = window.innerHeight + "px";
			}else{// IE
				screenWidth = (elTempLayer.parentElement.parentElement.clientWidth) + "px";
				screenHeight = document.body.clientHeight + "px";
			}
		} else {
			if(window.innerHeight){				// IE외 브라우저
				screenWidth = window.innerWidth + "px";
				screenHeight = window.innerHeight + "px";
			}else{// IE
				screenWidth = document.body.clientWidth + "px";
				screenHeight = document.body.clientHeight + "px";
			}
		}

		if(typeof pageYOffset!= 'undefined'){
			// most browsers
			scrollTop= pageYOffset;
		}
		else{
			var B= document.body; // IE 'quirks'
			var D= document.documentElement; // IE with doctype
			D= (D.clientHeight)? D: B;
			scrollTop = D.scrollTop;
		}
		scrollTop += "px";

		$Element(elTempLayer).css(
			{
				width : screenWidth,
				height : screenHeight,
				position : "absolute",
				left : "0px",
				top : scrollTop,
				display : "block"
			});
		nmp.showLayer($$.getSingle("._payLoadingLayer"), elTempLayer, {
			sPosition : "inside-center",
			bAuto : true,
			bShowDimmedLayer : true
		});
	},
	/**
	 * 적립될 마일리지 정보를 다시 조회해온뒤 주문서에 반영한다.
	 */
	recalculateAccumulationNMileage : function() {
		if($$.getSingle("._totalAccumulateMileageWithPayEventWithMembership") == undefined){
			return;
		}
		var sUrl ="/orderSheetAjax/recalculateAccumulationNMileage/"+this._htInstance["orderSnapshot"]["orderSnapshotKey"] ;

		nmp.requestAjax(sUrl, {"orderCreateJson" : this.createOrderCreateFormJson()}, {
			method : "post",
			onload : $Fn(function(htResult) {
				if(htResult.bSuccess == true){
					this._generateMileageLayerDataFromMap(htResult.htReturnValue.accumulateMileages);
					// this._generateApiMileageLayerDataFromMap(htResult.htReturnValue.accumulateApiBenefitMileages);
					this._generateReviewMileageLayerDataFromMap(htResult.htReturnValue.accumulateReviewMileages);

					if (this._htInstance["mileageMap"]["TOTAL"] == 0
						// && this._htInstance["apiMileageMap"]["TOTAL"] == 0
						&& this._htInstance["reviewMileageMap"]["TOTAL"] == 0) {
						$ElementList(this._getElementList("benefitAreaDisplayStatus", true)).hide();
					} else {
						$ElementList(this._getElementList("benefitAreaDisplayStatus", true)).show();
					}

					var nPayEventBankRegisterAmount = (this._isEasyPayBank(this.getPayMethod()) ? this._getOption("payEventBankRegisterAmount") : 0);

					if($$.getSingle("._totalAccumulateMileageArea") != undefined) {
						if ((this._htInstance["mileageMap"]["TOTAL"]
							// + this._htInstance["apiMileageMap"]["TOTAL"]
							+ this._htInstance["reviewMileageMap"]["TOTAL"]) == 0) {
							$Element($$.getSingle("._totalAccumulateMileageArea")).hide();
						} else {
							$Element($$.getSingle("._totalAccumulateMileageArea")).show("table");
							
							if ( (this._htInstance["mileageMap"]["TOTAL"])  > 0) {
								this._getElement("purchaseBenefitArea").show("table-cell");
								var htPurchaseBenefits = $H(this._htInstance["mileageMap"]);
								var aSellerCustomerManagementBenefits = $A();
								$H(htResult.htReturnValue.accumulateSellerCustomerManagementMileages).forEach(function (v, k) {
									aSellerCustomerManagementBenefits.push({"key": k, "amount": v});
								});
								htPurchaseBenefits.add("items", aSellerCustomerManagementBenefits.$value());
								var aInflowBenefits = $A();
								$H(htResult.htReturnValue.accumulateInflowBenefitMileages).forEach(function (v, k) {
									aInflowBenefits.push({"key": k, "amount": v});
								});
								htPurchaseBenefits.add("inflowBenefits", aInflowBenefits.$value());
								var elPurchaseBenefitLayerHtml = $Template(this._getElement("purchaseBenefitTemplate").html()).process(htPurchaseBenefits.$value());
								this._getElement("purchaseBenefitArea").html(elPurchaseBenefitLayerHtml);
							} else {
								this._getElement("purchaseBenefitArea").hide();
							}

							if ((this._htInstance["reviewMileageMap"]["TOTAL"] + nPayEventBankRegisterAmount) > 0) {
								this._getElement("reviewBenefitArea").show("table-cell");
								
								var htReviewBenefits = $H(this._htInstance["reviewMileageMap"]);
								var elReviewBenefitLayerHtml = $Template(this._getElement("reviewBenefitTemplate").html()).process(htReviewBenefits.$value());

								if (nPayEventBankRegisterAmount > 0) {
									var htRegisterAccountBenefits = $H();
									htRegisterAccountBenefits.add("BANK_EVENT", nPayEventBankRegisterAmount);
									var elRegisterAccountBenefitLayerHtml = $Template(this._getElement("registerAccountBenefitTemplate").html()).process(htRegisterAccountBenefits.$value());
									elReviewBenefitLayerHtml += elRegisterAccountBenefitLayerHtml;
								}

								this._getElement("reviewBenefitArea").html(elReviewBenefitLayerHtml);
							} else {
								this._getElement("reviewBenefitArea").hide();
							}

							if (this._htInstance["reviewMileageMap"]["TOTAL"] > 0) {
								$Element($$.getSingle(".benefit_guide")).show();
							} else {
								$Element($$.getSingle(".benefit_guide")).hide();
							}

							(this._htInstance["reviewMileageMap"]["TOTAL"] > 0) ? $Element($$.getSingle("._reviewMileageAccumulationNotice")).show() : $Element($$.getSingle("._reviewMileageAccumulationNotice")).hide();
						}
					}

					$$.getSingle("._totalAccumulateMileageWithPayEventWithMembership").innerHTML = nmp.front.order.ui.setThousandComma(
						this._htInstance["mileageMap"]["TOTAL"]
						// + this._htInstance["apiMileageMap"]["TOTAL"]
						+ this._htInstance["reviewMileageMap"]["TOTAL"]
						+ nPayEventBankRegisterAmount
					);
				}else if(htResult && !htResult.bSuccess && htResult.sErrorCode == "ACCESS_DENIED") {
					eval(htResult.htReturnValue.script);
				}
			},this).bind()});
	},
	/**
	 * 안내 팝업 띄우기
	 *
	 * @param we
	 * @param url
	 */
	openGuidePopup : function (we, url_key){

		if(url_key != undefined){
			var urlInfo = this._htInstance[url_key]
			if(urlInfo != undefined){
				nmp.openPopup(urlInfo.url, urlInfo.option);
			}else{
				if(url_key != "" && url_key.indexOf("http://") > -1){
					nmp.openPopup(url_key);
				}else{
					alert('URL 정보가 없습니다.');
				}
			}
		}
	},
	openDonAgree : function(){
		var htUrls = this._getOption("urls");
		var sPageUrl = htUrls["naver.don.agree.popup"];
		nmp.openPopup(sPageUrl+"?callbackFunction=nmp.front.order.order_sheet.donAgreeResult", ["width=650", "height=430"], "naverDonAgreePopup");
	},
	openDonAutoCharge : function(){
		var htUrls = this._getOption("urls");
		var sPageUrl = htUrls["naver.don.autocharge.popup"];
		nmp.openPopup(sPageUrl, ["width=565", "height=741"], "naverDonAutoChargePopup");
	},
	donAgreeResult : function(htResult){
		var donAgree =  $$.getSingle("input[name=donAgree]");
		if(donAgree != undefined){
			donAgree.value = true;
		}

		var donAgreeForm = $Element($$.getSingle("._donAgree"));
		donAgreeForm.hide();
		donAgreeForm.removeClass("don");
		donAgreeForm.removeClass("_accountInfo");
	},
	openDonPayPopup : function(reserveSeq){
		var htUrls = this._getOption("urls");
		var sPageUrl = htUrls["naver.don.pay.popup"];
		try{
			this._getOption("payPopup").moveTo((screen.width-575)/2, (screen.height-625)/2);
			this._getOption("payPopup").resizeTo(575,625);
			this._getOption("payPopup").location.href=sPageUrl+reserveSeq;
		}catch(e){
			nmp.openPopup(sPageUrl+reserveSeq, ["width=575", "height=625"], "naverDonPayPopup");
		}
	},
	createOrderCreateFormJson : function(){
		var orderCreateForm = {};
		var formList = ["payForm","certificationForm", "deliveryForm"];
		for(var i = 0; i < formList.length; i++){
			orderCreateForm[formList[i]] = this._makePartialCreateForm(formList[i]);
		}
		if(this._getElement("orderAdditionalInfo", true) != undefined){
			orderCreateForm["orderAdditionalInfoForm"] = this._makePartialCreateForm("orderAdditionalInfoForm");
			if ($H(orderCreateForm["orderAdditionalInfoForm"]).length() > 0) {
				if(orderCreateForm["orderAdditionalInfoForm"]["orderOptionInfoParticularInputYn"] == "false"){
					orderCreateForm["orderAdditionalInfoForm"]["orderAdditionalInfos"] = this._makeOrderAdditionalInfo("._orderAdditionalInfos");
				}else{
					orderCreateForm["orderAdditionalInfoForm"]["orderAdditionalInfoPerItem"] = {};
					var orderProducts = this.getOrderSnapshot().orderProducts;
					for(var i = 0 ; i < orderProducts.length ; i++){
						var orderItems = orderProducts[i].items;
						for(var j = 0 ; j < orderItems.length ; j++){
							var itemId = orderItems[j].id;
							orderCreateForm["orderAdditionalInfoForm"]["orderAdditionalInfoPerItem"][itemId] = this._makeOrderAdditionalInfo("._orderAdditionalInfoPerItem"+itemId);
						}
					}
				}
			}
		}

		orderCreateForm["certificationForm"]["isExistEcouponProduct"] = this._getOption("isExistEcouponProduct");

		// 주결제수단 금액 정보셋팅하기
		if( orderCreateForm["payForm"]["payAmounts"] == undefined){
			orderCreateForm["payForm"]["payAmounts"] = {};
		}

		var payMethod = this.getPayMethod();
		if (this._getOption("switchPayment") == true) {
			orderCreateForm["payForm"]["payAmounts"][this._getOption("easyCardCode").has(payMethod) ? "CREDIT_CARD" : (this._getOption("easyBankCode").has(payMethod) ? "BANK" : payMethod)] = this._getOption("generalPayAmount");
			orderCreateForm["payForm"]["isEasyPay"] = this._isEasyPay(payMethod);
		} else {
			orderCreateForm["payForm"]["payAmounts"][this._getOption("easyCardCode").has(payMethod) ? "CREDIT_CARD" : (this._getOption("easyBankCode").has(payMethod) ? "BANK" : payMethod)] = this.getOrderSnapshot().orderPayAmount - this._getMileageAmount();
			orderCreateForm["payForm"]["isEasyPay"] = this._isEasyPay(payMethod);

			if (this._isEasyPay(payMethod)) {
				orderCreateForm["payForm"]["easyPayMethodNo"] = this._getSelectedEasyPayCKey(payMethod);
				if (this._isEasyPayBank(payMethod)) {
					orderCreateForm["payForm"]["realTimeAccountTransferSettleInfo"] = orderCreateForm["payForm"]["realTimeAccountTransferSettleInfo"] || {};
					orderCreateForm["payForm"]["realTimeAccountTransferSettleInfo"]["payBankbookCode"] = this._getSelectedEasyPayBankbookCode();
				}
			} else if (this.getPayMethod() == "CHARGED_POINT" && !this.isAllEasyBankUnderMaintenance(this.getPayMethod())) {
				orderCreateForm["payForm"]["CHARGED_POINT"] = this._getChargedPointAmount();
				orderCreateForm["payForm"]["pointSettleInfo"] = orderCreateForm["payForm"]["pointSettleInfo"] || {};

				var htChargePointInfo = nmp.front.order.order_sheet.getChargePointInfo();
				if ((htChargePointInfo == undefined || htChargePointInfo["payBankbookCode"] == undefined) && this._getOption("isNaverBankbookRecentCharged")) {
					orderCreateForm["payForm"]["pointSettleInfo"]["chargedPointBankbookCode"] = "MIRAEASSET_CMA";
				} else if (htChargePointInfo != undefined) {
					orderCreateForm["payForm"]["pointSettleInfo"]["chargedPointBankbookCode"] = htChargePointInfo["payBankbookCode"];
				}
			} else if (this.getPayMethod() == "SKIP") {
				orderCreateForm["payForm"]["nextPayMeansClass"] = this._getCurrentSkipPayMethod();
			}

			orderCreateForm["productDiscounts"] = this.extractDiscountedOrderItem(nmp.front.order.order_sheet.getOrderSnapshot());
			orderCreateForm["deliveryFeeDiscounts"] = this.extractDiscountedDeliveryGroup(nmp.front.order.order_sheet.getOrderSnapshot());
			orderCreateForm["orderDiscount"] = nmp.front.order.order_sheet.getOrderSnapshot()["discount"];
			orderCreateForm["storeDiscounts"] = nmp.front.order.order_sheet.getOrderSnapshot()["storeDiscounts"];
		}

		if (this._htInstance["isPinPay"] && this._getOption("isPinPayMember")) {
			orderCreateForm["payForm"]["isPinPayMember"] = this._getOption("isPinPayMember");
			orderCreateForm["certificationForm"]["isPinPayAgree"] = this._getOption("isPinPayAgree");
			orderCreateForm["payForm"]["mobileSettleInfo"]["pinNo"] = $$.getSingle("input[name=mobilePassword]").value;
		}

		// 전통주 성인 인증 토큰 세팅
		if (this._getOption("hasTraditionalAlcoholProduct") && this._htInstance["adultAuthenticationToken"]){
			orderCreateForm["certificationForm"]["adultAuthenticationToken"] = this._htInstance["adultAuthenticationToken"];
			orderCreateForm["certificationForm"]["adultAuthenticationMethod"] = this._htInstance["adultAuthenticationMethod"];
		}

		return $Json(orderCreateForm).toString();
	},
	_convertHashMapToObject : function(whtHashMap) {
		var htResult = $H();
		whtHashMap.forEach(function(value, key) {
			var waValue = $A(value);
			var waResult = $A();
			waValue.forEach(function(v, i, o) {
				waResult.push($H(v).$value());
			});
			htResult.add(key, waResult.$value());
		});
		return htResult.$value();
	},
	/**
	 * 주문 추가 정보 셋을 만든다.
	 *
	 * @param upperClassName
	 * @returns
	 */
	_makeOrderAdditionalInfo : function(upperClassName){
		var orderAdditionalInfos = $A();
		$A(this._getElement("orderAdditionalInfo").queryAll(upperClassName)).forEach(
			function(el)
			{
				var orderAdditionalList=$A();
				$A($Element(el).queryAll("input,select,textarea")).forEach(function(element){orderAdditionalList.push(element) });

				var _htOrderAdditionalInfo = {};
				orderAdditionalList.forEach(function(innerEl){
					var val = innerEl.value;
					if((innerEl.className.indexOf("_text_50") > -1 && val == "50자 내로 입력해주세요.")
						|| (innerEl.className.indexOf("_text_20") > -1 && val == "20자 내로 입력해주세요.")){
						val = "";
					}
					var name = innerEl.name;
					if(/_*[0-9]$/.test(name)){
						name = name.split("_")[0];
					}
					_htOrderAdditionalInfo[name] = val;
				});

				orderAdditionalInfos.push(_htOrderAdditionalInfo);
			}
		);
		return orderAdditionalInfos.$value();
	},
	/**
	 * formClassName에 있는 모든 엘리먼트의 값을 반환하도록 한다. - 체크박스인 경우에는 체크 여부 - radio버튼인
	 * 경우에는선택된 것의 value값을쓴다. - 그외는 모두 value값
	 *
	 * @param formClassName
	 * @returns {___anonymous65118_65119}
	 */
	_makePartialCreateForm : function(formClassName){
		var partialForm = {};
		var groupForm = {};
		$A(this._getElementList(formClassName, true)).forEach(
			function(el,i,a){
				if(el.className.indexOf("_group") > -1){
					var classNameArr = el.className.split(" ");
					for(var idx = 0 ; idx < classNameArr.length ; idx++ ){
						if(classNameArr[idx].indexOf("_group") > -1){
							groupForm[classNameArr[idx]] = el;
							break;
						}
					}
					$A.Continue();
				}
				if(el.disabled){
					$A.Continue();
				}

				var elVal = a[i].value;
				if(elVal != "" && (a[i].className.indexOf("_onlyPriceTarget") > -1
					|| a[i].className.indexOf("_onlyNumberTarget") > -1)){
					elVal = elVal.replace(/[,]/g,"");
				}
				if(a[i].type=="checkbox"){elVal = a[i].checked;}
				if(a[i].type=="radio"){
					if(a[i].checked == false){
						$A.Continue();
					}else{
						elVal = a[i].value;
					}
				}
				var elNameArr = a[i].name.split(".");
				if(elNameArr.length==1){
					partialForm[a[i].name]=elVal;
				} else {
					var elHash = partialForm[elNameArr[0]];
					if(elHash == undefined){
						elHash={};
					}
					for(var idx = 1; idx > 0 ; idx--){
						elHash[elNameArr[idx].split("___")[0]] = elVal;
					}
					partialForm[elNameArr[0]]=elHash;
				}
			}
		);
		partialForm = this._makeGroupFormMerge(groupForm, partialForm, (formClassName == "deliveryForm" ? "-":""));
		return partialForm;
	},
	/**
	 * merge되어야 하는 필드인 경우 처리 class에 _group_* 로 존재하는 필드 처리
	 *
	 * @param groupForm
	 * @param partialForm
	 * @returns
	 */
	_makeGroupFormMerge : function(groupForm, partialForm, delimiter){
		var _htGroup = $H(groupForm).ksort();
		var mergeKey = "";
		var mergeValue = "";
		$A(_htGroup.keys()).forEach($Fn(function (val, i, a){
			var el = _htGroup.$(val);
			if( mergeKey == "" || mergeKey != el.name.split("___")[0] || i ==a.length -1){
				if(i ==a.length -1){
					if(mergeValue != "" && el.className.indexOf("_notFormat") == -1 ){
						mergeValue += delimiter ;
					}
					mergeValue += $S(el.value).trim().$value();
				}
				if(mergeKey != ""){
					var elNameArr = mergeKey.split(".");
					if(elNameArr.length==1){
						partialForm[mergeKey]=mergeValue;
					} else {
						var elHash = partialForm[elNameArr[0]];
						if(elHash == undefined){
							elHash={};
						}
						for(var idx = 1; idx > 0 ; idx--){
							var name = elNameArr[idx].split("___")[0];
							if(/_*[0-9]$/.test(name)){
								name = name.split("_")[0];
							}
							elHash[name] = mergeValue;
						}
						partialForm[elNameArr[0]]=elHash;
					}
				}
				mergeKey = el.name.split("___")[0];
				mergeValue = "";
			}
			if(mergeValue != "" && el.className.indexOf("_notFormat") ==-1){
				mergeValue += delimiter ;
			}
			mergeValue +=  $S(el.value).trim().$value();
		},this).bind());
		return partialForm;
	},
	extractDiscountedOrderItem : function(orderSnapshot) {
		var whtExtractedOrderItems = $H();

		$A(orderSnapshot.orderProducts).forEach($Fn(function(orderProduct) {
			$A(orderProduct.items).forEach($Fn(function(orderItem) {
				if ($A(orderItem.current.discounts).some(this._isAvailableDiscount)) {
					whtExtractedOrderItems.add(orderItem.id, $A(orderItem.current.discounts).filter(this._isAvailableDiscount).$value());
				}
			}, this).bind());
		}, this).bind());

		return whtExtractedOrderItems.$value();
	},
	extractDiscountedDeliveryGroup : function(orderSnapshot) {
		var whtExtractedDeliveryGroups = $H();

		$A(orderSnapshot.orderProducts).forEach($Fn(function(orderProduct) {
			if (orderProduct.deliveryGroup.discount != undefined && this._isAvailableDiscount(orderProduct.deliveryGroup.discount)) {
				whtExtractedDeliveryGroups.add(orderProduct.deliveryGroup.id, orderProduct.deliveryGroup.discount);
			}
		}, this).bind());

		return whtExtractedDeliveryGroups.$value();
	},
	_isAvailableDiscount : function(discount) {
		return discount.available;
	},
	getPayMethod : function () {
		var payMethod = "";

		// 일반결제수단 선택 확인
		$A(this._getElementList("payMeansClass").$value()).forEach(function (v, i, a) {
			if (a[i].attr("checked")) {
				payMethod = a[i].attr("value");
				$A.Break();
			}
		});

		if (payMethod == "SKIP" && this._getCurrentSkipPayMethod() == "VIRTUAL_ACCOUNT") {
			return this._getCurrentSkipPayMethod();
		}

		if (this._isOpenedChargedPaymentTab()) {
			return "CHARGED_POINT";
		}

		if (((!this._isOpenedCardTab()) && (!this._isOpenedBankTab())) || payMethod == "POINT") {
			return payMethod;
		}

		if (this._isOpenedCardTab() && this._getSelectedEasyPayCardElement()) {
			return this._getSelectedEasyPayCardCode();
		}

		if (this._isOpenedBankTab() && this._getSelectedEasyPayBankElement()) {
			return this._getSelectedEasyPayBankCode();
		}

		return payMethod;
	},
	getCreditCardUsable : function() {
		var creditCardUseYn = false;
		$A(this._getElementList("payMeansClass").$value()).forEach($Fn(function(v,i,a){
			if(a[i].attr("value") == "CREDIT_CARD" || this._getOption("easyCardCode").has(a[i].attr("id"))){
				creditCardUseYn = true;
				$A.Break();
			}
		},this).bind());
		return creditCardUseYn;
	},
	getFormalCreditCardUsable : function() {
		var creditCardUseYn = false;
		$A(this._getElementList("payMeansClass").$value()).forEach(function(v,i,a){
			if(a[i].attr("value") == "CREDIT_CARD"){
				creditCardUseYn = true;
				$A.Break();
			}
		});
		return creditCardUseYn;
	},
	account : function() {
		var payMeansClass = this.getPayMethod();
		if (payMeansClass == "CHARGED_POINT") {
			if (this.isAllEasyBankUnderMaintenance(payMeansClass)) {
				alert("은행 시스템 작업으로 인하여 계좌 간편결제를 이용하실 수 없습니다.");
				this._htInstance["isProgress"] = false;
				return;
			}

			var htChargePointInfo = this.getChargePointInfo();
			if (htChargePointInfo != undefined && htChargePointInfo["amount"] > 0 && htChargePointInfo["accountKey"] == undefined) {
				alert("포인트 충전을 위해 연결된 계좌를 확인해주세요.");
				this._htInstance["isProgress"] = false;
				return;
			}

			if (this.isLimitChargePointAmount()) {
				alert("계좌 미등록 사용자의 경우 충전포인트 50만원 초과 사용이 불가합니다.");
				this._htInstance["isProgress"] = false;
				return;
			}
		}

		// 네이버 예약이면 바로 네이버빌링 결제 요청(결제수단 휴대폰 사용 하지 않으므로 아래 payPopup 해당사항 없음)
		if (this.getOption("isEasyBooking") == true) {
			nmp.front.order.order_sheet.integration_cart.account();
			return;
		}

		// 도로명 주소인 경우 상세주소가 미입력되었다면 확인 후 진행함
		if (this._getOption("switchPayment") != true) {
			var elRoadNameAddressYn = this._getElement("deliveryInfos").query("input[name='deliveryAddress.roadNameAddressYn']");
			var elDetailAddress = this._getElement("deliveryInfos").query("input[name='deliveryAddress.detailAddress']");
			if (elRoadNameAddressYn != undefined && elDetailAddress != undefined && elRoadNameAddressYn.value == "true" && $S(elDetailAddress.value).trim().$value() == "") {
				if (!confirm("상세주소가 입력되지 않았습니다. 그대로 주문하시겠습니까?")) {
					return;
				}
			}
		}

		if(payMeansClass == "DON"
			|| (this._getOption("switchPayment") == true && this._getOption("orderClass") == "CHECKOUT" && payMeansClass == "MOBILE")
			|| (this._getOption("switchPayment") != true && this._getOption("orderClass") == "CHECKOUT" && !this._isEasyPay(payMeansClass) && this._getOption("pgId") != "inicis" && payMeansClass != "POINT" && payMeansClass != "CHARGED_POINT" && payMeansClass != "SKIP" && nmp.front.order.order_sheet.macos == undefined && !this.getOption("isForcedBillingPayment"))
		){
			payPopup = window.open(this._getOption("urls")["order.pay.progress"],"payPopup", ["width=460", "height=540","left="+((screen.width-460)/2), "top="+((screen.height-540)/2), "scrollbars=yes", "resizable=yes"].join(","));
			this._setOption("payPopup",payPopup);
		}
		if (this._getOption("switchPayment") == true) {
			nmp.front.order.order_status.order_detail.integration_cart.account();
		} else {
			if (this._getOption("orderClass") == "CHECKOUT"
				&& !this._isEasyPay(payMeansClass)
				&& (payMeansClass != "SKIP")
				&& nmp.front.order.order_sheet.macos == undefined
				&& !this.getOption("isForcedBillingPayment")) {
				nmp.front.order.order_sheet.checkout.account();
			} else {
				nmp.front.order.order_sheet.integration_cart.account();
			}
		}
	},
	resetTempLayer : function (){
		nmp.hideLayer();
		$$.getSingle("._tempLayer").style.display="none";

		var tempOrderNo = $$.getSingle("input[name=tempOrderId]").value;
		if (tempOrderNo != undefined && tempOrderNo != '') {
			$$.getSingle("input[name=tempOrderId]").value = '';
		}
	},
	closePayPopup : function(){
		if(this._getOption("payPopup")){
			this._getOption("payPopup").close();
			this._setOption("payPopup", false);
		}
	},
	/**
	 * 가주문생성 실패시 메시지 노출 처리
	 *
	 * @param htResult
	 */
	viewFailResult : function(htResult){
		this.closePayPopup();

		if(htResult == undefined || htResult.htReturnValue == undefined){
			alert("알수없는 오류가 발생하였습니다.");
		}
		if(htResult.sErrorCode == "ACCESS_DENIED") {
			eval(htResult.htReturnValue.script);
		}else if(htResult.sErrorMessage != undefined){
			alert(htResult.sErrorMessage);
		}else if(htResult.htReturnValue.firstResultMessage.messageCode == "create.valid.blackconsumer"){
			var elLayerHtml = $Template(this._getElement("blackconsumerLayerTemplate").html()).process(htResult.htReturnValue.resultMap.invalidOrderProductList[0].orderError.messageArgs);
			this._getElement("root").appendHTML(elLayerHtml);

			var welBlackconsumerNotice = $Element($$.getSingle("._blackconsumerNotice"));
			welBlackconsumerNotice.css("top", (this._getScrollTop() + (window.innerHeight - welBlackconsumerNotice.height()) / 4) + "px");
		}else if(htResult.htReturnValue.firstResultMessage.messageCode == "create.valid.product"){
			nmp.openPopup("/orderSheetPopup/invalidOrder",["width=520", "height=500"],"invalidOrder",{invalidOrderProductList : $Json(htResult.htReturnValue.resultMap.invalidOrderProductList).toString()},true);
		}else if(htResult.htReturnValue.firstResultMessage.messageCode == "under14.checkoutAgreement" || htResult.htReturnValue.firstResultMessage.messageCode == "groupId.checkoutAgreement"){
			alert(htResult.htReturnValue.firstResultMessage.message);
			var htUrls = this._getOption("urls");
			location.href = "http://"+htUrls["user.front.host"];
		}else{
			alert(htResult.htReturnValue.firstResultMessage.message);
			if(htResult.htReturnValue.firstResultMessage.messageCode == "field.required.donAgree"){
				nmp.front.order.order_sheet.openDonAgree();
			}else if (htResult.htReturnValue.firstResultMessage.messageCode == "field.unusable.reliefPhoneNumberUseYn"){
				$$.getSingle("._reliefPhoneNumberUseYn").checked=false;
			}
		}

		if (htResult.htReturnValue.firstResultMessage.messageCode != undefined && this._htValidationFocusing[htResult.htReturnValue.firstResultMessage.messageCode] != undefined) {
			var elNeedFocus = $$.getSingle(this._htValidationFocusing[htResult.htReturnValue.firstResultMessage.messageCode]);
			if (elNeedFocus != undefined) {
				elNeedFocus.focus();
			}
		}

		if (htResult.htReturnValue.firstResultMessage.messageCode != undefined && htResult.htReturnValue.firstResultMessage.messageCode.indexOf("createForm.deliveryAddress.overSeasDelivery") >= 0) {
			this.editDeliveryInfo();

			var elDeliveryPlace = $$.getSingle("#deliveryTypeNew");
			if (elDeliveryPlace != undefined) {
				elDeliveryPlace.focus();
			}
		}
	},
	/**
	 * 이전 페이지로 이동
	 *
	 * @param we
	 */
	previousPage : function(we) {
		var backUrl = this._getOption("backUrl");
		if(backUrl != ""){
			nmp.moveUrl(backUrl);
		}else{
			alert("이전페이지로 갈 수 없습니다.");
		}
	},
	cancelSwitchingPayment : function(we, orderId) {
		window.location.href = "/orderStatus/" + orderId;
	},
	/**
	 * 회원 정보 변경 팝업을 연다.
	 */
	changeMemberInfo : function(){
		nmp.openPopup(this._getOption("urls")["user.front.myPage.update"]);
	},
	/**
	 * 네이버 캐시 회원 가입 페이지로 이동
	 *
	 * @param we
	 */
	moveNaverCash : function (we){
		var htUrls = this._getOption("urls");
		var sPageUrl = htUrls["mileage.popup.agree"];
		nmp.openPopup(sPageUrl , ["toolbar=no", "channelmode=no", "location=no", "directories=no", "menubar=no"]);
	},

	successNaverCash : function(mileageInfo){
		// 마일리지 보유 금액
		this._htInstance["mileageValue"] = mileageInfo.naverCashAmount;

		var mileagePriceTag = $$.getSingle("._mileagePrice");
		if(mileagePriceTag != undefined){
			mileagePriceTag.innerHTML = nmp.front.order.ui.setThousandComma(this._htInstance["mileageValue"]) ;
		}

		$Element($$.getSingle("._mileageUseContents")).hide();
		$$.getSingle("._naverMileageText").innerHTML = "사용가능 마일리지";

		$ElementList($$("._beforeMileageAgree")).hide();
		$ElementList($$("._afterMileageAgree")).show();

		if(this._htInstance["mileageValue"]  > 500000){
			$Element($$.getSingle("._afterMileageAgreeAccum")).hide();
			$Element($$.getSingle("._afterMileageAgreeNoAccum")).show();
		}

		this.recalculateAccumulationNMileage();
	},
	getGeneralPayAmount : function(){
		if (this._getOption("generalPayAmount") != null) {
			return this._getOption("generalPayAmount");
		}
		return this.getOrderSnapshot()["orderPayAmount"] - this._getMileageAmount();
	},
	getMileageUseAmount : function() {
		return this._getMileageAmount();
	},
	_getMileageAmount : function(){
		var val = $$.getSingle("input[name='payAmounts.NAVER_CASH']") != undefined ? $$.getSingle("input[name='payAmounts.NAVER_CASH']").value : 0;
		if(val != undefined && val != ""){
			val = parseInt(val.replace(/[,]/g,""));
		}
		if(val == "" || isNaN(val)){
			val = 0;
		}
		return val;
	},
	_getChargedPointAmount : function () {
		return (this.getPayMethod() == "CHARGED_POINT" ? Math.min(this.getGeneralPayAmount(), this._getOption("remainChargedPoint")) : 0);
	},
	_getChargeAmount : function () {
		if (!this._getElement("chargePointArea").visible()) {
			return 0;
		}
		return parseInt(this._htInstance["chargeAmountSelectBox"].getValue().replace(/[,]/g, ""));
	},
	/**
	 * 네이버 마일리지 개인 인증 팝업을 연다.
	 */
	openPrivateCertification : function (){
		var htUrls = this._getOption("urls");
		var sPageUrl = htUrls["assistance.pay.certification.url"];
		sPageUrl+="?callBackFunction=nmp.front.order.order_sheet.setPrivateCertification&notClose=true";
//		if(this.getPayMethod() == "CREDIT_CARD"){
//			sPageUrl+="&serviceType=card";
//		}
		if(this._getOption("payPopup") && this._getOption("payPopup").closed == false){
			this._getOption("payPopup").window.resizeTo(560,450);
			this._getOption("payPopup").location.href=sPageUrl;
		}else{
			payPopup = window.open(sPageUrl,"payPopup", ["width=510", "height=630"].join(","));
			this._setOption("payPopup",payPopup);
		}
	},
	openMallProvision : function(we, bUseMallInfo){
		var merchantList = this._getOption("checkoutMerchantJson");
		var merchantListValues = null;
		if (bUseMallInfo) {
			merchantListValues = [ this.getOption("mallInfo") ];
		} else {
			merchantListValues = merchantList.values();
		}
		var elLayerHtml = $Template(this._getElement("mallProvisionLayerTemplate").html()).process({ "items": merchantListValues});
		var welMallProvisionLayer = this._getElement("mallProvisionLayer");
		welMallProvisionLayer.html(elLayerHtml);
		nmp.layer.show(welMallProvisionLayer, we.element, {
			"sPosition" : "outside-bottom",
			"sAlign" : "center",
			"nTop" : 8,
			"bAuto" : false ,
			"nShowDelay" : 0
		});
	},
	getOption : function(optionName){
		return this._getOption(optionName);
	},
	removeCoupons : function(bOrderAndProductCoupons, bDeliveryCoupon) {
		var orderSnapshot = this.getOrderSnapshot();

		$A(orderSnapshot.orderProducts).forEach($Fn(function(orderProduct) {
			if (bOrderAndProductCoupons) {
				$A(orderProduct.items).forEach($Fn(function(orderItem) {
					orderItem.current = orderItem.current || {};

					// 적용된 복수구매할인은 제거하지 않음
					orderItem.current.discounts = $A(orderItem.current.discounts).filter(function(discount) {
						return discount.available && (discount.discountPolicy.discountType == "MULTI_PURCHASE_DISCOUNT");
					}).$value();
				}, this).bind());
			}

			if (bDeliveryCoupon) {
				orderProduct.deliveryGroup.discount = undefined;
			}
		}, this).bind());

		if (bOrderAndProductCoupons) {
			orderSnapshot.discount = undefined;
		}

		var calculator = new nmp.component.OrderProductCalculator();
		$A(orderSnapshot.orderProducts).forEach(function(orderProduct) {
			calculator.addOrderProduct(orderProduct);
		});
		calculator.addOrderDiscount(orderSnapshot.discount);
		$H(orderSnapshot.storeDiscounts).forEach(function(value, key) {
			calculator.addStoreDiscount(key, value);
		});

		// 제휴카드 할인쿠폰 제거
		this._removeJoinCreditCardInfoByCondition(bOrderAndProductCoupons, bDeliveryCoupon);

		// 상품쿠폰 제거시에는 마일리지 금액 재계산 필요
		this.applyDiscounts(orderSnapshot, calculator.calculate(), false, bOrderAndProductCoupons);
	},
	_removeJoinCreditCardInfoByCondition : function(bOrderAndProductCoupons, bDeliveryCoupon){
		if ((bOrderAndProductCoupons && bDeliveryCoupon)) {
			this.removeJoinCreditCardInfo();
		}

		var bContainDeliveryJoinCreditCardCoupon = this._containDeliveryJoinCreditCardCoupon();
		if (bOrderAndProductCoupons && !bContainDeliveryJoinCreditCardCoupon) {
			// 상품주문/주문 쿠폰만 제거하는 경우에 배송비에 제휴카드 할인쿠폰 쓰인게 없다면, 제휴카드 코드 제거
			this.removeJoinCreditCardInfo();
		} else if (bDeliveryCoupon && bContainDeliveryJoinCreditCardCoupon) {
			// 배송비 제휴카드 할인쿠폰을 제거했을 경우 제휴카드 적용된 상품번호 리스트가 빈다면 제휴카드 코드 제거
			this._htInstance["joinCreditCardInfo"]["joinCreditCardCompanySelectIdList"] = $A(this._htInstance["joinCreditCardInfo"]["joinCreditCardCompanySelectIdList"]).filter(function(v) {
				return (v.indexOf("deliveryDiscount") < 0);
			});

			if (this._htInstance["joinCreditCardInfo"]["joinCreditCardCompanySelectIdList"].length() == 0) {
				this.removeJoinCreditCardInfo();
			}
		} else if (bOrderAndProductCoupons) {
			// 상품주문/주문 쿠폰만 제거하는 경우 배송비에 제휴카드 할인쿠폰이 쓰였다면 상품쿠폰에 적용된 제휴카드 id만 제거 (배송비 제휴카드 쿠폰이 적용된 id만 남김)
			this._htInstance["joinCreditCardInfo"]["joinCreditCardCompanySelectIdList"] = $A(this._htInstance["joinCreditCardInfo"]["joinCreditCardCompanySelectIdList"]).filter(function(v) {
				return (v.indexOf("deliveryDiscount") >= 0);
			});
		}
	},
	removeJoinCreditCardInfo : function() {
		this._htInstance["joinCreditCardInfo"] = undefined;
		if($$.getSingle("input[name=joinCreditCardCompanyCode]") != undefined){
			$$.getSingle("input[name=joinCreditCardCompanyCode]").value = "";
		}
	},
	_containDeliveryJoinCreditCardCoupon : function() {
		// 배송비 제휴카드 할인쿠폰이 쓰였는지 확인 (사용했으면 true, 사용하지 않았으면 false)
		if (this._htInstance["joinCreditCardInfo"] == undefined || this._htInstance["joinCreditCardInfo"]["joinCreditCardCompanySelectIdList"] == undefined) {
			return false;
		}

		return !$A(this._htInstance["joinCreditCardInfo"]["joinCreditCardCompanySelectIdList"]).every(function(v) {
			return (v.indexOf("deliveryDiscount") < 0);
		});
	},
	showLayerCommon : function(htEvent, layerClass, isEdged, isLined, sAlign, cssName, sLayerName) {
		var welCommonLayer = null;

		if (sLayerName != undefined) {
			welCommonLayer = this._getElement(sLayerName);
		} else {
			if (isEdged == "true") {
				welCommonLayer = (isLined == "true") ? this._getElement("commonEdgedLineLayer") : this._getElement("commonEdgedLayer");
			} else {
				welCommonLayer = (isLined == "true") ? this._getElement("commonLineLayer") : this._getElement("commonLayer");
			}
		}
		var welContentLayer = $Element(welCommonLayer.query("._content"));
		if (cssName != undefined && cssName != "") {
			welCommonLayer.addClass(cssName);
		}
		welContentLayer.html(this._getElement(layerClass).html());

		var nTop = 5;
		if (isEdged == "true") {
			nTop = 8;
		}

		var baseElement = htEvent.element;
		nmp.layer.show(welCommonLayer, baseElement, {
			"sPosition" : "outside-bottom",
			"sAlign" : sAlign,
			"nTop" : nTop,
			"bAuto" : false
		});
	},
	showLayerDiscount : function(htEvent, orderProductId) {
		var elLayerHtml = $Template(this._getElement("discountLayerTemplate").html()).process(this._makeDiscountLayerTemplateArgument(orderProductId));

		var welDiscountLayer = this._getElement("discountLayer");
		$Element(welDiscountLayer.query("._content")).html(elLayerHtml);

		nmp.layer.show(welDiscountLayer, htEvent.element, {
			"sPosition" : "outside-bottom",
			"sAlign" : "center",
			"nTop" : 8,
			"bAuto" : false
		});
	},
	showLayerDeliveryFee : function(htEvent, orderProductId, sLayerType) {
		var elLayerHtml = $Template(this._getElement("deliveryFeeLayerTemplate").html()).process(this._makeDeliveryFeeLayerTemplateArgument(orderProductId));

		if(sLayerType == undefined || sLayerType == '') {
			var welDeliveryFeeLayer = this._getElement("deliveryFeeLayer");
		} else {
			var welDeliveryFeeLayer = this._getElement(sLayerType);
		}
		$Element(welDeliveryFeeLayer.query("._content")).html(elLayerHtml);

		nmp.layer.show(welDeliveryFeeLayer, htEvent.element, {
			"sPosition" : "outside-bottom",
			"sAlign" : "center",
			"nTop" : 8,
			"bAuto" : false
		});
	},
	showLayerMileage : function(htEvent, sType) {
		this._htInstance["mileageMap"] = $H(this._htInstance["mileageMap"]).add("type", sType).$value();

		var elLayerHtml = null;
		var welMileageFeeLayer = null;
		if (this._isEasyPay(this.getPayMethod())) {
			elLayerHtml = $Template(this._getElement("easyPayMileageLayerTemplate").html()).process(this._htInstance["mileageMap"]);
			welMileageFeeLayer = this._getElement("easyPayMileageLayer");
		} else {
			elLayerHtml = $Template(this._getElement("mileageLayerTemplate").html()).process(this._htInstance["mileageMap"]);
			welMileageFeeLayer = this._getElement("mileageLayer");
		}

		$Element(welMileageFeeLayer.query("._content")).html(elLayerHtml);

		var baseElement = htEvent.element;
		nmp.layer.show(welMileageFeeLayer, baseElement, {
			"sPosition" : "outside-bottom",
			"sAlign" : "left",
			"nTop" : 0,
			"bAuto" : false
		});
	},
	_makeDiscountLayerTemplateArgument : function(orderProductId) {
		var orderProduct = this._getOrderProductByOrderId(this._htInstance["orderSnapshot"].orderProducts, orderProductId);
		var multiPurchaseDiscountMinOrderValueText = "";
		var multiPurchaseDiscountValueText = "";

		if (this._htInstance["summary"]["orderProductDiscounts"][orderProductId]["multiPurchaseDiscount"] > 0) {
			var policy = orderProduct.benefits.benefitPolicies.multiPurchaseDiscount;

			if (policy.minOrderUnit == "PURCHASE_COUNT") {
				multiPurchaseDiscountMinOrderValueText = policy.minOrderValue + "개";
			} else {
				multiPurchaseDiscountMinOrderValueText = nmp.utility.convertNumberFormat(policy.minOrderValue) + "원";
			}

			if (policy.discountUnit == "RATE") {
				multiPurchaseDiscountValueText = policy.discountValue + "%";
			} else {
				multiPurchaseDiscountValueText = nmp.utility.convertNumberFormat(policy.discountValue) + "원";
			}
		}

		return {
			"sellerImmediateDiscountAmount" : this._htInstance["summary"]["orderProductDiscounts"][orderProductId]["sellerImmediateDiscount"],
			"sellerImmediateDiscountAmountText" : nmp.utility.convertNumberFormat(this._htInstance["summary"]["orderProductDiscounts"][orderProductId]["sellerImmediateDiscount"]),
			"managerImmediateDiscountAmount" : this._htInstance["summary"]["orderProductDiscounts"][orderProductId]["nmpImmediateDiscount"],
			"managerImmediateDiscountAmountText" : nmp.utility.convertNumberFormat(this._htInstance["summary"]["orderProductDiscounts"][orderProductId]["nmpImmediateDiscount"]),
			"multiPurchaseDiscountAmount" : this._htInstance["summary"]["orderProductDiscounts"][orderProductId]["multiPurchaseDiscount"],
			"multiPurchaseDiscountMinOrderValueText" : multiPurchaseDiscountMinOrderValueText,
			"multiPurchaseDiscountValueText" : multiPurchaseDiscountValueText
		};
	},
	_makeDeliveryFeeLayerTemplateArgument : function(orderProductId) {
		var orderProduct = this._getOrderProductByOrderId(this._htInstance["orderSnapshot"].orderProducts, orderProductId);
		var deliveryFee = orderProduct.deliveryFee;
		var deliveryGroup = orderProduct.deliveryGroup;
		var extraFee = deliveryGroup.deliveryAreaFee;
		var isApiSupport = false;

		if (extraFee != undefined) {
			extraFee.area2ExtraFee = extraFee.area2ExtraFee || 0;
			extraFee.area3ExtraFee = extraFee.area3ExtraFee || 0;
			isApiSupport = deliveryGroup.deliveryAreaFee.apiSupport;
		}
		return {
			"policy" : deliveryFee,
			"fee" : deliveryGroup.fee,
			"groupPolicy" : deliveryGroup,
			"extraFeePolicy" : extraFee,
			"isApiSupport" : isApiSupport
		};
	},
	_generateMileageLayerDataFromMap : function(htMileageMap) {
		var waMileageItems = $A();
		var htMileageBasisAcmPolicy = null;
		var htMileageAddAcmPolicy = null;
		$A(this._htInstance["orderSnapshot"].orderProducts).forEach($Fn(function(orderProduct) {
			if ($H(htMileageMap).hasKey(orderProduct.id) && $H(htMileageMap).$(orderProduct.id) > 0) {
				var htMileageItem = {productName : orderProduct.name, mileage : $H(htMileageMap).$(orderProduct.id)};
				waMileageItems.push(htMileageItem);

				if (this.getOption("orderClass") == "CHECKOUT") {
					if (htMileageBasisAcmPolicy == null && orderProduct.benefits.benefitPolicies.basicMileage != undefined) {
						htMileageBasisAcmPolicy = orderProduct.benefits.benefitPolicies.basicMileage;
					}
					if (htMileageAddAcmPolicy == null && orderProduct.benefits.benefitPolicies.additionalMilage != undefined) {
						htMileageAddAcmPolicy = orderProduct.benefits.benefitPolicies.additionalMilage;
					}
				}
			}
		}, this).bind());

		var htMileageMapResult = {
			"TOTAL" : htMileageMap["TOTAL"],
			"TOTAL_PURCHASE" : htMileageMap["TOTAL_PURCHASE"]||0,
			"TOTAL_ADDITIONAL" : htMileageMap["TOTAL_ADDITIONAL"]||0,
			"TOTAL_PLUS" : htMileageMap["TOTAL_PLUS"]||0,
			"TOTAL_MEMBERSHIP" : htMileageMap["TOTAL_MEMBERSHIP"]||0,
			"TOTAL_SCM" : htMileageMap["TOTAL_SCM"]||0,
			"TOTAL_INFLOW" : htMileageMap["TOTAL_INFLOW"]||0,
			"TOTAL_CHARGED_POINT" : htMileageMap["TOTAL_CHARGED_POINT"]||0,
			"TOTAL_CHARGED_POINT_ADDITIONAL" : htMileageMap["TOTAL_CHARGED_POINT_ADDITIONAL"]||0,
			"items" : waMileageItems.$value(),
			"mileageBasisAcmText" : this._makeMileagePolicyText(htMileageBasisAcmPolicy),
			"mileageAddAcmText" : this._makeMileagePolicyText(htMileageAddAcmPolicy)
		};
		this._htInstance["mileageMap"] = htMileageMapResult;
	},
	_generateReviewMileageLayerDataFromMap : function(htMileageMap) {
		var waMileageItems = $A();
		var htMileageBasisAcmPolicy = null;
		var htMileageAddAcmPolicy = null;
		$A(this._htInstance["orderSnapshot"].orderProducts).forEach($Fn(function(orderProduct) {
			if ($H(htMileageMap).hasKey(orderProduct.id)) {
				var htOrderProductReviewMap = $H(htMileageMap).$(orderProduct.id);

				var htMileageItem = {productName : orderProduct.name, textReviewMileage : htOrderProductReviewMap["TEXT"], photoVideoReviewMileage : htOrderProductReviewMap["PHOTOVIDEO"], subscriberReviewMileage : htOrderProductReviewMap["SUBSCRIBER"]};
				waMileageItems.push(htMileageItem);
			}
		}, this).bind());

		var htMileageMapResult = {"TOTAL" : htMileageMap["TOTAL"], "TOTAL_NORMAL_TEXT" : htMileageMap["TOTAL_NORMAL_TEXT"], "TOTAL_NORMAL_PHOTOVIDEO" : htMileageMap["TOTAL_NORMAL_PHOTOVIDEO"], "TOTAL_AFTERUSE_TEXT" : htMileageMap["TOTAL_AFTERUSE_TEXT"], "TOTAL_AFTERUSE_PHOTOVIDEO" : htMileageMap["TOTAL_AFTERUSE_PHOTOVIDEO"], "TOTAL_SUBSCRIBER" : htMileageMap["TOTAL_SUBSCRIBER"], "items" : waMileageItems.$value()};
		this._htInstance["reviewMileageMap"] = htMileageMapResult;
	},
	_makeMileagePolicyText : function(htMileagePolicy) {
		if (htMileagePolicy == null) {
			return '';
		}

		if (htMileagePolicy.accumulatedUnit == "RATE") {
			return htMileagePolicy.accumulatedValue + "%";
		} else {
			return parseInt(htMileagePolicy.accumulatedValue) + "원";
		}
	},
	_getOrderProductByOrderId : function(orderProducts, orderId) {
		var aOrderProducts = $A(orderProducts).filter(function(v, i, o) {
			return (v.id == orderId);
		});

		return (aOrderProducts.length() == 1 ? aOrderProducts.get(0) : null);
	},
	/**
	 * 환불계좌 정보를 주문서에 셋팅한다.
	 *
	 * @param accountInfo
	 */
	applyRefuncAccountInfo : function(accountInfo){
		if (accountInfo == undefined || accountInfo.id == undefined) {
			return;
		}
		$$.getSingle("._refundBankId").value = accountInfo.id;
		$$.getSingle("._refundBankCode").value = accountInfo.bankTypeCode;
		$$.getSingle("._refundBankCodeName").value = accountInfo.bankTypeCodeName;
		$$.getSingle("._refundAccountHolderName").value = accountInfo.depositorName;
		$$.getSingle("._refundAccountNo").value = accountInfo.refundmentAccountNumber;
	},

	/* 휴대폰 결제 방법 노출 변경 */
	changeMobilePayMethod : function(we, mobilePayMethod){

		if(mobilePayMethod != undefined){
			if (mobilePayMethod == "mobilePinPay") {
				this._htInstance["isPinPay"] = true;
				if ((this._getOption("isPinPayMember") != undefined && this._getOption("isPinPayMember")) &&
					(this._getOption("isPinPayAgree") == undefined || this._getOption("isPinPayAgree"))) {
					$ElementList($$("._isPinMember")).show();
					$ElementList($$("._isNotPinMember")).hide();
					$ElementList($$("._isPinMember .cphNo")).addClass("_payForm");
					$ElementList($$("._isNotPinMember .cphNo")).removeClass("_payForm");
					this._resetElement();
					return; // return
				} else{
					$ElementList($$("._isPinMember")).hide();
					$ElementList($$("._isNotPinMember")).show();
					$ElementList($$("._isPinMember .cphNo")).removeClass("_payForm");
					$ElementList($$("._isNotPinMember .cphNo")).addClass("_payForm");
					this._resetElement();
				}
			} else if (mobilePayMethod == "mobilePay") {
				$ElementList($$("._isPinMember")).hide();
				$ElementList($$("._isNotPinMember")).show();
				$ElementList($$("._isPinMember .cphNo")).removeClass("_payForm");
				$ElementList($$("._isNotPinMember .cphNo")).addClass("_payForm");
				this._resetElement();
				this._htInstance["isPinPay"] = false;
			}
		}

	},

	/* 간편결제 해지시 휴대폰 일반결제  default 값으로 변경 */
	clearMobilePayMethod : function(we){

		$$.getSingle("#mobilePay").click();
		this._setOption("isPinPayAgree" , false);
		this._setOption("isPinPayMember" , false)
	},

	changeRefundMethod : function(we, refundMethod){
		if(we != undefined){
			refundMethod = $Element(we.element.parentElement).query("input").value;
		}
		var isVisible = true;
		if(refundMethod == "BANK_ACCOUNT"){
			isVisible = true;
		}else{
			isVisible = false;
		}
		var refundInfos=this._getElementList("refundInfos");
		if(isVisible && this._getOption("remainChargeAmount") >= 0){
			refundInfos.show();
		}else{
			refundInfos.hide();
		}
	},
	changeMemberSimpleUpdate : function(we, isTel){
		if (this._getElement("usePurchaserTelNumber") != undefined && this._getElement("usePurchaserTelNumber").attr("checked")) {
			alert("수신자 정보에 주문자 정보 자동 입력을 해제 후 변경하실 수 있습니다.");
			return;
		}

		var htUrls = this._getOption("urls");
		var sPageUrl = htUrls["user.front.myPage.simple.update"];
		var params = {"callbackFunction" : "nmp.front.order.order_sheet.callbackChangeMemberSimpleUpdate", "isTel" : isTel};
		nmp.openPopup(sPageUrl+"?"+jindo.$H(params).toQueryString(),["width=520", "height=240"]);
	},
	callbackChangeMemberSimpleUpdate : function(strResult){
		var result = strResult.split("/");

		this._getElement("memberTelNumber").html(this.phoneNumberMasking(result[0]));
		this._setOption("memberTelNumber", this.phoneNumberMasking(result[0]));
		this._getElement("memberEmailAddress").html(this.emailMasking(result[1]));
	},
	changeMemberEmail : function(we){
		var htUrls = this._getOption("urls");
		var sPageUrl = htUrls["user.front.email.update"];
		var params = {"callbackFunctionName" : "nmp.front.order.order_sheet.callbackChangeMemberEmail"};
		nmp.openPopup(sPageUrl+"?"+jindo.$H(params).toQueryString(),["width=450", "height=310"]);
	},
	callbackChangeMemberEmail : function(sResult){
		var oThis = nmp.front.order.order_sheet;

		var aResult = sResult.split("/");
		if (oThis._getElement("memberEmailAddress") != undefined) {
			oThis._getElement("memberEmailAddress").html(oThis.emailMasking(aResult[0]));
		}
		oThis._clearUserInfoCache();
	},
	changeMemberCellphone : function(we){
		if (this._getElement("usePurchaserTelNumber") != undefined && this._getElement("usePurchaserTelNumber").attr("checked")) {
			alert("수신자 정보에 주문자 정보 자동 입력을 해제 후 변경하실 수 있습니다.");
			return;
		}

		var htUrls = this._getOption("urls");
		var sPageUrl = htUrls["user.front.cellphone.update"];
		var params = {"callbackFunctionName" : "nmp.front.order.order_sheet.callbackChangeMemberCellphone"};
		nmp.openPopup(sPageUrl+"?"+jindo.$H(params).toQueryString(),["width=440", "height=310"]);
	},
	callbackChangeMemberCellphone : function(sResult){
		var oThis = nmp.front.order.order_sheet;

		var aResult = sResult.split("/");
		if (oThis._getElement("memberTelNumber") != undefined) {
			oThis._getElement("memberTelNumber").html(oThis.phoneNumberMasking(aResult[0]));
		}
		oThis._setOption("memberTelNumber", oThis.phoneNumberMasking(aResult[0]));
		oThis._updatePurchaserCellphoneInfoNoti(aResult[1]);
		oThis._clearUserInfoCache();
	},
	_updatePurchaserCellphoneInfoNoti : function(sResult) {
		this._getElementList("telNoNoti").hide();

		switch(sResult) {
			case "null":
			case "true":
				this._getElement("purchaserInfo").removeClass("case_overlap");
				this._getElement("purchaserInfo").removeClass("case_none_regist");
				this._getElement("telNoHighlight").removeClass("phone_num");

				this._getElement("telNoInfo").show();
				break;
			case "false":
				this._getElement("purchaserInfo").addClass("case_overlap");
				this._getElement("purchaserInfo").removeClass("case_none_regist");
				this._getElement("telNoHighlight").addClass("phone_num");

				this._getElement("telNoDuplicated").show();
				break;
		}
	},
	_clearUserInfoCache : function() {
		nmp.requestAjax("/orderSheetAjax/clearUserInfoCache", undefined, {
			method: "get",
			onload : $Fn(function(htResult) {
				if (htResult.bSuccess != true) {
					alert("회원 정보 상태 갱신에 실패하였습니다. 회원 정보를 다시 확인해주세요.");
				}
			}, this).bind(),
			onerror : function (res) {
				alert("회원 정보 상태 갱신에 실패하였습니다. 회원 정보를 다시 확인해주세요.");
			}
		});
	},
	phoneNumberMasking : function(phoneNumber) {
		var result = phoneNumber;
		if (phoneNumber != undefined) {
			var telNoArray = phoneNumber.split("-");
			for (var i = 0; i < telNoArray.length; i++) {
				if (telNoArray[i]) {
					if (i == 0) {
						result = telNoArray[i];
					} else {
						if (telNoArray[i].length == 3) {
							result = result + "-" + telNoArray[i].substring(0,1) + "**";
						} else {
							result = result + "-" + telNoArray[i].substring(0,1) + "**" + telNoArray[i].substring(telNoArray[i].length - 1,telNoArray[i].length);
						}
					}
				}
			}
		}
		return result;
	},
	emailMasking : function(email) {
		var result = email;
		if (email != undefined) {
			var emailArray = email.split("@");
			if (emailArray.length > 1) {
				var emailId = emailArray[0];
				var domainArray = emailArray[1].split(".");
				var emailService = this.replaceMasking(domainArray[0],2);
				var emailDotAfter = domainArray[1];
				if (emailId.length > 2) {
					result = emailId.substring(0,2) + "******@" + emailService + "." + emailDotAfter;
				} else {
					result = emailId + "******@" + emailService + "." + emailDotAfter;
				}
			}
		}
		return result;
	},
	replaceMasking : function(data, maskingStartIndex) {
		if (data != undefined && data.length > maskingStartIndex) {
			var maskingString = data.substring(maskingStartIndex, data.length);
			var maskingResult = data.substring(0, maskingStartIndex);
			for (var i=0; i < maskingString.length; i++) {
				maskingResult = maskingResult + "*";
			}
			return maskingResult;
		} else {
			return data;
		}
	},
	callbackAutoChargeNaverDon : function(htResult){
		$ElementList($$("._donAutoCharge")).hide();
		if(htResult["isRegister"]){
			var autoChageRegistElement = $Element($$.getSingle("._donAutoChargeRegist"));
			autoChageRegistElement.show();
			var statusText = "",settingText = "";
			var statusClassName = "";
			if(htResult["naverDonAutoChargeStatus"] == "ACTIVE"){
				$Element(autoChageRegistElement.query("._autoChargeStatusText")).removeClass("cashend");
				statusText = "이용 중";
				settingText = "변경";
				statusClassName = "cashing";
			}else if(htResult["naverDonAutoChargeStatus"] == "STOP"){
				$Element(autoChageRegistElement.query("._autoChargeStatusText")).removeClass("cashing");
				statusText = "정지 중";
				settingText = "해제";
				statusClassName = "cashend";
			}
			$Element(autoChageRegistElement.query("._autoChargeStatusText")).html(statusText);
			$Element(autoChageRegistElement.query("._autoChargeStatusText")).addClass(statusClassName);
			$Element(autoChageRegistElement.query("._autoChargeSettingText")).html(settingText);
		}else{
			$Element($$.getSingle("._donAutoChargeNoRegist")).show();
		}
	},
	checkFirstNumber : function(we, nIndex){
		var isExistsRestrictedNumber = false;
		var _aBlankTelNo = $A();

		$A($$("._firstNumber")).forEach($Fn(function(el){
			if(this._getOption("restrictedReliefNumberList").has(el.value)){
				isExistsRestrictedNumber = true;
				$A.Break();
			}
			if( el.value == "" ){
				var tempTelNo="";
				$A($$("input",el.parentNode)).forEach(function(el){
					tempTelNo += el.value;
				});
				if(tempTelNo != ""){
					isExistsRestrictedNumber = true;
				}else{
					_aBlankTelNo.push(tempTelNo);
				}
			}
		}, this).bind());

		var isAllBlank = false;
		if(_aBlankTelNo.length() == 2){
			isAllBlank = true;
		}

		var reliefPhoneNumberUseYn = $$.getSingle("._reliefPhoneNumberUseYn");
		if(reliefPhoneNumberUseYn == undefined){
			return;
		}
		if(isExistsRestrictedNumber || isAllBlank){
			/*if(reliefPhoneNumberUseYn.value == true){
			 alert("선택하신 국번은 안심번호 이용신청이 불가합니다. 안심번호 사용신청이 취소됩니다.");
			 }	*/
			reliefPhoneNumberUseYn.value = false;
			$A(this._htInstance["aReliefPhoneNumberCheckBox"]).forEach(function(v) {
				v.setChecked(false);
				v.disable();
			});
		}else{
			if (we != undefined && nIndex != undefined) {
				reliefPhoneNumberUseYn.value = $$.getSingle("._reliefPhoneNumberCheckbox_" + nIndex).checked;
			}
			$A(this._htInstance["aReliefPhoneNumberCheckBox"]).forEach(function(v) {
				v.enable();
			});
		}
	},
	showLatestDeliveryMemo : function(htEvent, itemId, sTargetElementName) {
        var welLatestDeliveryMemoes = this._getElement("latestDeliveryMemoes");
        if(welLatestDeliveryMemoes.visible()){
            nmp.layer.hide(welLatestDeliveryMemoes);
            return;
        }

        var elTargetElement = htEvent.element;
		if (sTargetElementName != undefined) {
			if (elTargetElement.tagName == "SPAN") {
				elTargetElement = elTargetElement.parentElement;
			}
			elTargetElement = $Element(elTargetElement.parentElement).query("." + sTargetElementName);
		}

		var elLayerHtml = $Template(this._getElement("latestDeliveryMemoTemplate").html()).process({"itemId" : itemId});

		welLatestDeliveryMemoes.width($Element(elTargetElement).width() - 8);
		welLatestDeliveryMemoes.html(elLayerHtml);

		nmp.layer.show(welLatestDeliveryMemoes, elTargetElement, {
			"sPosition" : "outside-bottom",
			"sAlign" : "left",
			"nTop" : 0,
			"bAuto" : false
		});

		htEvent.stopBubble();
		elTargetElement.focus();
	},
	applyLatestDeliveryMemo : function(htEvent, itemId) {
		var welTargetMemo = null;
		if (itemId == "") {
			welTargetMemo = this._getElement("deliveryMemo");
		} else {
			welTargetMemo = $Element($$.getSingle("input[name=deliveryMemos\\." + itemId + "]"));
		}
		var elMemo = null;
		switch (htEvent.element.tagName.toLowerCase()) {
			case "span":
				elMemo = htEvent.element;
				break;
			case "em":
				elMemo = $Element(htEvent.element.parentElement).query("span._deliveryMemo");
				break;
			default:
				elMemo = $Element(htEvent.element).query("span._deliveryMemo");
		}

		welTargetMemo.attr("value", $S(elMemo.innerHTML).unescapeHTML());
		welTargetMemo.fireEvent("focus");
		welTargetMemo.fireEvent("blur");
		nmp.layer.hide();
	},
	trimCardName : function(sCardName) {
		if (sCardName == undefined) {
			return "";
		}

		return sCardName.replace("카드", "");
	},
	inputPurchserTelNumber : function(we) {
		var isAutoInput = (we.element.tagName == "SPAN") ? $Element(we.element.parentElement).query("input").checked : we.element.checked;
		var prefixElementClassName = "_group_tel1_";
		if(isAutoInput){
			this._htInstance[prefixElementClassName +1].disable();
			this._getElement("deliveryInfos").query("."+prefixElementClassName + 2).disabled = true;
			this._getElement("deliveryInfos").query("."+prefixElementClassName + 3).disabled = true;

			this.insertSplitDeliveryInfo(prefixElementClassName,this._getOption("memberTelNumber"), 3);
		}else{
			this._htInstance[prefixElementClassName +1].enable();
			this._getElement("deliveryInfos").query("."+prefixElementClassName + 2).disabled = false;
			this._getElement("deliveryInfos").query("."+prefixElementClassName + 3).disabled = false;

			this.insertSplitDeliveryInfo(prefixElementClassName,"010-", 3);
		}
	},
	showDimmedLayer : function(htEvent, sLayerName) {
		var screenWidth = 0;
		var screenHeight = 0;
		var scrollTop=0;
		var elTempLayer = $$.getSingle("._tempLayer");
		if(window.innerHeight){				// IE외 브라우저
			screenWidth = window.innerWidth + "px";
			screenHeight = window.innerHeight + "px";
		}else{// IE
			screenWidth = document.body.clientWidth + "px";
			screenHeight = document.body.clientHeight + "px";
		}

		if(typeof pageYOffset!= 'undefined'){
			// most browsers
			scrollTop= pageYOffset;
		}
		else{
			var B= document.body; // IE 'quirks'
			var D= document.documentElement; // IE with doctype
			D= (D.clientHeight)? D: B;
			scrollTop = D.scrollTop;
		}
		scrollTop += "px";

		$Element(elTempLayer).css(
			{
				width : screenWidth,
				height : screenHeight,
				position : "absolute",
				left : "0px",
				top : scrollTop,
				display : "block"
			});

		var welDimmedLayer = this._getElement("dimmedLayer");
		welDimmedLayer.html($$.getSingle("." + sLayerName).innerHTML);
		nmp.showLayer(welDimmedLayer.$value(), elTempLayer, {
			sPosition : "inside-center",
			bAuto : true,
			bShowDimmedLayer : true
		});
		htEvent.stop();
	},
	closeDimmedLayer : function(htEvent, sLayerName) {
		nmp.hideLayer();
		$$.getSingle("._tempLayer").style.display="none";
	},
	onToggleAllAgree : function(htEvent) {
		var bAgreed = this._htInstance["rdAllAgree"].getChecked();
		this._htInstance["waAgreeCheckBox"].forEach(function(v) {
			v.setChecked(bAgreed);
		});

		if (htEvent != undefined && nmp.front.order.order_sheet.storage != undefined) {
			nmp.front.order.order_sheet.storage.saveOrderInfo();
		}
	},
	checkAllAgreed : function(htEvent) {
		var aAgreeBtn = $A(this._getElementList("agreeButtons", true));
		var bAllNotAgreed = aAgreeBtn.every(function(v) {
			return !nmp.front.order.ui.isElementVisible(v) || !v.checked;
		});

		var bAllAgreed = aAgreeBtn.every(function(v) {
			return !nmp.front.order.ui.isElementVisible(v) || v.checked;
		});

		// 전체동의 상태가 click 이벤트가 아닌 스크립트에 의해 변경될 경우 form data를 수동으로 저장해줌 (복구 시 필요)
		if (bAllAgreed != this._htInstance["rdAllAgree"].getChecked() || bAllNotAgreed) {
			this._htInstance["rdAllAgree"].setChecked(bAllAgreed);

			// 결제수단을 변경할 경우 동의 개수가 달라져도, 전체동의에 체크가 되면 유저가 직접 체크하지 않은 동의도 체크하도록 함 (언체크도 마찬가지)
			if (bAllAgreed || bAllNotAgreed) {
				this.onToggleAllAgree();
			}

			if (nmp.front.order.order_sheet.storage != undefined) {
				nmp.front.order.order_sheet.storage.saveOrderInfo();
			}
		}
	},
	changeOverseaDeliveryCustomType : function(htEvent) {
		var bVisibleIndv;
		var elTarget = (htEvent.element.tagName == "SPAN") ? $Element(htEvent.element.parentElement).query("input:checked") : htEvent.element;
		if (elTarget.value == "INDIVIDUAL_CUSTOM_UNIQUE_CODE") {
			bVisibleIndv = true;
			this._getElement("individualCustomUniqueCode").attr("disabled", null);
		} else {
			bVisibleIndv = false;
			this._getElement("individualCustomUniqueCode").attr("disabled", "disabled");
		}

		$A(this._getElement("root").queryAll("._overseaIndv")).forEach(function(v) {
			$Element(v).visible(bVisibleIndv);
		});
		$A(this._getElement("root").queryAll("._overseaNa")).forEach(function(v) {
			$Element(v).visible(!bVisibleIndv);
		});
	},
	openPopupIndividualCustomUniqueCode : function(htEvent) {
		nmp.openPopup("/orderSheetPopup/individualCustomUniqueCodeIssue", ["width=420", "height=366"], "individualCustomUniqueCodeIssue");
	},
	toggleLotNumberAddress : function() {
		var sLotNumberAddress = $$.getSingle("input[name=deliveryAddress.lotNumberAddress]").value;
		var bRoadNameAddressYn = ("true" == $$.getSingle("input[name=deliveryAddress.roadNameAddressYn]").value);

		if(bRoadNameAddressYn && $S(sLotNumberAddress).trim().$value() != ""){
			if(this._getElement("root").query("p.lotNumberAddress")){
				$Element(this._getElement("root").query("p.lotNumberAddress")).html("지번 : " + sLotNumberAddress);
			}
		}else{
			if(this._getElement("root").query("p.lotNumberAddress")){
				$Element(this._getElement("root").query("p.lotNumberAddress")).html("");
			}
		}
	},
	showDeliveryPlaceDirectInput : function(htEvent, rowId) {
		this.editDeliveryInfo();

		var reliefPhoneNumberUseYn = $$.getSingle("._reliefPhoneNumberUseYn");
		if(reliefPhoneNumberUseYn != undefined){
			reliefPhoneNumberUseYn.value = false;
		}

		this.changeDeliveryPlace(undefined, undefined, "true");

		if(nmp.front.order.order_sheet.storage){
			nmp.front.order.order_sheet.storage.saveOrderInfo();
		}
	},
	showDeliveryInfo : function(htEvent, rowId, bBaseAddressYn) {

		this._getElement("allAddressArea").hide();
		$A(this._getElementList("deliveryPlaces", true)).forEach(function(v) {
			$Element(v).hide();
		});

		$Element(this._getElement("root").query("._deliveryPlaces_" + rowId)).show();

		var reliefPhoneNumberUseYn = $$.getSingle("._reliefPhoneNumberUseYn");
		if(reliefPhoneNumberUseYn != undefined){
			reliefPhoneNumberUseYn.value = false;
		}

		$A(this._htInstance["aReliefPhoneNumberCheckBox"]).forEach(function(v) {
			v.setChecked(false);
		});

		this._getElement("deliveryMemoHeader").hide();
		this._getElement("deliveryMemoOuter").removeClass("deliver_option_wrap deli_comments");
		this._getElement("deliveryMemoInner").removeClass("deliver_option");

		this.changeDeliveryPlace(undefined, rowId, "true");

		if(nmp.front.order.order_sheet.storage){
			nmp.front.order.order_sheet.storage.saveOrderInfo();
		}
	},
	editDeliveryInfo : function(htEvent) {
		if (this._htInstance["rdNewAddress"] != undefined) {
			this._htInstance["rdNewAddress"].setChecked(true);
		}

		$A(this._getElementList("deliveryPlaces", true)).forEach(function(v) {
			$Element(v).hide();
		});

		$A(this._htInstance["aReliefPhoneNumberCheckBox"]).forEach(function(v) {
			v.setChecked(false);
		});

		this._getElement("allAddressArea").show();
		this._getElement("deliveryMemoHeader").show();
		this._getElement("deliveryMemoOuter").addClass("deliver_option_wrap deli_comments");
		this._getElement("deliveryMemoInner").addClass("deliver_option");
	},
	removeDeliveryInfo : function(htEvent, rowId, orderDeliveryAddrNo) {
		if (confirm('최근 배송지를 삭제하시겠습니까?')) {
			var target = this._getElement("root").query("#recentDeliveryPlace_" + rowId);

			nmp.requestAjax("/orderSheetAjax/requestRemoveRecentDeliveryInfo", {
				"orderDeliveryAddrNo": orderDeliveryAddrNo
			}, {
				method: "post",
				onload : $Fn(function() {
					/*삭제 하려고 하는 배송지가 선택되어 있을 경우 기본 배송지 선택 후 삭제*/
					if (target.checked) {
						$$.getSingle("._baseDeliveryInfo span").click();
						nmp.front.order.order_sheet.showDeliveryInfo(null, 0, true);
					}
					var removeElement = htEvent.element.parentElement;
					removeElement.parentElement.removeChild(removeElement);

                    this._hideRecentDeliveryAddressAreaOrBtn();
				}, this).bind(),
				onerror : function (res) {
					alert("다시 시도해 주세요");
				}
			});
		}
	},
    _hideRecentDeliveryAddressAreaOrBtn: function () {
        var welRecentDeliveryAddressArea = this._getElement("recentDeliveryAddressArea");
        var elRecentDeli = welRecentDeliveryAddressArea.query(".recent_deli");

        // legacy 구분
        if (elRecentDeli != null) {
            var recentDeliveryAddressLength = $Element(elRecentDeli).queryAll("a").length;

            if (recentDeliveryAddressLength === 5) {
                var welMoreRecentDeliveryBtn = $Element(welRecentDeliveryAddressArea.query(".recent_deli_more"));
                welMoreRecentDeliveryBtn.hide();
            } else if (recentDeliveryAddressLength <= 0) {
                welRecentDeliveryAddressArea.hide();
            }
        } else {
            if (welRecentDeliveryAddressArea.queryAll("li").length <= 0) {
                welRecentDeliveryAddressArea.hide();
            }
        }
    },
	showLayerReviewMileage : function(htEvent) {
		var elLayerHtml = $Template(this._getElement("reviewMileageLayerTemplate").html()).process(this._htInstance["reviewMileageMap"]);

		var welNstampFeeLayer = this._getElement("reviewMileageLayer");
		$Element(welNstampFeeLayer.query("._content")).html(elLayerHtml);

		// N stamp 레이어의 노출 기준 element 는 부모 엘리먼트(li) 위치의 왼쪽으로 정함
		var baseElement = htEvent.element;
//		if (baseElement.parentElement != undefined) {
//			baseElement = baseElement.parentElement;
//		}
		// 웹접근성 관련 처리를 위해 위와같이 기준 element 를 변경시키면 안됨.
		// TODO[minsu.hwang] 부모 엘리먼트(li) 위치로 rePositioning 하는 코드 추가 예정.

		nmp.layer.show(welNstampFeeLayer, baseElement, {
			"sPosition" : "outside-bottom",
			"sAlign" : "left",
			"nTop" : 0,
			"bAuto" : false
		});
	},
	_changePayMethodAndActivateFlick : function (sType) {
		var sFlickingInstanceName = "easyPay" + sType + "Flicking";

		if (this._htInstance[sFlickingInstanceName] == null) {
			this._htInstance[sFlickingInstanceName] = this._initPreviewFlick(sType);
		} else if (this._htInstance[sFlickingInstanceName] != null) {
			var currentIndex = this._htInstance[sFlickingInstanceName].getContentIndex();

			this._htInstance[sFlickingInstanceName].refresh(0);
			this._htInstance[sFlickingInstanceName].resize();
			this._htInstance[sFlickingInstanceName].refresh(currentIndex);
		}
	},
	changePaymentTab : function (htEvent, sTab) {
		if (sTab == "chargedPointPayment" && !this.validatePayAmountForChargePointPayment(true)) {
			sTab = this.getPaymentTabByPayMethod(this._htInstance["currentPaymethod"]);
			this._setPaymentTabChecked(sTab);
		}

		this.changePaymentTabSelection(sTab);

		switch (sTab) {
			case "naverPaymentsCard":
				this._changePayMethodAndActivateFlick("Card");
				this.changePayment(null, this._getSelectedEasyPayElement());
				break;
			case "naverPaymentsBank":
				this._changePayMethodAndActivateFlick("Bank");
				this.changePayment(null, this._getSelectedEasyPayElement());
				break;
			case "generalPayments":
				var currentPayMethodElement = "";
				$A(this._htInstance["aPayMeansClass"]).forEach($Fn(function (v, i, a) {
					if (a[i].getChecked()) {
						currentPayMethodElement = v;
					}
				}, this).bind());

				if (currentPayMethodElement.getInput().value == "BANK" && this.isChargePointPaymentAvailable()) {
					$A(this._htInstance["aPayMeansClass"]).forEach(function (v) {
						var welInput = $Element(v.getInput());
						if (welInput.attr("value") != "BANK" && welInput.attr("value") != "POINT") {
							v.setChecked(true);
							currentPayMethodElement = v;
							$A.Break();
						}
					});
				}

				this.changePayment(null, currentPayMethodElement);

				if ((this._getOption("orderClass") == "INTEGRATION_CART" || this._getOption("isForcedBillingPayment")) && nmp.front.order.order_sheet.getPayMethod() == "CREDIT_CARD") {
					nmp.front.order.order_sheet.integration_cart.changeCompanyTypeCode(undefined, (this._htInstance["joinCreditCardInfo"] != undefined ? this._htInstance["joinCreditCardInfo"]["joinCreditCardCompanyCode"] : ""), undefined, true);
				}
				break;
			case "chargedPointPayment":
				this.changePaymentByPayMethod("CHARGED_POINT");
				break
		}

		this._changePriceInfoView();
		this.checkPossibleInstallment();
	},
	changePaymentTabSelection : function (sTab) {
		$ElementList(this._getElement("root").queryAll(".payment_method_tab")).removeClass("on");
		$Element(this._getElement("root").query("._" + sTab + "Tab")).addClass("on");

		$ElementList(this._getElementList("paymentsTab", true)).hide();
		this._getElement(sTab).show();

		if (this._getElement("cardBenefitInfo") != undefined) {
			this._getElement("cardBenefitInfo").hide()
		}
		if (this._getElement("generalPaymentsList") != undefined) {
			this._getElement("generalPaymentsList").hide();
		}
		if (this._getElement("changeEasyPayInfoNotice") != undefined) {
			this._getElement("changeEasyPayInfoNotice").hide();
		}

		this._getElementList("chargePointNoticeText").hide();
		if (sTab != "chargedPointPayment" && this._getElement("chargePointAdditionalBenefit") != undefined) {
			this._getElementList("chargePointAdditionalBenefit").show();
		}

		switch (sTab) {
			case "naverPaymentsCard":
			case "naverPaymentsBank":
				if (this._getElement("changeEasyPayInfoNotice") != undefined && this._getElement("paymentsArea").visible()) {
					this._getElement("changeEasyPayInfoNotice").show();
				}
				break;
			case "generalPayments":
				if (this._getElement("generalPaymentsList") != undefined) {
					this._getElement("generalPaymentsList").show();
				}
				break;
			case "chargedPointPayment":
				this.initChargePointArea();
				break
		}
	},
	getInstallmentCodeSelectBox : function() {
		var elPaymentTab = $Element(this._getElement("root").query("._naverPaymentsCardTab"));
		if (elPaymentTab == undefined) {
			return this._htInstance["sbInstallmentCode"];
		}
		return (elPaymentTab.hasClass("on") && this._getSelectedEasyPayCardElement() != undefined) ? $Element($Element(this._getElement("root").query("._easyPayCardInfoArea")).query("select")) : this._htInstance["sbInstallmentCode"];
	},
	getCardCodeList : function() {
		return this._htInstance["sbCardCodeList"];
	},
	_getImagedNumberFormatHtml : function(nNumber) {
		var sNumber = nNumber + "";
		var sResult = "";
		for (var n = 0; n < sNumber.length; n++) {
			if (n > 0 && ((sNumber.length - n) % 3) == 0) {
				sResult += "<em class=\"comma\">,</em> ";
			}
			sResult += "<em class=\"n" + (parseInt(sNumber.charAt(n))) + "\">" + (parseInt(sNumber.charAt(n))) + "</em> ";
		}
		return sResult + "<span class=\"txt\">원</span>";
	},
	changeIndividualCustomUniqueCode : function(htEvent) {
		$ElementList(this._getElementList("individualCustomUniqueCodeInput", true)).show();
		this._getElement("individualCustomUniqueCodeSaved").hide();
		$A(this._getElement("root").queryAll("._overseaIndv")).forEach(function(v) {
			$Element(v).visible(true);
		});
		if (this._htInstance["chkIndividualCustomCode"] != undefined) {
			this._htInstance["chkIndividualCustomCode"].setChecked(false);
		}
	},
	changeCashReceiptInfo : function(htEvent) {
		$Element($$.getSingle("._cashReceiptTemplate")).show();
		var weReceiptLayer = $Element($$.getSingle("._cashReceiptInputArea"));
		$ElementList((weReceiptLayer).queryAll("input,select")).attr("disabled",false);

		if (this._getElement("socialNumberSecond") != undefined) {
			this._getElement("socialNumberSecond").attr("value", "");
		}

		this._getElement("cashReceiptInfoSaved").leave();
		this._resetElement();
	},
	setFdsUuid : function(sFdsUuid) {
		this._getElement("fdsUuid").attr("value", sFdsUuid);
	},
	setNaverToken : function(sNaverToken) {
		this._getElement("naverToken").attr("value", sNaverToken);
	},
	setNaverInitToken : function(sNaverInitToken) {
		this._getElement("naverInitToken").attr("value", sNaverInitToken);
	},
	getNaverInitToken : function() {
		return this._getElement("naverInitToken").attr("value");
	},
	setAuthentificationToken : function(sAuthentificationToken) {
		this._getElement("authentificationToken").attr("value", sAuthentificationToken);
	},
	setAuthentificationLevel : function(sAuthentificationLevel) {
		this._htInstance["authentificationLevel"] = sAuthentificationLevel;
	},
	getAuthentificationLevel : function(sAuthentificationLevel) {
		return this._htInstance["authentificationLevel"];
	},
	isSelectedEasyPayBankPayable : function (sPayMethod) {
		if (this._isEasyPayBank(sPayMethod)) {
			var elEasyPayBankElement = this._getSelectedEasyPayBankElement();
			var welEasyPayBankElement = $Element(elEasyPayBankElement);

			return !welEasyPayBankElement.hasClass("disabled");
		}

		return false;
	},
	isAllEasyBankUnderMaintenance : function (sPayMethod) {
		if (sPayMethod != undefined && sPayMethod == "CHARGED_POINT") {
			var welPaymentsBankTab = $Element(this._getElement("root").query("._chargedPointPaymentTab"));
			var welAllEasyBankUnderMaintenanceArea = welPaymentsBankTab.query("._allEasyBankUnderMaintenanceArea");
			return (welAllEasyBankUnderMaintenanceArea != undefined) && $Element(welAllEasyBankUnderMaintenanceArea).visible();
		} else {
			var welPaymentsBankTab = $Element(this._getElement("root").query("._naverPaymentsBank"));
			var welAllEasyBankUnderMaintenanceArea = welPaymentsBankTab.query("._allEasyBankUnderMaintenanceArea");
			return (welAllEasyBankUnderMaintenanceArea != undefined);
		}
	},
	_getSelectedEasyPayElement : function () {
		var elEasyPayElement;

		if (this._isOpenedCardTab()) {
			elEasyPayElement = this._getSelectedEasyPayCardElement();
		} else if (this._isOpenedBankTab()) {
			elEasyPayElement = this._getSelectedEasyPayBankElement();
		}

		return elEasyPayElement;
	},
	_getSelectedEasyPayCardElement : function () {
		var elEasyPayCardElement;
		var welPaymentsBankTab = $Element(this._getElement("root").query("._naverPaymentsCard"));

		$A(welPaymentsBankTab.queryAll("._payMeansClass")).forEach(function (v) {
			if ($Element(v).hasClass('selected')) {
				elEasyPayCardElement = v;
				$A.Break();
			}
		});

		return elEasyPayCardElement;
	},
	_getSelectedEasyPayBankElement : function () {
		var elEasyPayBankElement;
		var welPaymentsBankTab = $Element(this._getElement("root").query("._naverPaymentsBank"));

		$A(welPaymentsBankTab.queryAll("._payMeansClass")).forEach(function (v) {
			if ($Element(v).hasClass('selected')) {
				elEasyPayBankElement = v;
				$A.Break();
			}
		});

		return elEasyPayBankElement;
	},
	_getSelectedEasyPayCardCode : function () {
		var elEasyPayCardElement = this._getSelectedEasyPayCardElement();
		var sCardCode = elEasyPayCardElement.getAttribute("data-code");

		return sCardCode;
	},
	_getSelectedEasyPayBankCode : function () {
		var elEasyPayBankElement = this._getSelectedEasyPayBankElement();
		var sBankCode = elEasyPayBankElement.getAttribute("data-code");

		return sBankCode;
	},
	_getSelectedEasyPayCKey : function (sPayMethod) {
		var sAccountKey;
		if (this._isEasyPayCreditCard(sPayMethod)) {
			sAccountKey = this._getSelectedEasyPayCardElement().getAttribute("data-card-key");
		} else if (this._isEasyPayBank(sPayMethod)) {
			sAccountKey = this._getSelectedEasyPayBankElement().getAttribute("data-account-key");
		}
		return sAccountKey;
	},
	_getSelectedEasyPayBankbookCode : function () {
		return this._getSelectedEasyPayBankElement().getAttribute("data-pay-bankbook-code");
	},
	_getSelectedEasyPayCardType : function () {
		if (this._isOpenedCardTab() && this._getSelectedEasyPayCardElement()) {
			return this._getSelectedEasyPayCardElement().getAttribute("data-card-class-type");
		}
	},
	getEasyPayTextByPayMethod : function (sPayMethod) {
		var sEasyPayText;

		if (this._isEasyPayCreditCard(sPayMethod)) {
			sEasyPayText = "카드";
		} else if (this._isEasyPayBank(sPayMethod)) {
			sEasyPayText = "계좌";
		}

		return sEasyPayText;
	},
	isEasyPayRegistrationMethod : function (sPayMethod) {
		return this.isEasyPayBankRegistrationMethod(sPayMethod) || this.isEasyPayCardRegistrationMethod(sPayMethod);
	},
	isEasyPayBankRegistrationMethod : function (sPayMethod) {
		return sPayMethod == this._getOption("registrationMethodCodeMap")["BANK"];
	},
	isEasyPayCardRegistrationMethod : function (sPayMethod) {
		return sPayMethod == this._getOption("registrationMethodCodeMap")["CREDIT_CARD"];
	},
	getCurrentCreditCardForm : function () {
		return this._isOpenedCardTab() ? $Element(this._getElement("root").query("._naverPaymentsCard")) : $Element(this._getElement("root").query("._generalPayments"));
	},
	getCurrentBankForm : function () {
		return this._isOpenedBankTab() ? $Element(this._getElement("root").query("._naverPaymentsBank")) : $Element(this._getElement("root").query("._generalPayments"));
	},
	getCardBenefitInfo : function () {
		return this._isOpenedCardTab() ? $Element(this._getElement("root").query("._cardBenefitInfo")) : $Element(this._getElement("root").query("._generalPayments"));
	},
	getCardInstallmentPeriodClassCode : function () {
		var welCardInstallmentPeriod;
		if (this._isOpenedCardTab()) {
			welCardInstallmentPeriod = $Element(this._getElement("root").query("._naverPaymentsCard div.npay_selectbox"));
		} else {
			welCardInstallmentPeriod = $Element(this._getElement("root").query("._generalPayments"));
		}
		return welCardInstallmentPeriod.query("select.cardInstallmentPeriodClassCode").value;
	},
	_isOpenedCardTab : function () {
		var welPaymentTab = $Element(this._getElement("root").query("._naverPaymentsCardTab"));
		return (welPaymentTab != undefined && welPaymentTab.hasClass("on"));
	},
	_isOpenedBankTab : function () {
		var welPaymentTab = $Element(this._getElement("root").query("._naverPaymentsBankTab"));
		return (welPaymentTab != undefined && welPaymentTab.hasClass("on"));
	},
	_isOpenedChargedPaymentTab : function () {
		var welPaymentTab = $Element(this._getElement("root").query("._chargedPointPaymentTab"));
		return (welPaymentTab != undefined && welPaymentTab.hasClass("on")) && this._getElement("paymentsArea").visible();
	},
	togglePayEventInfo : function() {
		var welPayEventInfoHeader = $Element($$.getSingle(".benefit_fold_panel"));
		welPayEventInfoHeader.toggleClass("on");
	},
	_changePayEventInfo : function(paymentMeansCode) {
		if ($$.getSingle("._payEventHeader") == undefined) {
			return;
		}

		if (this._isEasyPay(paymentMeansCode)) {
			$A(this._getElement("root").queryAll("._payEvent_" + (this.getOption("easyCardCode").has(paymentMeansCode) ? "credit_card" : "bank"))).forEach(function(v) {
				$Element(v).show("inline-block");
			});
		}
	},
	openAuthentificationPopup : function(htPinPay) {
		var htUrls = this._getOption("urls");
		var sPageUrl = "";

		if (this._htInstance["authentificationLevel"] == "ATH002") {
			sPageUrl = htUrls["pay.password.authentification.popup.url"] + "&token_popup=" + this._getElement("naverToken").attr("value") + "&rurl=" + encodeURIComponent(htUrls["pay.authentification.return.url"] + this._makePinPayParam(htPinPay)) + "&surl=" + encodeURIComponent(htUrls["pay.authentification.return.url"] + "&cancel=true");
		} else {
			sPageUrl = htUrls["pay.ars.authentification.popup.url"] + "&token=" + this._getElement("naverToken").attr("value") + "&return_url=" + encodeURIComponent(htUrls["pay.authentification.return.url"] + this._makePinPayParam(htPinPay));
		}

		this._openPopupWithReferer(sPageUrl);
	},
	_makePinPayParam : function(htPinPay) {
		return (htPinPay == undefined) ? "" : ("&isPin=" + htPinPay["isPin"] + "&pinNo=" + htPinPay["pinNo"] + "&isPinPayMember=" + htPinPay["isPinPayMember"]);
	},
	openNaverPayAuthPopup : function(we) {
		window.open('',this._htInstance["naverPayAuthTarget"],'width=300,height=460,scrollbar=yes').focus();
	},
	callbackNaverPayAuthentification : function(bCanceled, sAuthType, pinNo, isPin, isPinPayMember) {
		if (bCanceled != undefined && bCanceled) {
			alert("인증이 취소되었습니다.");
			return;
		}

		if (sAuthType != undefined && sAuthType == "INIT_SET") {
			if (nmp.front.order.order_sheet.macos == undefined && this._getOption("orderClass") == "CHECKOUT" && !this._isEasyPay(this.getPayMethod()) && nmp.front.order.order_sheet.checkout != undefined) {
				nmp.front.order.order_sheet.checkout.orderApplyWithAuthentification();
				return;
			}

			var htPinPay = undefined;
			if (isPin != undefined && isPin) {
				htPinPay = {"pinNo" : pinNo, "isPin" : isPin, "isPinPayMember" : isPinPayMember};
			}
			nmp.front.order.order_sheet.integration_cart.orderApplyWithAuthentification(htPinPay);
			return;
		}

		if (nmp.front.order.order_sheet.macos == undefined && this._getOption("orderClass") == "CHECKOUT" && !this._isEasyPay(this.getPayMethod()) && nmp.front.order.order_sheet.checkout != undefined) {
			nmp.front.order.order_sheet.checkout.orderApply();
		} else {
			nmp.front.order.order_sheet.integration_cart.orderApply(pinNo, isPin, isPinPayMember);
		}
	},
	_selectPaymentMethod : function (sPaymentMethod) {
		if (this._isEasyPay(sPaymentMethod) || sPaymentMethod == "CHARGED_POINT") {
			$A(this._htInstance["aPayMeansClass"]).forEach(function (v) {
				var welInput = $Element(v.getInput());
				if (welInput.attr("value") != "POINT") {
					v.setChecked(true);
					$A.Break();
				}
			});
		} else {
			if (sPaymentMethod == "VIRTUAL_ACCOUNT") {
				sPaymentMethod = "SKIP";
			}
			$A(this._htInstance["aPayMeansClass"]).forEach(function (v) {
				var welInput = $Element(v.getInput());
				if (welInput.attr("value") == sPaymentMethod) {
                    v.setChecked(true);
                    $A.Break();
                }
            });

			if (sPaymentMethod != "POINT") {
				this._setPaymentTabChecked("generalPayments");
            }
        }

		if (sPaymentMethod == "CHARGED_POINT") {
			this._setPaymentTabChecked(sPaymentMethod);
		}
	},
	_isEasyPay : function (payMethod) {
		return (this._isEasyPayCreditCard(payMethod) || (this._isEasyPayBank(payMethod)));
	},
	_isEasyPayCreditCard : function (payMethod) {
		return this._getOption("easyCardCode").has(payMethod);
	},
	_isEasyPayBank : function (payMethod) {
		return this._getOption("easyBankCode").has(payMethod);
	},
	showLayerPayEvent : function(htEvent, sPayMethodType, sActionType, nAmount) {
		var htPayEvent = $H({"amount" : nmp.front.order.ui.setThousandComma(nAmount)});

		switch (sPayMethodType) {
			case "CARD":
				htPayEvent.add("payMethod", "카드");
				break;
			case "ACCOUNT":
				htPayEvent.add("payMethod", "계좌");
				break;
		}

		switch (sActionType) {
			case "REGISTER":
				htPayEvent.add("action", "등록");
				break;
			case "USE":
				htPayEvent.add("action", "사용");
				break;
		}

		var elLayerHtml = $Template(this._getElement("payEventLayerTemplate").html()).process(htPayEvent.$value());
		var welPayEventLayer = this._getElement("payEventLayer");

		$Element(welPayEventLayer.query("._content")).html(elLayerHtml);

		var baseElement = htEvent.element;
		nmp.layer.show(welPayEventLayer, baseElement, {
			"sPosition" : "outside-bottom",
			"sAlign" : "left",
			"nTop" : 0,
			"bAuto" : false
		});
	},
	openCardBenefitsPopup : function() {
		var htCreditCardInfos = $Json(this._getOption("creditCardInfos")).$value();
		var aEventInfos = $A();
		$H(htCreditCardInfos).forEach(function(v) {
			if (v["eventinfo"].length > 0) {
				$A(v["eventinfo"]).forEach(function(o) {
					aEventInfos.push(o);
				});
			}
		});

		var sUrl = "/orderSheetPopup/cardBenefits";
		var htParams = {"cardEvents" : $Json(aEventInfos.$value()).toString(), "cardFreeInstallments" : $Json(nmp.front.order.order_sheet.integration_cart._getOption("freeInterests")).toString()};
		nmp.openPopup(sUrl,["width=450", "height=300", "scrollbars=yes"], "cardBenefits", htParams);
	},
	registerNaverPayPassword : function(htPinPay) {
		var htUrls = this._getOption("urls");
		var sPageUrl = htUrls["pay.password.init.popup.url"]  + "&token_popup=" + this._getElement("naverInitToken").attr("value") + "&rurl=" + encodeURIComponent(htUrls["pay.authentification.return.url"]) + encodeURIComponent("&authType=INIT_SET" + this._makePinPayParam(htPinPay)) + "&surl=" + encodeURIComponent(htUrls["pay.authentification.return.url"]) + encodeURIComponent("&cancel=true&authType=INIT_SET");
		this._openPopupWithReferer(sPageUrl);
	},
	_openPopupWithReferer : function(sPageUrl) {
		var oNav = jindo.$Agent().navigator();
		var sUserAgent = navigator.userAgent;
		if ((oNav.ie && oNav.version < 10) || sUserAgent.indexOf("Edge") > 0) {
			var elNaverPayAuthPopup = this._getElement("naverPayAuthPopup").$value();
			this._htInstance["naverPayAuthTarget"] = "naverPayAuth" + Math.floor((Math.random() * 10000) + 1);

			elNaverPayAuthPopup.href = sPageUrl;
			elNaverPayAuthPopup.target = this._htInstance["naverPayAuthTarget"];
			elNaverPayAuthPopup.click();
		} else {
			if (this._htInstance["oAuthPopup"] == undefined || this._htInstance["oAuthPopup"].closed) {
				this._htInstance["oAuthPopup"] = window.open("", "naverAuthPopup", "width=290, height=496");

				if (this._htInstance["oAuthPopup"]) {
					this._htInstance["oAuthPopup"].location.href = sPageUrl;
				} else {
					alert("팝업이 차단되었습니다. 팝업 설정을 허용하여 주십시요.");
				}
			} else {
				this._htInstance["oAuthPopup"].location.href = sPageUrl;
			}
		}
	},
	initializePayMethod : function(sPayMethod) {
		if ((this._htInstance["payMethodInitialized"] == undefined || this._htInstance["payMethodInitialized"][sPayMethod] == undefined) && nmp.front.order.order_sheet.integration_cart.isInitialized()) {
			this._htInstance["payMethodInitialized"] = this._htInstance["payMethodInitialized"] || {};
			this._htInstance["payMethodInitialized"][sPayMethod] = true;

			switch (sPayMethod) {
				case "CREDIT_CARD":
					nmp.front.order.order_sheet.integration_cart.initializeGeneralCreditCard();
					break;
				case "BANK":
					nmp.front.order.order_sheet.integration_cart.initializeGeneralBank();
					break;
			}
		}
	},
	showAllPayments : function() {
		this._setOption("simplePaymentInfo", false);
		this._getElement("simplePaymentsArea").hide();
		this._getElement("simplePaymentsArea").leave();
		$ElementList(this._getElementList("paymentsArea", true)).show();
		if (this._getElement("changeEasyPayInfoNotice") != undefined) {
			this._getElement("changeEasyPayInfoNotice").show();
		}
	},
	changeBeforePayMethod : function() {
		this.changePaymentByPayMethod(this._htInstance["currentPaymethod"], true);
	},
	confirmCheckPayLimit : function() {
		if (confirm('설정하신 결제 한도를 초과하여 결제가 불가능하며,\n보안설정 메뉴에서 한도 해제/변경 후 결제 가능합니다.\n보안설정 메뉴로 이동하시겠습니까?')) {
			this.openPayLimitConfig();
		}
	},
	openPayLimitConfig : function() {
		var htUrls = this._getOption("urls");
		var sPageUrl = htUrls["pay.limit.conf.url"];

		var oAuthPopup = window.open(sPageUrl);

		if (oAuthPopup) {
			oAuthPopup.focus();
		} else {
			alert("팝업이 차단되었습니다. 팝업 설정을 허용하여 주십시오.");
		}
	},
	toggleCompanyCardNotice : function(nMonth) {
		if (this._getElement("companyCardNotice") != undefined) {
			if (nMonth != undefined && nMonth > 1) {
				this._getElementList("companyCardNotice").show();
			} else {
				this._getElementList("companyCardNotice").hide();
			}
		}
	},
	hideNotice : function(htEvent, sNoticeClass) {
		$Element(this._getElement("root").query(".dimmed")).leave();
		$Element(this._getElement("root").query("." + sNoticeClass)).leave();
	},
	checkDeliveryAddressInsertable : function(htEvent) {
		if (this._getOption("isDeliveryAddressAgreed") == undefined || this._getOption("isDeliveryAddressAgreed") == false || htEvent == null || htEvent.element == null || htEvent.element.checked == false) {
			return;
		}

		nmp.requestAjax("/orderSheetAjax/checkDeliveryAddressInsertable", {}, {
			method : "get",
			onload : $Fn(nmp.front.order.order_sheet.callbackDeliveryAddressInsertable, this).bind(htEvent.element.parentElement.id),
			onerror : function(res) {
			}
		});
	},
	callbackDeliveryAddressInsertable : function(sParentElementId, result) {
		if (result != null && result.bSuccess == true && result.htReturnValue.result == false && this._htInstance[sParentElementId] != undefined) {
			alert(result.htReturnValue.resultMessage);
			this._htInstance[sParentElementId].setChecked(false);
		}
	},
	_getPointStatusAndAmount : function () {
		if (this._getOption("isAdult") == undefined || this._getOption("isAdult") == true) {
			this._getCardPointStatusAndAmount();
		} else {
			this._getPointChargeInfo();
		}
	},
	_getCardPointStatusAndAmount : function() {
		if (this._getElement("cardPointLoading") == null) {
			return;
		}

		var htUrls = this._getOption("urls");
		var sCardPointUrl = htUrls["member.cardpoint.amount.pc.url"] + "?jsonp=nmp.front.order.order_sheet.callbackCardPointStatusAndAmount";
		setTimeout($Fn(this.callbackCardPointStatusAndAmount,this).bind(), 3000);
		nmp.requestAjax(sCardPointUrl, undefined, {
			method: "get",
			type: "jsonp",
			onload: $Fn(function (res) {
			}, this).bind(),
			onerror: $Fn(function (htResult) {
			}, this).bind()
		});
	},
	callbackCardPointStatusAndAmount : function(htResponse) {
		this._getElement("cardPointLoading").hide();
		if (htResponse == undefined && this._htInstance["cardPointResult"] == undefined) {
			this._htInstance["cardPointResult"] = false;
			this._getElement("cardPointInputArea").hide();
			this._getElement("cardPointFailed").show();
		} else if (this._htInstance["cardPointResult"] == undefined) {
			this._htInstance["cardPointResult"] = true;
			if (htResponse.apiSuccess != undefined && htResponse.body != undefined && htResponse.apiSuccess) {
				if (htResponse.body.hasAgree != undefined && htResponse.body.hasAgree) {
					this._getElement("totalCardPointAmount").attr("value", htResponse.body.point);
					this._getElement("cardPointInputArea").show();
					this._getElement("convertCardPointBtn").removeClass("disable");
					this._getElement("convertCardPointBtn").attr("disabled", "");
				} else {
					this._getElement("cardPointInputArea").hide();
					this._getElement("cardPointFailed").hide();
					this._getElement("cardPointCheck").show();
					this._getElement("convertCardPointBtn").addClass("disable");
					this._getElement("convertCardPointBtn").attr("disabled", "disabled");
				}
			}
		}
	},
	showCardPointConversionPopup : function(htEvent) {
		var htUrls = this._getOption("urls");
		var sCardPointConversionUrl = htUrls["member.cardpoint.callback.pc.url"] + "nmp.front.order.order_sheet.callbackCardPointConversion";
		nmp.openPopup(sCardPointConversionUrl, ["width=440", "height=520"], "cardPointConversion");
	},
	callbackCardPointConversion : function() {
		nmp.requestAjax("/orderSheetAjax/pointBalance", {}, {
			method : "get",
			onload : $Fn(function(res) {
				if (res != undefined && res.bSuccess && res.htReturnValue != undefined && res.htReturnValue.balance != undefined) {
					nmp.front.order.order_sheet.reloadCardPointArea();
					nmp.front.order.order_sheet._getElement("pointBalance").html(nmp.front.order.ui.setThousandComma(res.htReturnValue.balance));
					nmp.front.order.order_sheet._setOption("remainNaverMileage", res.htReturnValue.balance);

					nmp.front.order.order_sheet._getElement("mileageUseAmountInput").attr("disabled", false);
					nmp.front.order.order_sheet._getElement("pointAllUseButton").attr("disabled", false);
					nmp.front.order.order_sheet._getElement("pointAllUseButton").removeClass("disable");
				}
			}, this).bind(),
			onerror : function(res) {
				window.location.reload();
			}
		});
	},
	reloadCardPointArea : function(htEvent) {
		this._htInstance["cardPointResult"] = undefined;
		this._getElement("cardPointInputArea").hide();
		this._getElement("cardPointFailed").hide();
		this._getElement("cardPointLoading").show("inline-block");
		this._getCardPointStatusAndAmount();
	},
	_getPointChargeInfo : function () {
		var htUrls = this._getOption("urls");
		var sPointChargeUrl = htUrls["point.charge.pc.url"] + "?jsonp=nmp.front.order.order_sheet.callbackPointChargeInfo";
		nmp.requestAjax(sPointChargeUrl, undefined, {
			method : "get",
			type : "jsonp",
			onload : $Fn(function (res) {
			}, this).bind(),
			onerror : $Fn(function (htResult) {
			}, this).bind()
		});
	},
	callbackPointChargeInfo : function (htResponse) {
		if (htResponse && htResponse.apiSuccess) {
			var sMessage = this._convertRawPointChargeMessage(htResponse.body.message, htResponse.body.logoUrl, "세븐일레븐");
			var elLayerHtml = $Template(this._getElement("pointChargeLayerTemplate").html()).process({"message" : sMessage, "detailLink" : htResponse.body.detailLink});
			this._getElement("pointChargeArea").appendHTML(elLayerHtml);
		} else if (htResponse.apiSuccess == false) {
			this._getElement("pointChargeArea").hide();
		}
	},
	_convertRawPointChargeMessage : function (sMessage, sLogoUrl, sTargetWord) {
		var sImgHtml = '<img src="logoUrl" width="71" height="12" alt="편의점충전">';
		var sImgHtmlConverted = sImgHtml.replace("logoUrl", sLogoUrl);
		return sMessage.replace(sTargetWord, sImgHtmlConverted)
	},
    showDeliveryPlaceNameList: function (htEvent) {
        var welDeliveryPlaceNameListArea = this._getElement("deliveryPlaceNameListArea");
        if(welDeliveryPlaceNameListArea.visible()){
            nmp.layer.hide(welDeliveryPlaceNameListArea);
            return ;
        }
        
        var welAllAddressArea = this._getElement("allAddressArea");
        var elDeliveryPlaceName = welAllAddressArea.query("input[name='deliveryAddress.deliveryPlaceName']");

        nmp.layer.show(welDeliveryPlaceNameListArea, elDeliveryPlaceName, {
            "sPosition": "outside-bottom",
            "sAlign": "left",
            "nTop": 0,
            "bAuto": false
        });

        htEvent.stopBubble();
        elDeliveryPlaceName.focus();
    },
    setDeliveryPlaceName: function (htEvent, sPlaceName) {
        var welAllAddressArea = this._getElement("allAddressArea");
        var elDeliveryPlaceName = welAllAddressArea.query("input[name='deliveryAddress.deliveryPlaceName']");

        if (elDeliveryPlaceName != null) {
            elDeliveryPlaceName.value = sPlaceName;

            var welDeliveryPlaceName = $Element(elDeliveryPlaceName);
            welDeliveryPlaceName.fireEvent("focus");
            welDeliveryPlaceName.fireEvent("blur");

            nmp.layer.hide();
        }
    },
    toggleMoreRecentlyDeliveryAddresses: function (htEvent) {
        var welRecentDeliBox = $Element(htEvent.element.parentElement);

        if (welRecentDeliBox != null) {
            welRecentDeliBox.toggleClass("unfold");
        }
    },
	_getScrollTop : function() {
		return document.body.scrollTop || document.documentElement.scrollTop;
	},
	getMinimumInstallmentPayAmount : function() {
		return ((this.getPayMethod() == "CREDIT_CARD" && this._htInstance["sbCardCodeList"].getValue() == "CH") || this.getPayMethod() == "CH") ? 10000 : 50000;
	},
	showPointChargePopup : function(htEvent) {
		var sUrl = this._getOption("urls")["charge.pay.url"] + encodeURIComponent(this._getOption("urls")["order.ordersheet.url"] + "closePopup") + "&CLOSETYPE=D";
		nmp.openPopup(sUrl,["width=500", "height=660"], "pointChargePopup", null, true);
	},
	getSuffixUrl : function() {
		if (this._getOption("orderClass") == "INTEGRATION_CART") {
			return "/integrationCart";
		}else{
			return "/checkout";
		}
	},
	isEasyPaySelected : function() {
		return this._isEasyPay(this.getPayMethod());
	},
	_getProductOrdersByDeliveryGroup : function(id) {
		var orderProducts = [];
		var snapshot = this._getOption('orderSnapshot');
		if (snapshot.orderProducts) {
			snapshot.orderProducts.map(function(orderProduct) {
				if (orderProduct.deliveryGroup.id == id) {
					orderProducts.push(orderProduct);
				}
			});
		}
		return orderProducts;
	},
	showHopeDeliveryFee : function (htEvent, id) {

		var hopeDeliveryFeeTexts = [];
		var orderProducts = this._getProductOrdersByDeliveryGroup(id);
		orderProducts.map(function(orderProduct) {
			if (orderProduct.hopeDeliveryInfoJson) {
				var hopeDeliveryInfo = JSON.parse(orderProduct.hopeDeliveryInfoJson);
				var text = hopeDeliveryInfo.region + ' ' + (hopeDeliveryInfo.additionalFee == 0 ? '무료배송' : (nmp.utility.convertNumberFormat(hopeDeliveryInfo.additionalFee) + '원')) + ' 예상';
				if (hopeDeliveryFeeTexts.join(':').indexOf(text) == -1) {
					hopeDeliveryFeeTexts.push(text);
				}
			}
		});

		var elLayerHtml = $Template(this._getElement("hopeDeliveryFeeLayerTemplate").html()).process({hopeDeliveryFeeTexts: hopeDeliveryFeeTexts});

		var hopeDeliveryFeeLayer = this._getElement("hopeDeliveryFeeLayer");
		$Element(hopeDeliveryFeeLayer.query("._content")).html(elLayerHtml);
		nmp.layer.show(hopeDeliveryFeeLayer, htEvent.element, {
			"sPosition" : "outside-bottom",
			"sAlign" : "center",
			"nTop" : 8,
			"bAuto" : false
		});
	},
	notifyCardBenefitInfo : function() {
		if (this._getElement("cardBenefitInfo") == undefined) {
			return;
		}

		var bIsAllHidden = $A(this._getElement("cardBenefitInfo").queryAll("li")).every(function(v) {
			return $Element(v).css("display") == "none";
		});

		var sPayMethod = this.getPayMethod();
		if (!this._isEasyPayCreditCard(sPayMethod) || this.isEasyPayCardRegistrationMethod(sPayMethod)) {
			bIsAllHidden = true;
		}

		bIsAllHidden ? this._getElement("cardBenefitInfo").hide() : this._getElement("cardBenefitInfo").show();

		if (!bIsAllHidden) {
			var aNoticeItems = this._getElement("cardBenefitInfo").queryAll("li");
			var bIsFirst = true;
			$A(aNoticeItems).forEach(function(v) {
				if ($Element(v).visible() && bIsFirst) {
					$Element(v).css("margin-top", "0px");
					bIsFirst = false;
				} else {
					$Element(v).css("margin-top", "10px");
				}
			});
		}
	},
	getFlickComponent : function (sPayMethod) {
		return (sPayMethod == "Card") ? this._htInstance["easyPayCardFlicking"] : this._htInstance["easyPayBankFlicking"];
	},
    closeDiscountOptimizationFailHelp : function (){
        var helpLayer = this._getElement("discountOptimizationFailHelpLayer");
        if(helpLayer != undefined) {
            helpLayer.hide();
        }
    },
	clearPoint : function () {
		if ($$.getSingle("input[name='payAmounts.NAVER_CASH']") != undefined) {
			$$.getSingle("input[name='payAmounts.NAVER_CASH']").value = 0;
			this.calculateTotalPrice();
			this.showClearPointButton();
		}
	},
	showClearPointButton : function () {
		var welParent = $Element($$.getSingle("input[name='payAmounts.NAVER_CASH']").parentElement);
		var welClearPoint = $Element(welParent.query('._clearPoint'));
		if(welClearPoint != undefined){
			if (this._getMileageAmount() <= 0) {
				welParent.removeClass("type_delete");
				welClearPoint.hide();
			} else {
				welParent.addClass("type_delete");
				welClearPoint.show();
			}
		}
	},
	showLayer : function (sLayer) {
		var elLayer = this._getElement(sLayer + "Layer");
		elLayer.show();

		var welLayer = $Element($$.getSingle("._" + sLayer));
		welLayer.css("top", (this._getScrollTop() + (window.innerHeight - welLayer.height()) / 4) + "px");
	},
	hideAdultAuthenticationLayer : function (bAlert) {
		if (bAlert) {
			alert("관계법령에 따라 19세 이상 본인인증을 거쳐야 구매하실 수 있습니다.");
			nmp.front.order.order_sheet.integration_cart._htInstance["isProgress"] = false;
		}

		var elAdultAuthenticationLayer = this._getElement("adultAuthenticationLayer");
		elAdultAuthenticationLayer.hide();
	},
	openAdultAuthenticationPopup : function (we, sAuthMethod) {
		var sUrl = this._getOption("urls")["member.auth.popup.url"];
		var htData = {
			"authMethod" : sAuthMethod,
			"rUrl" : this._getOption("urls")["adult.authentication.return.url"]
		};

		nmp.openPopup(sUrl + "?" + $H(htData).toQueryString(), ["width=500", "height=660", "scrollbars=yes"], "openAdultAuthPopup", null, true);
	},
	callbackAdultAuthentication : function (sToken, sAuthMethod) {
		this.hideAdultAuthenticationLayer(false);

		this._htInstance["adultAuthenticationToken"] = sToken;
		this._htInstance["adultAuthenticationMethod"] = sAuthMethod;
		nmp.front.order.order_sheet.integration_cart.createTempOrderAfterValidate();
	},
	_isCreditCardInstallmentUnavailable : function() {
		return this._getOption("creditCardInstallmentUnavailableList").some($Fn(function(v) {
			return ((this._htInstance["sbCardCodeList"].getValue() == v) || (this.getPayMethod() == v));
		}, this).bind());
	},
	_isEqualCookieValue : function (cookieId, cookieValue){
		var cookie = jindo.$Cookie();
		var storedCookieValue = cookie.get(cookieId);
		if (storedCookieValue && storedCookieValue == cookieValue) {
			return true;
		} else {
			return false;
		}
	},
	_getCurrentSkipPayMethod : function () {
		if (this._htInstance["skipPaymentMethodSelectBox"] != undefined) {
			return this._htInstance["skipPaymentMethodSelectBox"].getValue();
		}
	},
	selectSkipPayMethod : function (sSkipPaymentMethod) {
		var nIndex = 0;
		$A(this._htInstance["skipPaymentMethodSelectBox"].getOptions()).forEach(function (elSkipPaymentMethod, i, a) {
			if (elSkipPaymentMethod.value == sSkipPaymentMethod) {
				nIndex = i;
				$A.Break();
			}
		});

		this._htInstance["skipPaymentMethodSelectBox"].setSelectedIndex(nIndex);
	},
	changePayNextType : function (we, sPayNextType) {
		if (we != undefined) {
			sPayNextType = we.element.value;
		}

		if (sPayNextType == "VIRTUAL_ACCOUNT") {
			this.changePayment(we);
		} else {
			this.changePaymentByPayMethod("SKIP");
		}
	},
	_changeSkipPayMethodView : function () {
		var sSkipPayMethod = this._getCurrentSkipPayMethod();

		this._getElementList("skipPayMethodInfo").hide();

		var elSkipPayMethodInfo = this._getElement("skip_" + sSkipPayMethod.toLowerCase() + "_info");
		if (sSkipPayMethod == "VIRTUAL_ACCOUNT") {
			$A(this._getElement("paymentInfoArea").queryAll(".virtualAccount")).forEach(function (v) {
				$Element(v).show();
			});

			if (this._getElement("eventBannerAreaCvsCharge") != undefined) {
				this._getElement("eventBannerAreaCvsCharge").show();
			}
		} else {
			if (elSkipPayMethodInfo != undefined) {
				elSkipPayMethodInfo.show();
			}
		}

		if (this._getElement("skip_form") != undefined) {
			this._getElement("skip_form").show();
		}
	},
	changeSkipBank : function () {
		this.selectSkipPayMethod("BANK");
		this.changePayNextType(null, "BANK");
	},
	showLayerPayNextGuide : function (htEvent, bIsEasyBooking) {
		var elLayerHtml = $Template(this._getElement("payNextGuideLayerTemplate").html()).process({
			"isEasyBooking" : bIsEasyBooking
		});
		var welPayNextGuideLayer = this._getElement("payNextGuideLayer");
		$Element(welPayNextGuideLayer.query("._content")).html(elLayerHtml);

		nmp.layer.show(welPayNextGuideLayer, htEvent.element, {
			"sPosition" : "outside-bottom",
			"sAlign" : "left",
			"nTop" : 5,
			"bAuto" : false
		});
	},
	showSkipLayer : function (sPayMethod, bAddClassTypeLayer) {
		var bMatchCookieValue = this._isEqualCookieValue("orderSheetSkipLayer" + sPayMethod, "true");
		if (!bMatchCookieValue && this._getElement("skipLayer" + sPayMethod) != undefined && (this._htInstance[("bCloseSkipLayer" + sPayMethod)] == undefined || this._htInstance[("bCloseSkipLayer" + sPayMethod)] == false)) {
			if (bAddClassTypeLayer) {
				this._getElement("skipLayer" + sPayMethod).addClass("type_later");
			} else if (this._getElement("skipLayer" + sPayMethod).hasClass("type_later")) {
				this._getElement("skipLayer" + sPayMethod).removeClass("type_later");
			}

			this._getElement("skipLayer" + sPayMethod).show();

			if (this._getElement("toolTipEvent" + sPayMethod) != undefined) {
				this._getElement("toolTipEvent" + sPayMethod).hide();
			}
			return true;
		}

		return false;
	},
	closeBtnOfSkipLayer : function (htEvent, sPayMethod) {
		this._getElementList("skipLayers").hide();

		if (this._getElement("skipLayer" + sPayMethod) != undefined) {
			this._htInstance[("bCloseSkipLayer" + sPayMethod)] = true;
		}

		if (this.getPayMethod() == "VIRTUAL_ACCOUNT") {
			$A($$(".virtualAccount")).forEach(function (v, i, a) {
				$Element(a[i]).show();
			});
		}
	},
	closeBtnOfSkipLayerDuringFewDate : function (htEvent, sPayMethod) {
		var oCookie = jindo.$Cookie();
		oCookie.set("orderSheetSkipLayer" + sPayMethod, "true", 7);
		this.closeBtnOfSkipLayer(htEvent, sPayMethod);
	},
	showToolTipEvent : function (sPayMethod) {
		if (this._getElement("toolTipEvent" + sPayMethod) != undefined && (this._htInstance[("bCloseToolTipEvent" + sPayMethod)] == undefined || this._htInstance[("bCloseToolTipEvent" + sPayMethod)] == false)) {
			this._getElement("toolTipEvent" + sPayMethod).show("inline-block");
		}
	},
	closeToolTipEvent : function (htEvent, sPayMethod) {
		if (this._getElement("toolTipEvent" + sPayMethod) != undefined) {
			this._getElement("toolTipEvent" + sPayMethod).hide();
			this._htInstance[("bCloseToolTipEvent" + sPayMethod)] = true;
		}
	},
	/* 오픈 뱅킹 동의 레이어 관련 로직 */
	hideOpenbankingAgreeLayer : function (htEvent, bProceedAccount) {
		var elLayer = this._getElement("openbankingAgreeLayer");
		elLayer.hide();

		nmp.front.order.order_sheet.integration_cart._htInstance["isProgress"] = false;

		if (bProceedAccount == "true") {
			this._htInstance["isOpenBankAgreed"] = true;
			this.account();
		}
	},
	showOpenbankingAgreeLayer : function () {
		if (this._htInstance["isOpenBankAgreed"] == undefined || this._htInstance["isOpenBankAgreed"] == false) {
			return (this._isEasyPayBank(this.getPayMethod()) && !this._getOption('isOpenBankAgreed'));
		} else {
			return false;
		}
	},
	getUsePointAllYn : function () {
		if (this._htInstance["usePointAllCheckbox"]) {
			return this._htInstance["usePointAllCheckbox"].getChecked();
		}
		return;
	},
	isUseAllPointChecked : function () {
		var elUsePointAllCheckbox = this._getElement("root").query("input[name=usePointAllCheckbox]");
		if (elUsePointAllCheckbox && elUsePointAllCheckbox.checked == true) {
			return true;
		}
		return false;
	},
	useAllSubSettleOnCheckEvent : function () {
		if (this.isUseAllPointChecked()) {
			if (this._getTotalPayAmount() > 0) {
				this.useAllSubSettle();
			}
			this._setOption("usePointAllYn", true);
		} else {
			this._setOption("usePointAllYn", false);
		}
	},
	_getTotalPayAmount : function () {
		var elCalculationTargetList = this._getElementList("calculationDiscountTarget", true);
		var nTotalDiscountPrice = 0;
		var nTotalAccountPrice = 0;

		if (this._htInstance["summary"] != undefined) {
			nTotalAccountPrice = this._htInstance["summary"]["summary"]["orderAmount"] + this._htInstance["summary"]["summary"]["deliveryFeeAmount"] + (this._htInstance["summary"]["summary"]["discountAmountByType"]["deliveryDiscount"] || 0);
		} else {
			nTotalAccountPrice = this.getOrderSnapshot().productsPayAmount + this.getOrderSnapshot().totalDiscountAmount + this.getOrderSnapshot().deliverysPayAmount;
		}

		for (var i = 0; i < elCalculationTargetList.length; i++) {
			var elDiscountElement = elCalculationTargetList[i];
			if (elDiscountElement.value != "" && isNaN(elDiscountElement.value.replace(/[,]/g, "")) == false && (elDiscountElement.name.indexOf("NAVER_CASH") == -1)) {
				nTotalDiscountPrice += parseInt(elDiscountElement.value.replace(/[,]/g, ""), 10);
			}
		}

		return nTotalAccountPrice - nTotalDiscountPrice;
	},
	isChargePointPaymentAvailable : function (bCheckBankMaintenance) {
		var welPaymentTab = $Element(this._getElement("root").query("._chargedPointPaymentTab"));

		if (bCheckBankMaintenance != true) {
			return (welPaymentTab != undefined);
		}

		return (welPaymentTab != undefined && !this.isAllEasyBankUnderMaintenance())
	},
	isLimitChargePointAmount : function () {
		var elLimitChargePointAmountGuide = this._getElement("limitChargePointAmountGuide");
		return this.getPayMethod() == "CHARGED_POINT" && elLimitChargePointAmountGuide != undefined && elLimitChargePointAmountGuide.visible() && this.getGeneralPayAmount() > 500000;
	},
	initChargePointArea : function (bCheckPayMethod) {
		if ((bCheckPayMethod == true && this.getPayMethod() != "CHARGED_POINT") || !this.isChargePointPaymentAvailable(false)) {
			return;
		}

		if (this._getElement("chargedPointBankList") != undefined && this._getElement("chargedPointBankList").query(".account_selected") == undefined) {
			this.selectFirstPayableChargeAccount();
		}

		if (this._getOption("remainChargedPoint") >= this.getGeneralPayAmount()) {
			this.revalidateChargePointArea(true);
			return;
		}

		this.revalidateChargePointArea(false);

		if(this.isAllEasyBankUnderMaintenance()){
			return;
		}

		var waChargeAmounts = oOrderSheetUtil.findAllAvailableChargeAmounts(this.getGeneralPayAmount() - this._getOption("remainChargedPoint"), this._getOption("remainChargeLimit"));

		var nSelectedAmount = waChargeAmounts.get(0);
		if (this._htInstance["chargeAmountSelectBox"] != undefined) {
			var nBeforeMinChargePointAmount = parseInt((this._htInstance["chargeAmountSelectBox"].getOptions()[0].value).replace(/[,]/g, ""));
			if (nSelectedAmount == nBeforeMinChargePointAmount && this._htInstance["chargeAmountSelectBox"].getSelectedIndex() != 0) {
				var nAmount = parseInt(this._htInstance["chargeAmountSelectBox"].getValue().replace(/[,]/g, ""));
				if (waChargeAmounts.has(nAmount)) {
					nSelectedAmount = nAmount;
				}
			}
		}
		this._getElement("chargeAmountSelectBoxArea").empty();

		var elLayerHtml = $Template(this._getElement("selectChargeAmountTemplate").html()).process({"chargeAmounts" : waChargeAmounts.$value(), "selectedChargeAmount" : nSelectedAmount});
		this._getElement("chargeAmountSelectBoxArea").appendHTML(elLayerHtml);
		this._htInstance["chargeAmountSelectBox"] = new jindo.SelectBox(jindo.$("chargeAmountSelectBox"));

		// jindo selectbox 설정하게되면 value="" 사용이 불가능해서 임의로 재지정
		$A(this._getElement("chargeAmountSelectBoxArea").queryAll("._selectBoxDefault")).forEach(function (v) {
			v.value = "";
		});

		$A(this._getElement("chargeAmountSelectBoxArea").queryAll(".selectbox-source")).forEach(function (v) {
			$Element(v).hide();
		});

		// close 커스텀 이벤트 핸들링 (최소, 최대 문구 제거)
		this._htInstance["chargeAmountSelectBox"].attach("close", function(oCustomEvent) {
			nmp.front.order.order_sheet.setChargeAmountSelectBoxLabel();
		});

		nmp.front.order.ui.initializeEventDeligator(this._getElement("chargeAmountSelectBoxArea", true), this);
		this._htInstance["chargeAmountSelectBox"].getLabelElement().innerText = this._htInstance["chargeAmountSelectBox"].getValue() + "원";
	},
	revalidateChargePointArea : function (bSufficient) {
		if (bSufficient) {
			if (this.getPayMethod() == "CHARGED_POINT") {
				this._getElementList("chargePointSufficient").show("block");
				this._getElementList("chargePointInsufficient").hide();

				this.toggleChargeBenefitPoint(false);
				if (this._getOption('isNaverBankbookRecentCharged')) {
					this.toggleChargeBenefitPoint(true);
				}
			}
		} else {
			if (this.getPayMethod() == "CHARGED_POINT") {
				this._getElementList("chargePointSufficient").hide();
				this._getElementList("chargePointInsufficient").show();

				this.toggleChargeBenefitPoint(false);
				var welSelectedAccount = this._getSelectedChargeBankElement();
				if (welSelectedAccount != undefined && welSelectedAccount.attr("data-pay-bankbook") == "true") {
					this.toggleChargeBenefitPoint(true);
				}

				if (this.isAllEasyBankUnderMaintenance()) {
					this._getElementList("chargePointNoticeText").hide();
				}
			}
		}
	},
	toggleChargePointBankList : function (htEvent) {
		var welToggleButton = $Element(htEvent.element);
		if (welToggleButton != undefined) {
			welToggleButton.toggleClass("close");

			this.setChargePointBankList(welToggleButton.hasClass("close"));
		}
	},
	toggleChargeBenefitPoint : function (bIsAddClass) {
		if (bIsAddClass) {
			this._getElement("chargeBenefitPoint").addClass("type_three");
			this._getElement("chargeBenefitPointText").html("3% 적립");
		} else {
			this._getElement("chargeBenefitPoint").removeClass("type_three");
			this._getElement("chargeBenefitPointText").html("2.5% 적립");
		}
	},
	setChargePointBankList : function (bIsOpened) {
		$ElementList(this._getElement("chargedPointBankList").queryAll("._naverPayBankbookTooltip")).hide();

		var welSelectedBank;
		if (this._getElement("chargedPointBankList").query(".account_selected") != undefined) {
			welSelectedBank = $Element(this._getElement("chargedPointBankList").query(".account_selected").parentElement);
		} else {
			welSelectedBank = $Element(this._getElement("chargedPointBankList").query("li"));
		}

		if (bIsOpened) {
			$ElementList(this._getElement("chargedPointBankList").queryAll("li")).show();

			if ($Element(welSelectedBank.query("input")).attr("data-pay-bankbook") == "false" && this._getElement("chargedPointBankList").query("._selectNaverPayBankbookTooltip") != undefined) {
				$Element(this._getElement("chargedPointBankList").query("._selectNaverPayBankbookTooltip")).show();
			}

			if (this._getElement("chargedPointAddBankAccount") != undefined) {
				this._getElement("chargedPointAddBankAccount").show();
			}
		} else {
			$ElementList(this._getElement("chargedPointBankList").queryAll("li")).hide();
			welSelectedBank.show();

			if ($Element(welSelectedBank.query("input")).attr("data-pay-bankbook") == "false" && welSelectedBank.query("._naverPayBankbookTooltip") != undefined) {
				$Element(welSelectedBank.query("._naverPayBankbookTooltip")).show();
			}

			if (this._getElement("chargedPointAddBankAccount") != undefined) {
				this._getElement("chargedPointAddBankAccount").hide();
			}
		}
	},
	chooseChargeAccount : function (htEvent, elChargeBankElement) {
		$ElementList(this._getElement("chargedPointBankList").queryAll("label.account_selected")).removeClass("account_selected");
		$ElementList(this._getElement("chargedPointBankList").queryAll("input")).attr("checked", false);

		if (htEvent == undefined) {
			$Element(this._getElement("chargedPointBankList").query("label[for=" + elChargeBankElement.attr("id") + "]")).addClass("account_selected");
		} else {
			elChargeBankElement = $Element($$.getSingle("#" + htEvent.delegatedElement.getAttribute("for")));
			$Element(htEvent.delegatedElement).addClass("account_selected");
		}

		if (elChargeBankElement != undefined && elChargeBankElement.attr("data-pay-bankbook") == "true") {
			this.toggleChargeBenefitPoint(true);
			if (this._getElement("chargedPointBankList").query("._selectNaverPayBankbookTooltip") != undefined) {
				$Element(this._getElement("chargedPointBankList").query("._selectNaverPayBankbookTooltip")).hide();
			}
		} else {
			this.toggleChargeBenefitPoint(false);
			if (this._getElement("chargedPointBankList").query("._selectNaverPayBankbookTooltip") != undefined) {
				$Element(this._getElement("chargedPointBankList").query("._selectNaverPayBankbookTooltip")).show();
			}
		}

		this.recalculateAccumulationNMileage();
	},
	chooseChargeAmount : function () {
		this._changePriceInfoView();
		this.setChargeAmountSelectBoxLabel();
	},
	setChargeAmountSelectBoxLabel : function () {
		this._htInstance["chargeAmountSelectBox"].getLabelElement().innerText = this._htInstance["chargeAmountSelectBox"].getValue() + "원";
	},
	chooseNaverPayBankbook : function () {
		var elNaverBankbook = this._getNaverBankbookElement();
		if (elNaverBankbook != undefined) {
			this.chooseChargeAccount(null, elNaverBankbook);
			var bIsOpened = this._getElement("chargePointBankListToggleButton") != undefined && this._getElement("chargePointBankListToggleButton").hasClass("close");
			this.setChargePointBankList(bIsOpened);
		}
	},
	_getNaverBankbookElement : function () {
		var elNaverBankbook;
		if (this._getElement("chargedPointBankList") != undefined) {
			$A(this._getElement("chargedPointBankList").queryAll("input")).forEach(function (v) {
				if ($Element(v).attr("data-pay-bankbook") == "true" && !$Element(v).attr("disabled")) {
					elNaverBankbook = $Element(v);
					$A.Break();
				}
			});
		}
		return elNaverBankbook;
	},
	_getSelectedChargeBankElement : function () {
		if (this._getElement("chargedPointBankList") == undefined) {
			return;
		}

		var elChargeBankElement;
		$A(this._getElement("chargedPointBankList").queryAll("label")).forEach(function (v) {
			if ($Element(v).hasClass("account_selected")) {
				elChargeBankElement = $Element($$.getSingle("#" + v.getAttribute("for")));
				$A.Break();
			}
		});

		return elChargeBankElement;
	},
	getChargePointInfo : function () {
		if (this.getPayMethod() != "CHARGED_POINT" || !this.isChargePointPaymentAvailable(true) || this._getChargeAmount() <= 0) {
			return;
		}

		var htChargePointInfo = $H();
		htChargePointInfo["amount"] = this._getChargeAmount();

		var welSelectedAccount = this._getSelectedChargeBankElement();
		if (welSelectedAccount != undefined) {
			htChargePointInfo["bankCode"] = welSelectedAccount.attr("data-code");
			htChargePointInfo["accountKey"] = welSelectedAccount.attr("data-account-key");
			htChargePointInfo["payBankbookCode"] = welSelectedAccount.attr("data-pay-bankbook-code")
		}

		return htChargePointInfo;
	},
	changePaymentMethodToChargedPoint : function (htEvent, bChooseNaverPayBankbook) {
		this._selectPaymentMethod("CHARGED_POINT");
		this.changePaymentTab(null, "chargedPointPayment");
		if (this._getOption("remainChargedPoint") < this.getGeneralPayAmount() && bChooseNaverPayBankbook) {
			this.chooseNaverPayBankbook();
		}
	},
	validatePayAmountForChargePointPayment : function (bShowAlert) {
		var sErrorMessage;
		if (this.getGeneralPayAmount() - this._getOption("remainChargedPoint") > this._getOption("remainChargeLimit")) {
			var sMaxChargePointLimit = nmp.front.order.ui.setThousandComma(this._getOption("remainChargedPoint") + this._getOption("remainChargeLimit"));
			sErrorMessage = "충전포인트로 결제할 수 없습니다.\n(최대 결제가능금액 : " + sMaxChargePointLimit + "원)\n다른 결제수단을 선택해주세요.";
		} else if ((this.getGeneralPayAmount() - this._getOption("remainChargedPoint") > 0) && (this.getOrderSnapshot()["orderPayAmount"] + 10000) > 2000000) {
			sErrorMessage = "충전포인트 결제 시 보유 한도를 초과하여 충전포인트로 결제하실 수 없습니다.\n(최소충전금액 포함 200만원까지 결제 가능)\n다른 결제수단을 선택해주세요.";
		}

		if (bShowAlert && sErrorMessage != undefined && !this._isOrderSheetDimmed()) {
			alert(sErrorMessage);
		}

		return (sErrorMessage == undefined);
	},
	selectFirstPayableChargeAccount : function () {
		var sAccountId;
		$A(this._getElement("chargedPointBankList").queryAll("input")).forEach(function (v) {
			if (!$Element(v).attr("disabled")) {
				sAccountId = $Element(v).attr("id");
				$A.Break();
			}
		});

		if (sAccountId != undefined) {
			$Element(this._getElement("chargedPointBankList").query("label[for=" + sAccountId + "]")).addClass("account_selected");
			var bIsOpened = this._getElement("chargePointBankListToggleButton") != undefined && this._getElement("chargePointBankListToggleButton").hasClass("close");
			this.setChargePointBankList(bIsOpened);
		}
	},
	_selectAlternativePaymentTab : function (bExcludeChargePoint) {
		if (!bExcludeChargePoint && this.isChargePointPaymentAvailable()) {
			return "chargedPointPayment";
		} else if ($Element(this._getElement("root").query("._naverPaymentsBankTab")) != undefined) {
			return "naverPaymentsBank";
		} else if ($Element(this._getElement("root").query("._naverPaymentsCardTab")) != undefined) {
			return "naverPaymentsCard";
		} else {
			return "generalPayments";
		}
	},
	_isOrderSheetDimmed : function() {
		return $A($$(".dimmed")).some(function(v) {
			return (v.parentElement != undefined && v.parentElement.offsetParent != null);
		});
	},
	"":""
});